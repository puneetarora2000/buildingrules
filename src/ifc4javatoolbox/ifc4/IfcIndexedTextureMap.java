/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcIndexedTextureMap<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public abstract class IfcIndexedTextureMap extends IfcTextureCoordinate implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"LIST<IfcSurfaceTexture>","IfcTessellatedFaceSet","IfcTextureVertexList"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** MappedTo is an DEMANDED attribute - may not be null**/
	protected IfcTessellatedFaceSet MappedTo;
	/** TexCoords is an DEMANDED attribute - may not be null**/
	protected IfcTextureVertexList TexCoords;
	/**
	* The default constructor.
	**/
	public IfcIndexedTextureMap(){}

	/**
	* Constructs a new IfcIndexedTextureMap object using the given parameters.
	*
	* @param Maps DEMANDED parameter of type LIST<IfcSurfaceTexture> - may not be null.
	* @param MappedTo DEMANDED parameter of type IfcTessellatedFaceSet - may not be null.
	* @param TexCoords DEMANDED parameter of type IfcTextureVertexList - may not be null.
	**/
	public IfcIndexedTextureMap(LIST<IfcSurfaceTexture> Maps, IfcTessellatedFaceSet MappedTo, IfcTextureVertexList TexCoords)
	{
		this.Maps = Maps;
		this.MappedTo = MappedTo;
		this.TexCoords = TexCoords;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcIndexedTextureMap object using the given parameters.
	*
	* @param Maps DEMANDED parameter of type LIST<IfcSurfaceTexture> - may not be null.
	* @param MappedTo DEMANDED parameter of type IfcTessellatedFaceSet - may not be null.
	* @param TexCoords DEMANDED parameter of type IfcTextureVertexList - may not be null.
	**/
	public void setParameters(LIST<IfcSurfaceTexture> Maps, IfcTessellatedFaceSet MappedTo, IfcTextureVertexList TexCoords)
	{
		this.Maps = Maps;
		this.MappedTo = MappedTo;
		this.TexCoords = TexCoords;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Maps = (LIST<IfcSurfaceTexture>) parameters.get(0);
		this.MappedTo = (IfcTessellatedFaceSet) parameters.get(1);
		this.TexCoords = (IfcTextureVertexList) parameters.get(2);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
		if(Maps != null)
		{
			for(IfcSurfaceTexture Maps$ : Maps)
			{
				if(Maps$.IsMappedBy_Inverse == null)
				{
					Maps$.IsMappedBy_Inverse = new SET<IfcTextureCoordinate>();
				}
				Maps$.IsMappedBy_Inverse.add(this);
			}
		}
		if(MappedTo != null)
		{
				if(MappedTo.HasTextures_Inverse == null)
				{
					MappedTo.HasTextures_Inverse = new SET<IfcIndexedTextureMap>();
				}
				MappedTo.HasTextures_Inverse.add(this);
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcIndexedTextureMap.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCINDEXEDTEXTUREMAP(");
		if(getRedefinedDerivedAttributeTypes().contains("Maps")) stepString = stepString.concat("*,");
		else{
		if(this.Maps != null)		stepString = stepString.concat(((RootInterface)this.Maps).getStepParameter(IfcSurfaceTexture.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MappedTo")) stepString = stepString.concat("*,");
		else{
		if(this.MappedTo != null)		stepString = stepString.concat(((RootInterface)this.MappedTo).getStepParameter(IfcTessellatedFaceSet.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TexCoords")) stepString = stepString.concat("*);");
		else{
		if(this.TexCoords != null)		stepString = stepString.concat(((RootInterface)this.TexCoords).getStepParameter(IfcTextureVertexList.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the MappedTo attribute to the given value.
	*
	* @param MappedTo OPTIONAL value to set
	**/
	public void setMappedTo(IfcTessellatedFaceSet MappedTo)
	{
		synchronizeInversesRemoveMappedTo(this.MappedTo);
		this.MappedTo = MappedTo;
		synchronizeInversesAddMappedTo(this.MappedTo);
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MappedTo attribute.
	*
	* @return the value of MappedTo
	/**/
	public IfcTessellatedFaceSet getMappedTo()
	{
		return this.MappedTo;
	}

	private void synchronizeInversesAddMappedTo(IfcTessellatedFaceSet MappedTo)
	{
		if(MappedTo != null)
		{
				if(MappedTo.HasTextures_Inverse == null)
				{
					MappedTo.HasTextures_Inverse = new SET<IfcIndexedTextureMap>();
				}
				MappedTo.HasTextures_Inverse.add(this);
		}
	}

	private void synchronizeInversesRemoveMappedTo(IfcTessellatedFaceSet MappedTo)
	{
		if(MappedTo != null)
		{
				if(MappedTo.HasTextures_Inverse != null)
				{
					MappedTo.HasTextures_Inverse.remove(this);
				}
		}
	}

	/**
	* This method sets the TexCoords attribute to the given value.
	*
	* @param TexCoords OPTIONAL value to set
	**/
	public void setTexCoords(IfcTextureVertexList TexCoords)
	{
		this.TexCoords = TexCoords;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TexCoords attribute.
	*
	* @return the value of TexCoords
	/**/
	public IfcTextureVertexList getTexCoords()
	{
		return this.TexCoords;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public abstract Object clone();

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public abstract Object shallowCopy();

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

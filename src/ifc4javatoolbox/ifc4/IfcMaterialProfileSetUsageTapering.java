/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcMaterialProfileSetUsageTapering<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcMaterialProfileSetUsageTapering extends IfcMaterialProfileSetUsage implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcMaterialProfileSet","IfcCardinalPointReference","IfcPositiveLengthMeasure","IfcMaterialProfileSet","IfcCardinalPointReference"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** ForProfileEndSet is an DEMANDED attribute - may not be null**/
	protected IfcMaterialProfileSet ForProfileEndSet;
	/** CardinalEndPoint is an OPTIONAL attribute**/
	protected IfcCardinalPointReference CardinalEndPoint;
	/**
	* The default constructor.
	**/
	public IfcMaterialProfileSetUsageTapering(){}

	/**
	* Constructs a new IfcMaterialProfileSetUsageTapering object using the given parameters.
	*
	* @param ForProfileSet DEMANDED parameter of type IfcMaterialProfileSet - may not be null.
	* @param CardinalPoint OPTIONAL parameter of type IfcCardinalPointReference
	* @param ReferenceExtent OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param ForProfileEndSet DEMANDED parameter of type IfcMaterialProfileSet - may not be null.
	* @param CardinalEndPoint OPTIONAL parameter of type IfcCardinalPointReference
	**/
	public IfcMaterialProfileSetUsageTapering(IfcMaterialProfileSet ForProfileSet, IfcCardinalPointReference CardinalPoint, IfcPositiveLengthMeasure ReferenceExtent, IfcMaterialProfileSet ForProfileEndSet, IfcCardinalPointReference CardinalEndPoint)
	{
		this.ForProfileSet = ForProfileSet;
		this.CardinalPoint = CardinalPoint;
		this.ReferenceExtent = ReferenceExtent;
		this.ForProfileEndSet = ForProfileEndSet;
		this.CardinalEndPoint = CardinalEndPoint;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcMaterialProfileSetUsageTapering object using the given parameters.
	*
	* @param ForProfileSet DEMANDED parameter of type IfcMaterialProfileSet - may not be null.
	* @param CardinalPoint OPTIONAL parameter of type IfcCardinalPointReference
	* @param ReferenceExtent OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param ForProfileEndSet DEMANDED parameter of type IfcMaterialProfileSet - may not be null.
	* @param CardinalEndPoint OPTIONAL parameter of type IfcCardinalPointReference
	**/
	public void setParameters(IfcMaterialProfileSet ForProfileSet, IfcCardinalPointReference CardinalPoint, IfcPositiveLengthMeasure ReferenceExtent, IfcMaterialProfileSet ForProfileEndSet, IfcCardinalPointReference CardinalEndPoint)
	{
		this.ForProfileSet = ForProfileSet;
		this.CardinalPoint = CardinalPoint;
		this.ReferenceExtent = ReferenceExtent;
		this.ForProfileEndSet = ForProfileEndSet;
		this.CardinalEndPoint = CardinalEndPoint;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.ForProfileSet = (IfcMaterialProfileSet) parameters.get(0);
		this.CardinalPoint = (IfcCardinalPointReference) parameters.get(1);
		this.ReferenceExtent = (IfcPositiveLengthMeasure) parameters.get(2);
		this.ForProfileEndSet = (IfcMaterialProfileSet) parameters.get(3);
		this.CardinalEndPoint = (IfcCardinalPointReference) parameters.get(4);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcMaterialProfileSetUsageTapering.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCMATERIALPROFILESETUSAGETAPERING(");
		if(getRedefinedDerivedAttributeTypes().contains("ForProfileSet")) stepString = stepString.concat("*,");
		else{
		if(this.ForProfileSet != null)		stepString = stepString.concat(((RootInterface)this.ForProfileSet).getStepParameter(IfcMaterialProfileSet.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CardinalPoint")) stepString = stepString.concat("*,");
		else{
		if(this.CardinalPoint != null)		stepString = stepString.concat(((RootInterface)this.CardinalPoint).getStepParameter(IfcCardinalPointReference.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ReferenceExtent")) stepString = stepString.concat("*,");
		else{
		if(this.ReferenceExtent != null)		stepString = stepString.concat(((RootInterface)this.ReferenceExtent).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ForProfileEndSet")) stepString = stepString.concat("*,");
		else{
		if(this.ForProfileEndSet != null)		stepString = stepString.concat(((RootInterface)this.ForProfileEndSet).getStepParameter(IfcMaterialProfileSet.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CardinalEndPoint")) stepString = stepString.concat("*);");
		else{
		if(this.CardinalEndPoint != null)		stepString = stepString.concat(((RootInterface)this.CardinalEndPoint).getStepParameter(IfcCardinalPointReference.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the ForProfileEndSet attribute to the given value.
	*
	* @param ForProfileEndSet OPTIONAL value to set
	**/
	public void setForProfileEndSet(IfcMaterialProfileSet ForProfileEndSet)
	{
		this.ForProfileEndSet = ForProfileEndSet;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ForProfileEndSet attribute.
	*
	* @return the value of ForProfileEndSet
	/**/
	public IfcMaterialProfileSet getForProfileEndSet()
	{
		return this.ForProfileEndSet;
	}

	/**
	* This method sets the CardinalEndPoint attribute to the given value.
	*
	* @param CardinalEndPoint DEMANDED value to set - may not be null
	**/
	public void setCardinalEndPoint(IfcCardinalPointReference CardinalEndPoint)
	{
		this.CardinalEndPoint = CardinalEndPoint;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the CardinalEndPoint attribute.
	*
	* @return the value of CardinalEndPoint
	/**/
	public IfcCardinalPointReference getCardinalEndPoint()
	{
		return this.CardinalEndPoint;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcMaterialProfileSetUsageTapering ifcMaterialProfileSetUsageTapering = new IfcMaterialProfileSetUsageTapering();
		if(this.ForProfileSet != null)
			ifcMaterialProfileSetUsageTapering.setForProfileSet((IfcMaterialProfileSet)this.ForProfileSet.clone());
		if(this.CardinalPoint != null)
			ifcMaterialProfileSetUsageTapering.setCardinalPoint((IfcCardinalPointReference)this.CardinalPoint.clone());
		if(this.ReferenceExtent != null)
			ifcMaterialProfileSetUsageTapering.setReferenceExtent((IfcPositiveLengthMeasure)this.ReferenceExtent.clone());
		if(this.ForProfileEndSet != null)
			ifcMaterialProfileSetUsageTapering.setForProfileEndSet((IfcMaterialProfileSet)this.ForProfileEndSet.clone());
		if(this.CardinalEndPoint != null)
			ifcMaterialProfileSetUsageTapering.setCardinalEndPoint((IfcCardinalPointReference)this.CardinalEndPoint.clone());
		return ifcMaterialProfileSetUsageTapering;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcMaterialProfileSetUsageTapering ifcMaterialProfileSetUsageTapering = new IfcMaterialProfileSetUsageTapering();
		if(this.ForProfileSet != null)
			ifcMaterialProfileSetUsageTapering.setForProfileSet(this.ForProfileSet);
		if(this.CardinalPoint != null)
			ifcMaterialProfileSetUsageTapering.setCardinalPoint(this.CardinalPoint);
		if(this.ReferenceExtent != null)
			ifcMaterialProfileSetUsageTapering.setReferenceExtent(this.ReferenceExtent);
		if(this.ForProfileEndSet != null)
			ifcMaterialProfileSetUsageTapering.setForProfileEndSet(this.ForProfileEndSet);
		if(this.CardinalEndPoint != null)
			ifcMaterialProfileSetUsageTapering.setCardinalEndPoint(this.CardinalEndPoint);
		return ifcMaterialProfileSetUsageTapering;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

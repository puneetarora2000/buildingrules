/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcLagTime<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcLagTime extends IfcSchedulingTime implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcDataOriginEnum","IfcLabel","IfcTimeOrRatioSelect","IfcTaskDurationEnum"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** LagValue is an DEMANDED attribute - may not be null**/
	protected IfcTimeOrRatioSelect LagValue;
	/** DurationType is an DEMANDED attribute - may not be null**/
	protected IfcTaskDurationEnum DurationType;
	/**
	* The default constructor.
	**/
	public IfcLagTime(){}

	/**
	* Constructs a new IfcLagTime object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param DataOrigin OPTIONAL parameter of type IfcDataOriginEnum
	* @param UserDefinedDataOrigin OPTIONAL parameter of type IfcLabel
	* @param LagValue DEMANDED parameter of type IfcTimeOrRatioSelect - may not be null.
	* @param DurationType DEMANDED parameter of type IfcTaskDurationEnum - may not be null.
	**/
	public IfcLagTime(IfcLabel Name, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin, IfcTimeOrRatioSelect LagValue, IfcTaskDurationEnum DurationType)
	{
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.LagValue = LagValue;
		this.DurationType = DurationType;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcLagTime object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param DataOrigin OPTIONAL parameter of type IfcDataOriginEnum
	* @param UserDefinedDataOrigin OPTIONAL parameter of type IfcLabel
	* @param LagValue DEMANDED parameter of type IfcTimeOrRatioSelect - may not be null.
	* @param DurationType DEMANDED parameter of type IfcTaskDurationEnum - may not be null.
	**/
	public void setParameters(IfcLabel Name, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin, IfcTimeOrRatioSelect LagValue, IfcTaskDurationEnum DurationType)
	{
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.LagValue = LagValue;
		this.DurationType = DurationType;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.DataOrigin = (IfcDataOriginEnum) parameters.get(1);
		this.UserDefinedDataOrigin = (IfcLabel) parameters.get(2);
		this.LagValue = (IfcTimeOrRatioSelect) parameters.get(3);
		this.DurationType = (IfcTaskDurationEnum) parameters.get(4);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcLagTime.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCLAGTIME(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("DataOrigin")) stepString = stepString.concat("*,");
		else{
		if(this.DataOrigin != null)		stepString = stepString.concat(((RootInterface)this.DataOrigin).getStepParameter(IfcDataOriginEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("UserDefinedDataOrigin")) stepString = stepString.concat("*,");
		else{
		if(this.UserDefinedDataOrigin != null)		stepString = stepString.concat(((RootInterface)this.UserDefinedDataOrigin).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LagValue")) stepString = stepString.concat("*,");
		else{
		if(this.LagValue != null)		stepString = stepString.concat(((RootInterface)this.LagValue).getStepParameter(IfcTimeOrRatioSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("DurationType")) stepString = stepString.concat("*);");
		else{
		if(this.DurationType != null)		stepString = stepString.concat(((RootInterface)this.DurationType).getStepParameter(IfcTaskDurationEnum.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the LagValue attribute to the given value.
	*
	* @param LagValue OPTIONAL value to set
	**/
	public void setLagValue(IfcTimeOrRatioSelect LagValue)
	{
		this.LagValue = LagValue;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LagValue attribute.
	*
	* @return the value of LagValue
	/**/
	public IfcTimeOrRatioSelect getLagValue()
	{
		return this.LagValue;
	}

	/**
	* This method sets the DurationType attribute to the given value.
	*
	* @param DurationType OPTIONAL value to set
	**/
	public void setDurationType(IfcTaskDurationEnum DurationType)
	{
		this.DurationType = DurationType;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the DurationType attribute.
	*
	* @return the value of DurationType
	/**/
	public IfcTaskDurationEnum getDurationType()
	{
		return this.DurationType;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcLagTime ifcLagTime = new IfcLagTime();
		if(this.Name != null)
			ifcLagTime.setName((IfcLabel)this.Name.clone());
		if(this.DataOrigin != null)
			ifcLagTime.setDataOrigin((IfcDataOriginEnum)this.DataOrigin.clone());
		if(this.UserDefinedDataOrigin != null)
			ifcLagTime.setUserDefinedDataOrigin((IfcLabel)this.UserDefinedDataOrigin.clone());
		if(this.LagValue != null)
			ifcLagTime.setLagValue((IfcTimeOrRatioSelect)this.LagValue.clone());
		if(this.DurationType != null)
			ifcLagTime.setDurationType((IfcTaskDurationEnum)this.DurationType.clone());
		return ifcLagTime;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcLagTime ifcLagTime = new IfcLagTime();
		if(this.Name != null)
			ifcLagTime.setName(this.Name);
		if(this.DataOrigin != null)
			ifcLagTime.setDataOrigin(this.DataOrigin);
		if(this.UserDefinedDataOrigin != null)
			ifcLagTime.setUserDefinedDataOrigin(this.UserDefinedDataOrigin);
		if(this.LagValue != null)
			ifcLagTime.setLagValue(this.LagValue);
		if(this.DurationType != null)
			ifcLagTime.setDurationType(this.DurationType);
		return ifcLagTime;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

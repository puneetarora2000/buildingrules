/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcBSplineCurveWithKnots<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcBSplineCurveWithKnots extends IfcBSplineCurve implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"INTEGER","LIST<IfcCartesianPoint>","IfcBSplineCurveForm","LOGICAL","LOGICAL","LIST<INTEGER>","LIST<IfcParameterValue>","IfcKnotType"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** KnotMultiplicities is an DEMANDED attribute - may not be null**/
	protected LIST<INTEGER> KnotMultiplicities;
	/** Knots is an DEMANDED attribute - may not be null**/
	protected LIST<IfcParameterValue> Knots;
	/** KnotSpec is an DEMANDED attribute - may not be null**/
	protected IfcKnotType KnotSpec;
	/**
	* The default constructor.
	**/
	public IfcBSplineCurveWithKnots(){}

	/**
	* Constructs a new IfcBSplineCurveWithKnots object using the given parameters.
	*
	* @param Degree DEMANDED parameter of type INTEGER - may not be null.
	* @param ControlPointsList DEMANDED parameter of type LIST<IfcCartesianPoint> - may not be null.
	* @param CurveForm DEMANDED parameter of type IfcBSplineCurveForm - may not be null.
	* @param ClosedCurve DEMANDED parameter of type LOGICAL - may not be null.
	* @param SelfIntersect DEMANDED parameter of type LOGICAL - may not be null.
	* @param KnotMultiplicities DEMANDED parameter of type LIST<INTEGER> - may not be null.
	* @param Knots DEMANDED parameter of type LIST<IfcParameterValue> - may not be null.
	* @param KnotSpec DEMANDED parameter of type IfcKnotType - may not be null.
	**/
	public IfcBSplineCurveWithKnots(INTEGER Degree, LIST<IfcCartesianPoint> ControlPointsList, IfcBSplineCurveForm CurveForm, LOGICAL ClosedCurve, LOGICAL SelfIntersect, LIST<INTEGER> KnotMultiplicities, LIST<IfcParameterValue> Knots, IfcKnotType KnotSpec)
	{
		this.Degree = Degree;
		this.ControlPointsList = ControlPointsList;
		this.CurveForm = CurveForm;
		this.ClosedCurve = ClosedCurve;
		this.SelfIntersect = SelfIntersect;
		this.KnotMultiplicities = KnotMultiplicities;
		this.Knots = Knots;
		this.KnotSpec = KnotSpec;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcBSplineCurveWithKnots object using the given parameters.
	*
	* @param Degree DEMANDED parameter of type INTEGER - may not be null.
	* @param ControlPointsList DEMANDED parameter of type LIST<IfcCartesianPoint> - may not be null.
	* @param CurveForm DEMANDED parameter of type IfcBSplineCurveForm - may not be null.
	* @param ClosedCurve DEMANDED parameter of type LOGICAL - may not be null.
	* @param SelfIntersect DEMANDED parameter of type LOGICAL - may not be null.
	* @param KnotMultiplicities DEMANDED parameter of type LIST<INTEGER> - may not be null.
	* @param Knots DEMANDED parameter of type LIST<IfcParameterValue> - may not be null.
	* @param KnotSpec DEMANDED parameter of type IfcKnotType - may not be null.
	**/
	public void setParameters(INTEGER Degree, LIST<IfcCartesianPoint> ControlPointsList, IfcBSplineCurveForm CurveForm, LOGICAL ClosedCurve, LOGICAL SelfIntersect, LIST<INTEGER> KnotMultiplicities, LIST<IfcParameterValue> Knots, IfcKnotType KnotSpec)
	{
		this.Degree = Degree;
		this.ControlPointsList = ControlPointsList;
		this.CurveForm = CurveForm;
		this.ClosedCurve = ClosedCurve;
		this.SelfIntersect = SelfIntersect;
		this.KnotMultiplicities = KnotMultiplicities;
		this.Knots = Knots;
		this.KnotSpec = KnotSpec;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Degree = (INTEGER) parameters.get(0);
		this.ControlPointsList = (LIST<IfcCartesianPoint>) parameters.get(1);
		this.CurveForm = (IfcBSplineCurveForm) parameters.get(2);
		this.ClosedCurve = (LOGICAL) parameters.get(3);
		this.SelfIntersect = (LOGICAL) parameters.get(4);
		this.KnotMultiplicities = (LIST<INTEGER>) parameters.get(5);
		this.Knots = (LIST<IfcParameterValue>) parameters.get(6);
		this.KnotSpec = (IfcKnotType) parameters.get(7);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcBSplineCurveWithKnots.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCBSPLINECURVEWITHKNOTS(");
		if(getRedefinedDerivedAttributeTypes().contains("Degree")) stepString = stepString.concat("*,");
		else{
		if(this.Degree != null)		stepString = stepString.concat(((RootInterface)this.Degree).getStepParameter(INTEGER.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ControlPointsList")) stepString = stepString.concat("*,");
		else{
		if(this.ControlPointsList != null)		stepString = stepString.concat(((RootInterface)this.ControlPointsList).getStepParameter(IfcCartesianPoint.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CurveForm")) stepString = stepString.concat("*,");
		else{
		if(this.CurveForm != null)		stepString = stepString.concat(((RootInterface)this.CurveForm).getStepParameter(IfcBSplineCurveForm.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ClosedCurve")) stepString = stepString.concat("*,");
		else{
		if(this.ClosedCurve != null)		stepString = stepString.concat(((RootInterface)this.ClosedCurve).getStepParameter(LOGICAL.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("SelfIntersect")) stepString = stepString.concat("*,");
		else{
		if(this.SelfIntersect != null)		stepString = stepString.concat(((RootInterface)this.SelfIntersect).getStepParameter(LOGICAL.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("KnotMultiplicities")) stepString = stepString.concat("*,");
		else{
		if(this.KnotMultiplicities != null)		stepString = stepString.concat(((RootInterface)this.KnotMultiplicities).getStepParameter(INTEGER.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Knots")) stepString = stepString.concat("*,");
		else{
		if(this.Knots != null)		stepString = stepString.concat(((RootInterface)this.Knots).getStepParameter(IfcParameterValue.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("KnotSpec")) stepString = stepString.concat("*);");
		else{
		if(this.KnotSpec != null)		stepString = stepString.concat(((RootInterface)this.KnotSpec).getStepParameter(IfcKnotType.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the KnotMultiplicities attribute to the given value.
	*
	* @param KnotMultiplicities OPTIONAL value to set
	**/
	public void setKnotMultiplicities(LIST<INTEGER> KnotMultiplicities)
	{
		this.KnotMultiplicities = KnotMultiplicities;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the KnotMultiplicities attribute.
	*
	* @return a copy of the KnotMultiplicities list
	**/
	public LIST<INTEGER> getKnotMultiplicities()
	{
		if(this.KnotMultiplicities != null)
			return new LIST<INTEGER>(this.KnotMultiplicities);
		return null;
	}

	/**
	* This method adds an INTEGER object to the KnotMultiplicities list.
	* @param KnotMultiplicities element to be appended to this list.
	**/
	public void addKnotMultiplicities(INTEGER KnotMultiplicities)
	{
		if(this.KnotMultiplicities == null)
			this.KnotMultiplicities = new LIST<INTEGER>();
		this.KnotMultiplicities.add(KnotMultiplicities);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of INTEGER objects to the KnotMultiplicities list.
	* @param KnotMultiplicities collection containing elements to be added to this list.
	**/
	public void addAllKnotMultiplicities(java.util.Collection<INTEGER> KnotMultiplicities)
	{
		if(this.KnotMultiplicities == null)
			this.KnotMultiplicities = new LIST<INTEGER>();
		this.KnotMultiplicities.addAll(KnotMultiplicities);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the KnotMultiplicities list.
	**/
	public void clearKnotMultiplicities()
	{
		if(this.KnotMultiplicities != null)
		{
			this.KnotMultiplicities.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an INTEGER object from the KnotMultiplicities list.
	* @param KnotMultiplicities element to be removed from this list.
	**/
	public void removeKnotMultiplicities(INTEGER KnotMultiplicities)
	{
		if(this.KnotMultiplicities != null)
		{
			this.KnotMultiplicities.remove(KnotMultiplicities);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of INTEGER objects from the KnotMultiplicities list.
	* @param KnotMultiplicities collection containing elements to be removed from this list.
	**/
	public void removeAllKnotMultiplicities(java.util.Collection<INTEGER> KnotMultiplicities)
	{
		if(this.KnotMultiplicities != null)
		{
			this.KnotMultiplicities.removeAll(KnotMultiplicities);
			fireChangeEvent();
		}
	}

	/**
	* This method sets the Knots attribute to the given value.
	*
	* @param Knots OPTIONAL value to set
	**/
	public void setKnots(LIST<IfcParameterValue> Knots)
	{
		this.Knots = Knots;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the Knots attribute.
	*
	* @return a copy of the Knots list
	**/
	public LIST<IfcParameterValue> getKnots()
	{
		if(this.Knots != null)
			return new LIST<IfcParameterValue>(this.Knots);
		return null;
	}

	/**
	* This method adds an IfcParameterValue object to the Knots list.
	* @param Knots element to be appended to this list.
	**/
	public void addKnots(IfcParameterValue Knots)
	{
		if(this.Knots == null)
			this.Knots = new LIST<IfcParameterValue>();
		this.Knots.add(Knots);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcParameterValue objects to the Knots list.
	* @param Knots collection containing elements to be added to this list.
	**/
	public void addAllKnots(java.util.Collection<IfcParameterValue> Knots)
	{
		if(this.Knots == null)
			this.Knots = new LIST<IfcParameterValue>();
		this.Knots.addAll(Knots);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the Knots list.
	**/
	public void clearKnots()
	{
		if(this.Knots != null)
		{
			this.Knots.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcParameterValue object from the Knots list.
	* @param Knots element to be removed from this list.
	**/
	public void removeKnots(IfcParameterValue Knots)
	{
		if(this.Knots != null)
		{
			this.Knots.remove(Knots);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcParameterValue objects from the Knots list.
	* @param Knots collection containing elements to be removed from this list.
	**/
	public void removeAllKnots(java.util.Collection<IfcParameterValue> Knots)
	{
		if(this.Knots != null)
		{
			this.Knots.removeAll(Knots);
			fireChangeEvent();
		}
	}

	/**
	* This method sets the KnotSpec attribute to the given value.
	*
	* @param KnotSpec OPTIONAL value to set
	**/
	public void setKnotSpec(IfcKnotType KnotSpec)
	{
		this.KnotSpec = KnotSpec;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the KnotSpec attribute.
	*
	* @return the value of KnotSpec
	/**/
	public IfcKnotType getKnotSpec()
	{
		return this.KnotSpec;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcBSplineCurveWithKnots ifcBSplineCurveWithKnots = new IfcBSplineCurveWithKnots();
		if(this.Degree != null)
			ifcBSplineCurveWithKnots.setDegree((INTEGER)this.Degree.clone());
		if(this.ControlPointsList != null)
			ifcBSplineCurveWithKnots.setControlPointsList((LIST<IfcCartesianPoint>)this.ControlPointsList.clone());
		if(this.CurveForm != null)
			ifcBSplineCurveWithKnots.setCurveForm((IfcBSplineCurveForm)this.CurveForm.clone());
		if(this.ClosedCurve != null)
			ifcBSplineCurveWithKnots.setClosedCurve((LOGICAL)this.ClosedCurve.clone());
		if(this.SelfIntersect != null)
			ifcBSplineCurveWithKnots.setSelfIntersect((LOGICAL)this.SelfIntersect.clone());
		if(this.KnotMultiplicities != null)
			ifcBSplineCurveWithKnots.setKnotMultiplicities((LIST<INTEGER>)this.KnotMultiplicities.clone());
		if(this.Knots != null)
			ifcBSplineCurveWithKnots.setKnots((LIST<IfcParameterValue>)this.Knots.clone());
		if(this.KnotSpec != null)
			ifcBSplineCurveWithKnots.setKnotSpec((IfcKnotType)this.KnotSpec.clone());
		return ifcBSplineCurveWithKnots;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcBSplineCurveWithKnots ifcBSplineCurveWithKnots = new IfcBSplineCurveWithKnots();
		if(this.Degree != null)
			ifcBSplineCurveWithKnots.setDegree(this.Degree);
		if(this.ControlPointsList != null)
			ifcBSplineCurveWithKnots.setControlPointsList(this.ControlPointsList);
		if(this.CurveForm != null)
			ifcBSplineCurveWithKnots.setCurveForm(this.CurveForm);
		if(this.ClosedCurve != null)
			ifcBSplineCurveWithKnots.setClosedCurve(this.ClosedCurve);
		if(this.SelfIntersect != null)
			ifcBSplineCurveWithKnots.setSelfIntersect(this.SelfIntersect);
		if(this.KnotMultiplicities != null)
			ifcBSplineCurveWithKnots.setKnotMultiplicities(this.KnotMultiplicities);
		if(this.Knots != null)
			ifcBSplineCurveWithKnots.setKnots(this.Knots);
		if(this.KnotSpec != null)
			ifcBSplineCurveWithKnots.setKnotSpec(this.KnotSpec);
		return ifcBSplineCurveWithKnots;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcCostItem<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcCostItem extends IfcControl implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcGloballyUniqueId","IfcOwnerHistory","IfcLabel","IfcText","IfcLabel","IfcIdentifier","IfcCostItemTypeEnum","LIST<IfcCostValue>","LIST<IfcPhysicalQuantity>"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** PredefinedType is an OPTIONAL attribute**/
	protected IfcCostItemTypeEnum PredefinedType;
	/** CostValues is an OPTIONAL attribute**/
	protected LIST<IfcCostValue> CostValues;
	/** CostQuantities is an OPTIONAL attribute**/
	protected LIST<IfcPhysicalQuantity> CostQuantities;
	/**
	* The default constructor.
	**/
	public IfcCostItem(){}

	/**
	* Constructs a new IfcCostItem object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory OPTIONAL parameter of type IfcOwnerHistory
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ObjectType OPTIONAL parameter of type IfcLabel
	* @param Identification OPTIONAL parameter of type IfcIdentifier
	* @param PredefinedType OPTIONAL parameter of type IfcCostItemTypeEnum
	* @param CostValues OPTIONAL parameter of type LIST<IfcCostValue>
	* @param CostQuantities OPTIONAL parameter of type LIST<IfcPhysicalQuantity>
	**/
	public IfcCostItem(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcCostItemTypeEnum PredefinedType, LIST<IfcCostValue> CostValues, LIST<IfcPhysicalQuantity> CostQuantities)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.PredefinedType = PredefinedType;
		this.CostValues = CostValues;
		this.CostQuantities = CostQuantities;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcCostItem object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory OPTIONAL parameter of type IfcOwnerHistory
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ObjectType OPTIONAL parameter of type IfcLabel
	* @param Identification OPTIONAL parameter of type IfcIdentifier
	* @param PredefinedType OPTIONAL parameter of type IfcCostItemTypeEnum
	* @param CostValues OPTIONAL parameter of type LIST<IfcCostValue>
	* @param CostQuantities OPTIONAL parameter of type LIST<IfcPhysicalQuantity>
	**/
	public void setParameters(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel ObjectType, IfcIdentifier Identification, IfcCostItemTypeEnum PredefinedType, LIST<IfcCostValue> CostValues, LIST<IfcPhysicalQuantity> CostQuantities)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.PredefinedType = PredefinedType;
		this.CostValues = CostValues;
		this.CostQuantities = CostQuantities;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.GlobalId = (IfcGloballyUniqueId) parameters.get(0);
		this.OwnerHistory = (IfcOwnerHistory) parameters.get(1);
		this.Name = (IfcLabel) parameters.get(2);
		this.Description = (IfcText) parameters.get(3);
		this.ObjectType = (IfcLabel) parameters.get(4);
		this.Identification = (IfcIdentifier) parameters.get(5);
		this.PredefinedType = (IfcCostItemTypeEnum) parameters.get(6);
		this.CostValues = (LIST<IfcCostValue>) parameters.get(7);
		this.CostQuantities = (LIST<IfcPhysicalQuantity>) parameters.get(8);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcCostItem.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCCOSTITEM(");
		if(getRedefinedDerivedAttributeTypes().contains("GlobalId")) stepString = stepString.concat("*,");
		else{
		if(this.GlobalId != null)		stepString = stepString.concat(((RootInterface)this.GlobalId).getStepParameter(IfcGloballyUniqueId.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OwnerHistory")) stepString = stepString.concat("*,");
		else{
		if(this.OwnerHistory != null)		stepString = stepString.concat(((RootInterface)this.OwnerHistory).getStepParameter(IfcOwnerHistory.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ObjectType")) stepString = stepString.concat("*,");
		else{
		if(this.ObjectType != null)		stepString = stepString.concat(((RootInterface)this.ObjectType).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Identification")) stepString = stepString.concat("*,");
		else{
		if(this.Identification != null)		stepString = stepString.concat(((RootInterface)this.Identification).getStepParameter(IfcIdentifier.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PredefinedType")) stepString = stepString.concat("*,");
		else{
		if(this.PredefinedType != null)		stepString = stepString.concat(((RootInterface)this.PredefinedType).getStepParameter(IfcCostItemTypeEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CostValues")) stepString = stepString.concat("*,");
		else{
		if(this.CostValues != null)		stepString = stepString.concat(((RootInterface)this.CostValues).getStepParameter(IfcCostValue.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CostQuantities")) stepString = stepString.concat("*);");
		else{
		if(this.CostQuantities != null)		stepString = stepString.concat(((RootInterface)this.CostQuantities).getStepParameter(IfcPhysicalQuantity.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the PredefinedType attribute to the given value.
	*
	* @param PredefinedType DEMANDED value to set - may not be null
	**/
	public void setPredefinedType(IfcCostItemTypeEnum PredefinedType)
	{
		this.PredefinedType = PredefinedType;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PredefinedType attribute.
	*
	* @return the value of PredefinedType
	/**/
	public IfcCostItemTypeEnum getPredefinedType()
	{
		return this.PredefinedType;
	}

	/**
	* This method sets the CostValues attribute to the given value.
	*
	* @param CostValues DEMANDED value to set - may not be null
	**/
	public void setCostValues(LIST<IfcCostValue> CostValues)
	{
		this.CostValues = CostValues;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the CostValues attribute.
	*
	* @return a copy of the CostValues list
	**/
	public LIST<IfcCostValue> getCostValues()
	{
		if(this.CostValues != null)
			return new LIST<IfcCostValue>(this.CostValues);
		return null;
	}

	/**
	* This method adds an IfcCostValue object to the CostValues list.
	* @param CostValues element to be appended to this list.
	**/
	public void addCostValues(IfcCostValue CostValues)
	{
		if(this.CostValues == null)
			this.CostValues = new LIST<IfcCostValue>();
		this.CostValues.add(CostValues);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcCostValue objects to the CostValues list.
	* @param CostValues collection containing elements to be added to this list.
	**/
	public void addAllCostValues(java.util.Collection<IfcCostValue> CostValues)
	{
		if(this.CostValues == null)
			this.CostValues = new LIST<IfcCostValue>();
		this.CostValues.addAll(CostValues);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the CostValues list.
	**/
	public void clearCostValues()
	{
		if(this.CostValues != null)
		{
			this.CostValues.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcCostValue object from the CostValues list.
	* @param CostValues element to be removed from this list.
	**/
	public void removeCostValues(IfcCostValue CostValues)
	{
		if(this.CostValues != null)
		{
			this.CostValues.remove(CostValues);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcCostValue objects from the CostValues list.
	* @param CostValues collection containing elements to be removed from this list.
	**/
	public void removeAllCostValues(java.util.Collection<IfcCostValue> CostValues)
	{
		if(this.CostValues != null)
		{
			this.CostValues.removeAll(CostValues);
			fireChangeEvent();
		}
	}

	/**
	* This method sets the CostQuantities attribute to the given value.
	*
	* @param CostQuantities DEMANDED value to set - may not be null
	**/
	public void setCostQuantities(LIST<IfcPhysicalQuantity> CostQuantities)
	{
		this.CostQuantities = CostQuantities;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the CostQuantities attribute.
	*
	* @return a copy of the CostQuantities list
	**/
	public LIST<IfcPhysicalQuantity> getCostQuantities()
	{
		if(this.CostQuantities != null)
			return new LIST<IfcPhysicalQuantity>(this.CostQuantities);
		return null;
	}

	/**
	* This method adds an IfcPhysicalQuantity object to the CostQuantities list.
	* @param CostQuantities element to be appended to this list.
	**/
	public void addCostQuantities(IfcPhysicalQuantity CostQuantities)
	{
		if(this.CostQuantities == null)
			this.CostQuantities = new LIST<IfcPhysicalQuantity>();
		this.CostQuantities.add(CostQuantities);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcPhysicalQuantity objects to the CostQuantities list.
	* @param CostQuantities collection containing elements to be added to this list.
	**/
	public void addAllCostQuantities(java.util.Collection<IfcPhysicalQuantity> CostQuantities)
	{
		if(this.CostQuantities == null)
			this.CostQuantities = new LIST<IfcPhysicalQuantity>();
		this.CostQuantities.addAll(CostQuantities);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the CostQuantities list.
	**/
	public void clearCostQuantities()
	{
		if(this.CostQuantities != null)
		{
			this.CostQuantities.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcPhysicalQuantity object from the CostQuantities list.
	* @param CostQuantities element to be removed from this list.
	**/
	public void removeCostQuantities(IfcPhysicalQuantity CostQuantities)
	{
		if(this.CostQuantities != null)
		{
			this.CostQuantities.remove(CostQuantities);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcPhysicalQuantity objects from the CostQuantities list.
	* @param CostQuantities collection containing elements to be removed from this list.
	**/
	public void removeAllCostQuantities(java.util.Collection<IfcPhysicalQuantity> CostQuantities)
	{
		if(this.CostQuantities != null)
		{
			this.CostQuantities.removeAll(CostQuantities);
			fireChangeEvent();
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcCostItem ifcCostItem = new IfcCostItem();
		if(this.GlobalId != null)
			ifcCostItem.setGlobalId((IfcGloballyUniqueId)this.GlobalId.clone());
		if(this.OwnerHistory != null)
			ifcCostItem.setOwnerHistory((IfcOwnerHistory)this.OwnerHistory.clone());
		if(this.Name != null)
			ifcCostItem.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcCostItem.setDescription((IfcText)this.Description.clone());
		if(this.ObjectType != null)
			ifcCostItem.setObjectType((IfcLabel)this.ObjectType.clone());
		if(this.Identification != null)
			ifcCostItem.setIdentification((IfcIdentifier)this.Identification.clone());
		if(this.PredefinedType != null)
			ifcCostItem.setPredefinedType((IfcCostItemTypeEnum)this.PredefinedType.clone());
		if(this.CostValues != null)
			ifcCostItem.setCostValues((LIST<IfcCostValue>)this.CostValues.clone());
		if(this.CostQuantities != null)
			ifcCostItem.setCostQuantities((LIST<IfcPhysicalQuantity>)this.CostQuantities.clone());
		return ifcCostItem;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcCostItem ifcCostItem = new IfcCostItem();
		if(this.GlobalId != null)
			ifcCostItem.setGlobalId(this.GlobalId);
		if(this.OwnerHistory != null)
			ifcCostItem.setOwnerHistory(this.OwnerHistory);
		if(this.Name != null)
			ifcCostItem.setName(this.Name);
		if(this.Description != null)
			ifcCostItem.setDescription(this.Description);
		if(this.ObjectType != null)
			ifcCostItem.setObjectType(this.ObjectType);
		if(this.Identification != null)
			ifcCostItem.setIdentification(this.Identification);
		if(this.PredefinedType != null)
			ifcCostItem.setPredefinedType(this.PredefinedType);
		if(this.CostValues != null)
			ifcCostItem.setCostValues(this.CostValues);
		if(this.CostQuantities != null)
			ifcCostItem.setCostQuantities(this.CostQuantities);
		return ifcCostItem;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

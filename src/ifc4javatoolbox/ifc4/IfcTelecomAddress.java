/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcTelecomAddress<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcTelecomAddress extends IfcAddress implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcAddressTypeEnum","IfcText","IfcLabel","LIST<IfcLabel>","LIST<IfcLabel>","IfcLabel","LIST<IfcLabel>","IfcURIReference","LIST<IfcURIReference>"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** TelephoneNumbers is an OPTIONAL attribute**/
	protected LIST<IfcLabel> TelephoneNumbers;
	/** FacsimileNumbers is an OPTIONAL attribute**/
	protected LIST<IfcLabel> FacsimileNumbers;
	/** PagerNumber is an OPTIONAL attribute**/
	protected IfcLabel PagerNumber;
	/** ElectronicMailAddresses is an OPTIONAL attribute**/
	protected LIST<IfcLabel> ElectronicMailAddresses;
	/** WWWHomePageURL is an OPTIONAL attribute**/
	protected IfcURIReference WWWHomePageURL;
	/** MessagingIDs is an OPTIONAL attribute**/
	protected LIST<IfcURIReference> MessagingIDs;
	/**
	* The default constructor.
	**/
	public IfcTelecomAddress(){}

	/**
	* Constructs a new IfcTelecomAddress object using the given parameters.
	*
	* @param Purpose OPTIONAL parameter of type IfcAddressTypeEnum
	* @param Description OPTIONAL parameter of type IfcText
	* @param UserDefinedPurpose OPTIONAL parameter of type IfcLabel
	* @param TelephoneNumbers OPTIONAL parameter of type LIST<IfcLabel>
	* @param FacsimileNumbers OPTIONAL parameter of type LIST<IfcLabel>
	* @param PagerNumber OPTIONAL parameter of type IfcLabel
	* @param ElectronicMailAddresses OPTIONAL parameter of type LIST<IfcLabel>
	* @param WWWHomePageURL OPTIONAL parameter of type IfcURIReference
	* @param MessagingIDs OPTIONAL parameter of type LIST<IfcURIReference>
	**/
	public IfcTelecomAddress(IfcAddressTypeEnum Purpose, IfcText Description, IfcLabel UserDefinedPurpose, LIST<IfcLabel> TelephoneNumbers, LIST<IfcLabel> FacsimileNumbers, IfcLabel PagerNumber, LIST<IfcLabel> ElectronicMailAddresses, IfcURIReference WWWHomePageURL, LIST<IfcURIReference> MessagingIDs)
	{
		this.Purpose = Purpose;
		this.Description = Description;
		this.UserDefinedPurpose = UserDefinedPurpose;
		this.TelephoneNumbers = TelephoneNumbers;
		this.FacsimileNumbers = FacsimileNumbers;
		this.PagerNumber = PagerNumber;
		this.ElectronicMailAddresses = ElectronicMailAddresses;
		this.WWWHomePageURL = WWWHomePageURL;
		this.MessagingIDs = MessagingIDs;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcTelecomAddress object using the given parameters.
	*
	* @param Purpose OPTIONAL parameter of type IfcAddressTypeEnum
	* @param Description OPTIONAL parameter of type IfcText
	* @param UserDefinedPurpose OPTIONAL parameter of type IfcLabel
	* @param TelephoneNumbers OPTIONAL parameter of type LIST<IfcLabel>
	* @param FacsimileNumbers OPTIONAL parameter of type LIST<IfcLabel>
	* @param PagerNumber OPTIONAL parameter of type IfcLabel
	* @param ElectronicMailAddresses OPTIONAL parameter of type LIST<IfcLabel>
	* @param WWWHomePageURL OPTIONAL parameter of type IfcURIReference
	* @param MessagingIDs OPTIONAL parameter of type LIST<IfcURIReference>
	**/
	public void setParameters(IfcAddressTypeEnum Purpose, IfcText Description, IfcLabel UserDefinedPurpose, LIST<IfcLabel> TelephoneNumbers, LIST<IfcLabel> FacsimileNumbers, IfcLabel PagerNumber, LIST<IfcLabel> ElectronicMailAddresses, IfcURIReference WWWHomePageURL, LIST<IfcURIReference> MessagingIDs)
	{
		this.Purpose = Purpose;
		this.Description = Description;
		this.UserDefinedPurpose = UserDefinedPurpose;
		this.TelephoneNumbers = TelephoneNumbers;
		this.FacsimileNumbers = FacsimileNumbers;
		this.PagerNumber = PagerNumber;
		this.ElectronicMailAddresses = ElectronicMailAddresses;
		this.WWWHomePageURL = WWWHomePageURL;
		this.MessagingIDs = MessagingIDs;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Purpose = (IfcAddressTypeEnum) parameters.get(0);
		this.Description = (IfcText) parameters.get(1);
		this.UserDefinedPurpose = (IfcLabel) parameters.get(2);
		this.TelephoneNumbers = (LIST<IfcLabel>) parameters.get(3);
		this.FacsimileNumbers = (LIST<IfcLabel>) parameters.get(4);
		this.PagerNumber = (IfcLabel) parameters.get(5);
		this.ElectronicMailAddresses = (LIST<IfcLabel>) parameters.get(6);
		this.WWWHomePageURL = (IfcURIReference) parameters.get(7);
		this.MessagingIDs = (LIST<IfcURIReference>) parameters.get(8);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcTelecomAddress.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCTELECOMADDRESS(");
		if(getRedefinedDerivedAttributeTypes().contains("Purpose")) stepString = stepString.concat("*,");
		else{
		if(this.Purpose != null)		stepString = stepString.concat(((RootInterface)this.Purpose).getStepParameter(IfcAddressTypeEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("UserDefinedPurpose")) stepString = stepString.concat("*,");
		else{
		if(this.UserDefinedPurpose != null)		stepString = stepString.concat(((RootInterface)this.UserDefinedPurpose).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TelephoneNumbers")) stepString = stepString.concat("*,");
		else{
		if(this.TelephoneNumbers != null)		stepString = stepString.concat(((RootInterface)this.TelephoneNumbers).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("FacsimileNumbers")) stepString = stepString.concat("*,");
		else{
		if(this.FacsimileNumbers != null)		stepString = stepString.concat(((RootInterface)this.FacsimileNumbers).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PagerNumber")) stepString = stepString.concat("*,");
		else{
		if(this.PagerNumber != null)		stepString = stepString.concat(((RootInterface)this.PagerNumber).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ElectronicMailAddresses")) stepString = stepString.concat("*,");
		else{
		if(this.ElectronicMailAddresses != null)		stepString = stepString.concat(((RootInterface)this.ElectronicMailAddresses).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("WWWHomePageURL")) stepString = stepString.concat("*,");
		else{
		if(this.WWWHomePageURL != null)		stepString = stepString.concat(((RootInterface)this.WWWHomePageURL).getStepParameter(IfcURIReference.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MessagingIDs")) stepString = stepString.concat("*);");
		else{
		if(this.MessagingIDs != null)		stepString = stepString.concat(((RootInterface)this.MessagingIDs).getStepParameter(IfcURIReference.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the TelephoneNumbers attribute to the given value.
	*
	* @param TelephoneNumbers DEMANDED value to set - may not be null
	**/
	public void setTelephoneNumbers(LIST<IfcLabel> TelephoneNumbers)
	{
		this.TelephoneNumbers = TelephoneNumbers;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the TelephoneNumbers attribute.
	*
	* @return a copy of the TelephoneNumbers list
	**/
	public LIST<IfcLabel> getTelephoneNumbers()
	{
		if(this.TelephoneNumbers != null)
			return new LIST<IfcLabel>(this.TelephoneNumbers);
		return null;
	}

	/**
	* This method adds an IfcLabel object to the TelephoneNumbers list.
	* @param TelephoneNumbers element to be appended to this list.
	**/
	public void addTelephoneNumbers(IfcLabel TelephoneNumbers)
	{
		if(this.TelephoneNumbers == null)
			this.TelephoneNumbers = new LIST<IfcLabel>();
		this.TelephoneNumbers.add(TelephoneNumbers);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcLabel objects to the TelephoneNumbers list.
	* @param TelephoneNumbers collection containing elements to be added to this list.
	**/
	public void addAllTelephoneNumbers(java.util.Collection<IfcLabel> TelephoneNumbers)
	{
		if(this.TelephoneNumbers == null)
			this.TelephoneNumbers = new LIST<IfcLabel>();
		this.TelephoneNumbers.addAll(TelephoneNumbers);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the TelephoneNumbers list.
	**/
	public void clearTelephoneNumbers()
	{
		if(this.TelephoneNumbers != null)
		{
			this.TelephoneNumbers.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcLabel object from the TelephoneNumbers list.
	* @param TelephoneNumbers element to be removed from this list.
	**/
	public void removeTelephoneNumbers(IfcLabel TelephoneNumbers)
	{
		if(this.TelephoneNumbers != null)
		{
			this.TelephoneNumbers.remove(TelephoneNumbers);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcLabel objects from the TelephoneNumbers list.
	* @param TelephoneNumbers collection containing elements to be removed from this list.
	**/
	public void removeAllTelephoneNumbers(java.util.Collection<IfcLabel> TelephoneNumbers)
	{
		if(this.TelephoneNumbers != null)
		{
			this.TelephoneNumbers.removeAll(TelephoneNumbers);
			fireChangeEvent();
		}
	}

	/**
	* This method sets the FacsimileNumbers attribute to the given value.
	*
	* @param FacsimileNumbers DEMANDED value to set - may not be null
	**/
	public void setFacsimileNumbers(LIST<IfcLabel> FacsimileNumbers)
	{
		this.FacsimileNumbers = FacsimileNumbers;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the FacsimileNumbers attribute.
	*
	* @return a copy of the FacsimileNumbers list
	**/
	public LIST<IfcLabel> getFacsimileNumbers()
	{
		if(this.FacsimileNumbers != null)
			return new LIST<IfcLabel>(this.FacsimileNumbers);
		return null;
	}

	/**
	* This method adds an IfcLabel object to the FacsimileNumbers list.
	* @param FacsimileNumbers element to be appended to this list.
	**/
	public void addFacsimileNumbers(IfcLabel FacsimileNumbers)
	{
		if(this.FacsimileNumbers == null)
			this.FacsimileNumbers = new LIST<IfcLabel>();
		this.FacsimileNumbers.add(FacsimileNumbers);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcLabel objects to the FacsimileNumbers list.
	* @param FacsimileNumbers collection containing elements to be added to this list.
	**/
	public void addAllFacsimileNumbers(java.util.Collection<IfcLabel> FacsimileNumbers)
	{
		if(this.FacsimileNumbers == null)
			this.FacsimileNumbers = new LIST<IfcLabel>();
		this.FacsimileNumbers.addAll(FacsimileNumbers);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the FacsimileNumbers list.
	**/
	public void clearFacsimileNumbers()
	{
		if(this.FacsimileNumbers != null)
		{
			this.FacsimileNumbers.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcLabel object from the FacsimileNumbers list.
	* @param FacsimileNumbers element to be removed from this list.
	**/
	public void removeFacsimileNumbers(IfcLabel FacsimileNumbers)
	{
		if(this.FacsimileNumbers != null)
		{
			this.FacsimileNumbers.remove(FacsimileNumbers);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcLabel objects from the FacsimileNumbers list.
	* @param FacsimileNumbers collection containing elements to be removed from this list.
	**/
	public void removeAllFacsimileNumbers(java.util.Collection<IfcLabel> FacsimileNumbers)
	{
		if(this.FacsimileNumbers != null)
		{
			this.FacsimileNumbers.removeAll(FacsimileNumbers);
			fireChangeEvent();
		}
	}

	/**
	* This method sets the PagerNumber attribute to the given value.
	*
	* @param PagerNumber DEMANDED value to set - may not be null
	**/
	public void setPagerNumber(IfcLabel PagerNumber)
	{
		this.PagerNumber = PagerNumber;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PagerNumber attribute.
	*
	* @return the value of PagerNumber
	/**/
	public IfcLabel getPagerNumber()
	{
		return this.PagerNumber;
	}

	/**
	* This method sets the ElectronicMailAddresses attribute to the given value.
	*
	* @param ElectronicMailAddresses DEMANDED value to set - may not be null
	**/
	public void setElectronicMailAddresses(LIST<IfcLabel> ElectronicMailAddresses)
	{
		this.ElectronicMailAddresses = ElectronicMailAddresses;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the ElectronicMailAddresses attribute.
	*
	* @return a copy of the ElectronicMailAddresses list
	**/
	public LIST<IfcLabel> getElectronicMailAddresses()
	{
		if(this.ElectronicMailAddresses != null)
			return new LIST<IfcLabel>(this.ElectronicMailAddresses);
		return null;
	}

	/**
	* This method adds an IfcLabel object to the ElectronicMailAddresses list.
	* @param ElectronicMailAddresses element to be appended to this list.
	**/
	public void addElectronicMailAddresses(IfcLabel ElectronicMailAddresses)
	{
		if(this.ElectronicMailAddresses == null)
			this.ElectronicMailAddresses = new LIST<IfcLabel>();
		this.ElectronicMailAddresses.add(ElectronicMailAddresses);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcLabel objects to the ElectronicMailAddresses list.
	* @param ElectronicMailAddresses collection containing elements to be added to this list.
	**/
	public void addAllElectronicMailAddresses(java.util.Collection<IfcLabel> ElectronicMailAddresses)
	{
		if(this.ElectronicMailAddresses == null)
			this.ElectronicMailAddresses = new LIST<IfcLabel>();
		this.ElectronicMailAddresses.addAll(ElectronicMailAddresses);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the ElectronicMailAddresses list.
	**/
	public void clearElectronicMailAddresses()
	{
		if(this.ElectronicMailAddresses != null)
		{
			this.ElectronicMailAddresses.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcLabel object from the ElectronicMailAddresses list.
	* @param ElectronicMailAddresses element to be removed from this list.
	**/
	public void removeElectronicMailAddresses(IfcLabel ElectronicMailAddresses)
	{
		if(this.ElectronicMailAddresses != null)
		{
			this.ElectronicMailAddresses.remove(ElectronicMailAddresses);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcLabel objects from the ElectronicMailAddresses list.
	* @param ElectronicMailAddresses collection containing elements to be removed from this list.
	**/
	public void removeAllElectronicMailAddresses(java.util.Collection<IfcLabel> ElectronicMailAddresses)
	{
		if(this.ElectronicMailAddresses != null)
		{
			this.ElectronicMailAddresses.removeAll(ElectronicMailAddresses);
			fireChangeEvent();
		}
	}

	/**
	* This method sets the WWWHomePageURL attribute to the given value.
	*
	* @param WWWHomePageURL DEMANDED value to set - may not be null
	**/
	public void setWWWHomePageURL(IfcURIReference WWWHomePageURL)
	{
		this.WWWHomePageURL = WWWHomePageURL;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the WWWHomePageURL attribute.
	*
	* @return the value of WWWHomePageURL
	/**/
	public IfcURIReference getWWWHomePageURL()
	{
		return this.WWWHomePageURL;
	}

	/**
	* This method sets the MessagingIDs attribute to the given value.
	*
	* @param MessagingIDs DEMANDED value to set - may not be null
	**/
	public void setMessagingIDs(LIST<IfcURIReference> MessagingIDs)
	{
		this.MessagingIDs = MessagingIDs;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the MessagingIDs attribute.
	*
	* @return a copy of the MessagingIDs list
	**/
	public LIST<IfcURIReference> getMessagingIDs()
	{
		if(this.MessagingIDs != null)
			return new LIST<IfcURIReference>(this.MessagingIDs);
		return null;
	}

	/**
	* This method adds an IfcURIReference object to the MessagingIDs list.
	* @param MessagingIDs element to be appended to this list.
	**/
	public void addMessagingIDs(IfcURIReference MessagingIDs)
	{
		if(this.MessagingIDs == null)
			this.MessagingIDs = new LIST<IfcURIReference>();
		this.MessagingIDs.add(MessagingIDs);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcURIReference objects to the MessagingIDs list.
	* @param MessagingIDs collection containing elements to be added to this list.
	**/
	public void addAllMessagingIDs(java.util.Collection<IfcURIReference> MessagingIDs)
	{
		if(this.MessagingIDs == null)
			this.MessagingIDs = new LIST<IfcURIReference>();
		this.MessagingIDs.addAll(MessagingIDs);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the MessagingIDs list.
	**/
	public void clearMessagingIDs()
	{
		if(this.MessagingIDs != null)
		{
			this.MessagingIDs.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcURIReference object from the MessagingIDs list.
	* @param MessagingIDs element to be removed from this list.
	**/
	public void removeMessagingIDs(IfcURIReference MessagingIDs)
	{
		if(this.MessagingIDs != null)
		{
			this.MessagingIDs.remove(MessagingIDs);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcURIReference objects from the MessagingIDs list.
	* @param MessagingIDs collection containing elements to be removed from this list.
	**/
	public void removeAllMessagingIDs(java.util.Collection<IfcURIReference> MessagingIDs)
	{
		if(this.MessagingIDs != null)
		{
			this.MessagingIDs.removeAll(MessagingIDs);
			fireChangeEvent();
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcTelecomAddress ifcTelecomAddress = new IfcTelecomAddress();
		if(this.Purpose != null)
			ifcTelecomAddress.setPurpose((IfcAddressTypeEnum)this.Purpose.clone());
		if(this.Description != null)
			ifcTelecomAddress.setDescription((IfcText)this.Description.clone());
		if(this.UserDefinedPurpose != null)
			ifcTelecomAddress.setUserDefinedPurpose((IfcLabel)this.UserDefinedPurpose.clone());
		if(this.TelephoneNumbers != null)
			ifcTelecomAddress.setTelephoneNumbers((LIST<IfcLabel>)this.TelephoneNumbers.clone());
		if(this.FacsimileNumbers != null)
			ifcTelecomAddress.setFacsimileNumbers((LIST<IfcLabel>)this.FacsimileNumbers.clone());
		if(this.PagerNumber != null)
			ifcTelecomAddress.setPagerNumber((IfcLabel)this.PagerNumber.clone());
		if(this.ElectronicMailAddresses != null)
			ifcTelecomAddress.setElectronicMailAddresses((LIST<IfcLabel>)this.ElectronicMailAddresses.clone());
		if(this.WWWHomePageURL != null)
			ifcTelecomAddress.setWWWHomePageURL((IfcURIReference)this.WWWHomePageURL.clone());
		if(this.MessagingIDs != null)
			ifcTelecomAddress.setMessagingIDs((LIST<IfcURIReference>)this.MessagingIDs.clone());
		return ifcTelecomAddress;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcTelecomAddress ifcTelecomAddress = new IfcTelecomAddress();
		if(this.Purpose != null)
			ifcTelecomAddress.setPurpose(this.Purpose);
		if(this.Description != null)
			ifcTelecomAddress.setDescription(this.Description);
		if(this.UserDefinedPurpose != null)
			ifcTelecomAddress.setUserDefinedPurpose(this.UserDefinedPurpose);
		if(this.TelephoneNumbers != null)
			ifcTelecomAddress.setTelephoneNumbers(this.TelephoneNumbers);
		if(this.FacsimileNumbers != null)
			ifcTelecomAddress.setFacsimileNumbers(this.FacsimileNumbers);
		if(this.PagerNumber != null)
			ifcTelecomAddress.setPagerNumber(this.PagerNumber);
		if(this.ElectronicMailAddresses != null)
			ifcTelecomAddress.setElectronicMailAddresses(this.ElectronicMailAddresses);
		if(this.WWWHomePageURL != null)
			ifcTelecomAddress.setWWWHomePageURL(this.WWWHomePageURL);
		if(this.MessagingIDs != null)
			ifcTelecomAddress.setMessagingIDs(this.MessagingIDs);
		return ifcTelecomAddress;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcComplexPropertyTemplate<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcComplexPropertyTemplate extends IfcPropertyTemplate implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcGloballyUniqueId","IfcOwnerHistory","IfcLabel","IfcText","IfcLabel","IfcComplexPropertyTemplateTypeEnum","SET<IfcPropertyTemplate>"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** UsageName is an OPTIONAL attribute**/
	protected IfcLabel UsageName;
	/** TemplateType is an OPTIONAL attribute**/
	protected IfcComplexPropertyTemplateTypeEnum TemplateType;
	/** HasPropertyTemplates is an OPTIONAL attribute**/
	protected SET<IfcPropertyTemplate> HasPropertyTemplates;
	/**
	* The default constructor.
	**/
	public IfcComplexPropertyTemplate(){}

	/**
	* Constructs a new IfcComplexPropertyTemplate object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory OPTIONAL parameter of type IfcOwnerHistory
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param UsageName OPTIONAL parameter of type IfcLabel
	* @param TemplateType OPTIONAL parameter of type IfcComplexPropertyTemplateTypeEnum
	* @param HasPropertyTemplates OPTIONAL parameter of type SET<IfcPropertyTemplate>
	**/
	public IfcComplexPropertyTemplate(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel UsageName, IfcComplexPropertyTemplateTypeEnum TemplateType, SET<IfcPropertyTemplate> HasPropertyTemplates)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.UsageName = UsageName;
		this.TemplateType = TemplateType;
		this.HasPropertyTemplates = HasPropertyTemplates;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcComplexPropertyTemplate object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory OPTIONAL parameter of type IfcOwnerHistory
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param UsageName OPTIONAL parameter of type IfcLabel
	* @param TemplateType OPTIONAL parameter of type IfcComplexPropertyTemplateTypeEnum
	* @param HasPropertyTemplates OPTIONAL parameter of type SET<IfcPropertyTemplate>
	**/
	public void setParameters(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcLabel UsageName, IfcComplexPropertyTemplateTypeEnum TemplateType, SET<IfcPropertyTemplate> HasPropertyTemplates)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.UsageName = UsageName;
		this.TemplateType = TemplateType;
		this.HasPropertyTemplates = HasPropertyTemplates;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.GlobalId = (IfcGloballyUniqueId) parameters.get(0);
		this.OwnerHistory = (IfcOwnerHistory) parameters.get(1);
		this.Name = (IfcLabel) parameters.get(2);
		this.Description = (IfcText) parameters.get(3);
		this.UsageName = (IfcLabel) parameters.get(4);
		this.TemplateType = (IfcComplexPropertyTemplateTypeEnum) parameters.get(5);
		this.HasPropertyTemplates = (SET<IfcPropertyTemplate>) parameters.get(6);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
		if(HasPropertyTemplates != null)
		{
			for(IfcPropertyTemplate HasPropertyTemplates$ : HasPropertyTemplates)
			{
				if(HasPropertyTemplates$.PartOfComplexTemplate_Inverse == null)
				{
					HasPropertyTemplates$.PartOfComplexTemplate_Inverse = new SET<IfcComplexPropertyTemplate>();
				}
				HasPropertyTemplates$.PartOfComplexTemplate_Inverse.add(this);
			}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcComplexPropertyTemplate.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCCOMPLEXPROPERTYTEMPLATE(");
		if(getRedefinedDerivedAttributeTypes().contains("GlobalId")) stepString = stepString.concat("*,");
		else{
		if(this.GlobalId != null)		stepString = stepString.concat(((RootInterface)this.GlobalId).getStepParameter(IfcGloballyUniqueId.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OwnerHistory")) stepString = stepString.concat("*,");
		else{
		if(this.OwnerHistory != null)		stepString = stepString.concat(((RootInterface)this.OwnerHistory).getStepParameter(IfcOwnerHistory.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("UsageName")) stepString = stepString.concat("*,");
		else{
		if(this.UsageName != null)		stepString = stepString.concat(((RootInterface)this.UsageName).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TemplateType")) stepString = stepString.concat("*,");
		else{
		if(this.TemplateType != null)		stepString = stepString.concat(((RootInterface)this.TemplateType).getStepParameter(IfcComplexPropertyTemplateTypeEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("HasPropertyTemplates")) stepString = stepString.concat("*);");
		else{
		if(this.HasPropertyTemplates != null)		stepString = stepString.concat(((RootInterface)this.HasPropertyTemplates).getStepParameter(IfcPropertyTemplate.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the UsageName attribute to the given value.
	*
	* @param UsageName DEMANDED value to set - may not be null
	**/
	public void setUsageName(IfcLabel UsageName)
	{
		this.UsageName = UsageName;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the UsageName attribute.
	*
	* @return the value of UsageName
	/**/
	public IfcLabel getUsageName()
	{
		return this.UsageName;
	}

	/**
	* This method sets the TemplateType attribute to the given value.
	*
	* @param TemplateType DEMANDED value to set - may not be null
	**/
	public void setTemplateType(IfcComplexPropertyTemplateTypeEnum TemplateType)
	{
		this.TemplateType = TemplateType;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TemplateType attribute.
	*
	* @return the value of TemplateType
	/**/
	public IfcComplexPropertyTemplateTypeEnum getTemplateType()
	{
		return this.TemplateType;
	}

	/**
	* This method sets the HasPropertyTemplates attribute to the given value.
	*
	* @param HasPropertyTemplates DEMANDED value to set - may not be null
	**/
	public void setHasPropertyTemplates(SET<IfcPropertyTemplate> HasPropertyTemplates)
	{
		synchronizeInversesRemoveHasPropertyTemplates(this.HasPropertyTemplates);
		this.HasPropertyTemplates = HasPropertyTemplates;
		synchronizeInversesAddHasPropertyTemplates(this.HasPropertyTemplates);
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the set of the HasPropertyTemplates attribute.
	*
	* @return a copy of the HasPropertyTemplates set
	**/
	public SET<IfcPropertyTemplate> getHasPropertyTemplates()
	{
		if(this.HasPropertyTemplates != null)
			return new SET<IfcPropertyTemplate>(this.HasPropertyTemplates);
		return null;
	}

	/**
	* This method adds an IfcPropertyTemplate object to the HasPropertyTemplates set.
	* @param HasPropertyTemplates element to be appended to this set.
	**/
	public void addHasPropertyTemplates(IfcPropertyTemplate HasPropertyTemplates)
	{
		if(this.HasPropertyTemplates == null)
			this.HasPropertyTemplates = new SET<IfcPropertyTemplate>();
		this.HasPropertyTemplates.add(HasPropertyTemplates);
		synchronizeInversesAddHasPropertyTemplates(HasPropertyTemplates);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcPropertyTemplate objects to the HasPropertyTemplates set.
	* @param HasPropertyTemplates collection containing elements to be added to this set.
	**/
	public void addAllHasPropertyTemplates(java.util.Collection<IfcPropertyTemplate> HasPropertyTemplates)
	{
		if(this.HasPropertyTemplates == null)
			this.HasPropertyTemplates = new SET<IfcPropertyTemplate>();
		this.HasPropertyTemplates.addAll(HasPropertyTemplates);
		synchronizeInversesAddHasPropertyTemplates(HasPropertyTemplates);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the HasPropertyTemplates set.
	**/
	public void clearHasPropertyTemplates()
	{
		if(this.HasPropertyTemplates != null)
		{
			synchronizeInversesRemoveHasPropertyTemplates(this.HasPropertyTemplates);
			this.HasPropertyTemplates.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcPropertyTemplate object from the HasPropertyTemplates set.
	* @param HasPropertyTemplates element to be removed from this set.
	**/
	public void removeHasPropertyTemplates(IfcPropertyTemplate HasPropertyTemplates)
	{
		if(this.HasPropertyTemplates != null)
		{
			this.HasPropertyTemplates.remove(HasPropertyTemplates);
			synchronizeInversesRemoveHasPropertyTemplates(HasPropertyTemplates);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcPropertyTemplate objects from the HasPropertyTemplates set.
	* @param HasPropertyTemplates collection containing elements to be removed from this set.
	**/
	public void removeAllHasPropertyTemplates(java.util.Collection<IfcPropertyTemplate> HasPropertyTemplates)
	{
		if(this.HasPropertyTemplates != null)
		{
			this.HasPropertyTemplates.removeAll(HasPropertyTemplates);
			synchronizeInversesRemoveHasPropertyTemplates(HasPropertyTemplates);
			fireChangeEvent();
		}
	}

	private void synchronizeInversesAddHasPropertyTemplates(IfcPropertyTemplate HasPropertyTemplates)
	{
		if(HasPropertyTemplates != null)
		{
				if(HasPropertyTemplates.PartOfComplexTemplate_Inverse == null)
				{
					HasPropertyTemplates.PartOfComplexTemplate_Inverse = new SET<IfcComplexPropertyTemplate>();
				}
				HasPropertyTemplates.PartOfComplexTemplate_Inverse.add(this);
		}
	}

	private void synchronizeInversesAddHasPropertyTemplates(java.util.Collection<IfcPropertyTemplate> HasPropertyTemplates)
	{
		if(HasPropertyTemplates != null)
		{
			for(IfcPropertyTemplate HasPropertyTemplates$ : HasPropertyTemplates)
			{
				synchronizeInversesAddHasPropertyTemplates(HasPropertyTemplates$);
			}
		}
	}

	private void synchronizeInversesRemoveHasPropertyTemplates(IfcPropertyTemplate HasPropertyTemplates)
	{
		if(HasPropertyTemplates != null)
		{
				if(HasPropertyTemplates.PartOfComplexTemplate_Inverse != null)
				{
					HasPropertyTemplates.PartOfComplexTemplate_Inverse.remove(this);
				}
		}
	}

	private void synchronizeInversesRemoveHasPropertyTemplates(java.util.Collection<IfcPropertyTemplate> HasPropertyTemplates)
	{
		if(HasPropertyTemplates != null)
		{
			for(IfcPropertyTemplate HasPropertyTemplates$ : HasPropertyTemplates)
			{
				synchronizeInversesRemoveHasPropertyTemplates(HasPropertyTemplates$);
			}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcComplexPropertyTemplate ifcComplexPropertyTemplate = new IfcComplexPropertyTemplate();
		if(this.GlobalId != null)
			ifcComplexPropertyTemplate.setGlobalId((IfcGloballyUniqueId)this.GlobalId.clone());
		if(this.OwnerHistory != null)
			ifcComplexPropertyTemplate.setOwnerHistory((IfcOwnerHistory)this.OwnerHistory.clone());
		if(this.Name != null)
			ifcComplexPropertyTemplate.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcComplexPropertyTemplate.setDescription((IfcText)this.Description.clone());
		if(this.UsageName != null)
			ifcComplexPropertyTemplate.setUsageName((IfcLabel)this.UsageName.clone());
		if(this.TemplateType != null)
			ifcComplexPropertyTemplate.setTemplateType((IfcComplexPropertyTemplateTypeEnum)this.TemplateType.clone());
		if(this.HasPropertyTemplates != null)
			ifcComplexPropertyTemplate.setHasPropertyTemplates((SET<IfcPropertyTemplate>)this.HasPropertyTemplates.clone());
		return ifcComplexPropertyTemplate;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcComplexPropertyTemplate ifcComplexPropertyTemplate = new IfcComplexPropertyTemplate();
		if(this.GlobalId != null)
			ifcComplexPropertyTemplate.setGlobalId(this.GlobalId);
		if(this.OwnerHistory != null)
			ifcComplexPropertyTemplate.setOwnerHistory(this.OwnerHistory);
		if(this.Name != null)
			ifcComplexPropertyTemplate.setName(this.Name);
		if(this.Description != null)
			ifcComplexPropertyTemplate.setDescription(this.Description);
		if(this.UsageName != null)
			ifcComplexPropertyTemplate.setUsageName(this.UsageName);
		if(this.TemplateType != null)
			ifcComplexPropertyTemplate.setTemplateType(this.TemplateType);
		if(this.HasPropertyTemplates != null)
			ifcComplexPropertyTemplate.setHasPropertyTemplates(this.HasPropertyTemplates);
		return ifcComplexPropertyTemplate;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

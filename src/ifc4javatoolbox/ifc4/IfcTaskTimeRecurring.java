/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcTaskTimeRecurring<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcTaskTimeRecurring extends IfcTaskTime implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcDataOriginEnum","IfcLabel","IfcTaskDurationEnum","IfcDuration","IfcDateTime","IfcDateTime","IfcDateTime","IfcDateTime","IfcDateTime","IfcDateTime","IfcDuration","IfcDuration","BOOLEAN","IfcDateTime","IfcDuration","IfcDateTime","IfcDateTime","IfcDuration","IfcPositiveRatioMeasure","IfcRecurrencePattern"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** Recurrance is an DEMANDED attribute - may not be null**/
	protected IfcRecurrencePattern Recurrance;
	/**
	* The default constructor.
	**/
	public IfcTaskTimeRecurring(){}

	/**
	* Constructs a new IfcTaskTimeRecurring object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param DataOrigin OPTIONAL parameter of type IfcDataOriginEnum
	* @param UserDefinedDataOrigin OPTIONAL parameter of type IfcLabel
	* @param DurationType OPTIONAL parameter of type IfcTaskDurationEnum
	* @param ScheduleDuration OPTIONAL parameter of type IfcDuration
	* @param ScheduleStart OPTIONAL parameter of type IfcDateTime
	* @param ScheduleFinish OPTIONAL parameter of type IfcDateTime
	* @param EarlyStart OPTIONAL parameter of type IfcDateTime
	* @param EarlyFinish OPTIONAL parameter of type IfcDateTime
	* @param LateStart OPTIONAL parameter of type IfcDateTime
	* @param LateFinish OPTIONAL parameter of type IfcDateTime
	* @param FreeFloat OPTIONAL parameter of type IfcDuration
	* @param TotalFloat OPTIONAL parameter of type IfcDuration
	* @param IsCritical OPTIONAL parameter of type BOOLEAN
	* @param StatusTime OPTIONAL parameter of type IfcDateTime
	* @param ActualDuration OPTIONAL parameter of type IfcDuration
	* @param ActualStart OPTIONAL parameter of type IfcDateTime
	* @param ActualFinish OPTIONAL parameter of type IfcDateTime
	* @param RemainingTime OPTIONAL parameter of type IfcDuration
	* @param Completion OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param Recurrance DEMANDED parameter of type IfcRecurrencePattern - may not be null.
	**/
	public IfcTaskTimeRecurring(IfcLabel Name, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin, IfcTaskDurationEnum DurationType, IfcDuration ScheduleDuration, IfcDateTime ScheduleStart, IfcDateTime ScheduleFinish, IfcDateTime EarlyStart, IfcDateTime EarlyFinish, IfcDateTime LateStart, IfcDateTime LateFinish, IfcDuration FreeFloat, IfcDuration TotalFloat, BOOLEAN IsCritical, IfcDateTime StatusTime, IfcDuration ActualDuration, IfcDateTime ActualStart, IfcDateTime ActualFinish, IfcDuration RemainingTime, IfcPositiveRatioMeasure Completion, IfcRecurrencePattern Recurrance)
	{
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.DurationType = DurationType;
		this.ScheduleDuration = ScheduleDuration;
		this.ScheduleStart = ScheduleStart;
		this.ScheduleFinish = ScheduleFinish;
		this.EarlyStart = EarlyStart;
		this.EarlyFinish = EarlyFinish;
		this.LateStart = LateStart;
		this.LateFinish = LateFinish;
		this.FreeFloat = FreeFloat;
		this.TotalFloat = TotalFloat;
		this.IsCritical = IsCritical;
		this.StatusTime = StatusTime;
		this.ActualDuration = ActualDuration;
		this.ActualStart = ActualStart;
		this.ActualFinish = ActualFinish;
		this.RemainingTime = RemainingTime;
		this.Completion = Completion;
		this.Recurrance = Recurrance;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcTaskTimeRecurring object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param DataOrigin OPTIONAL parameter of type IfcDataOriginEnum
	* @param UserDefinedDataOrigin OPTIONAL parameter of type IfcLabel
	* @param DurationType OPTIONAL parameter of type IfcTaskDurationEnum
	* @param ScheduleDuration OPTIONAL parameter of type IfcDuration
	* @param ScheduleStart OPTIONAL parameter of type IfcDateTime
	* @param ScheduleFinish OPTIONAL parameter of type IfcDateTime
	* @param EarlyStart OPTIONAL parameter of type IfcDateTime
	* @param EarlyFinish OPTIONAL parameter of type IfcDateTime
	* @param LateStart OPTIONAL parameter of type IfcDateTime
	* @param LateFinish OPTIONAL parameter of type IfcDateTime
	* @param FreeFloat OPTIONAL parameter of type IfcDuration
	* @param TotalFloat OPTIONAL parameter of type IfcDuration
	* @param IsCritical OPTIONAL parameter of type BOOLEAN
	* @param StatusTime OPTIONAL parameter of type IfcDateTime
	* @param ActualDuration OPTIONAL parameter of type IfcDuration
	* @param ActualStart OPTIONAL parameter of type IfcDateTime
	* @param ActualFinish OPTIONAL parameter of type IfcDateTime
	* @param RemainingTime OPTIONAL parameter of type IfcDuration
	* @param Completion OPTIONAL parameter of type IfcPositiveRatioMeasure
	* @param Recurrance DEMANDED parameter of type IfcRecurrencePattern - may not be null.
	**/
	public void setParameters(IfcLabel Name, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin, IfcTaskDurationEnum DurationType, IfcDuration ScheduleDuration, IfcDateTime ScheduleStart, IfcDateTime ScheduleFinish, IfcDateTime EarlyStart, IfcDateTime EarlyFinish, IfcDateTime LateStart, IfcDateTime LateFinish, IfcDuration FreeFloat, IfcDuration TotalFloat, BOOLEAN IsCritical, IfcDateTime StatusTime, IfcDuration ActualDuration, IfcDateTime ActualStart, IfcDateTime ActualFinish, IfcDuration RemainingTime, IfcPositiveRatioMeasure Completion, IfcRecurrencePattern Recurrance)
	{
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.DurationType = DurationType;
		this.ScheduleDuration = ScheduleDuration;
		this.ScheduleStart = ScheduleStart;
		this.ScheduleFinish = ScheduleFinish;
		this.EarlyStart = EarlyStart;
		this.EarlyFinish = EarlyFinish;
		this.LateStart = LateStart;
		this.LateFinish = LateFinish;
		this.FreeFloat = FreeFloat;
		this.TotalFloat = TotalFloat;
		this.IsCritical = IsCritical;
		this.StatusTime = StatusTime;
		this.ActualDuration = ActualDuration;
		this.ActualStart = ActualStart;
		this.ActualFinish = ActualFinish;
		this.RemainingTime = RemainingTime;
		this.Completion = Completion;
		this.Recurrance = Recurrance;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.DataOrigin = (IfcDataOriginEnum) parameters.get(1);
		this.UserDefinedDataOrigin = (IfcLabel) parameters.get(2);
		this.DurationType = (IfcTaskDurationEnum) parameters.get(3);
		this.ScheduleDuration = (IfcDuration) parameters.get(4);
		this.ScheduleStart = (IfcDateTime) parameters.get(5);
		this.ScheduleFinish = (IfcDateTime) parameters.get(6);
		this.EarlyStart = (IfcDateTime) parameters.get(7);
		this.EarlyFinish = (IfcDateTime) parameters.get(8);
		this.LateStart = (IfcDateTime) parameters.get(9);
		this.LateFinish = (IfcDateTime) parameters.get(10);
		this.FreeFloat = (IfcDuration) parameters.get(11);
		this.TotalFloat = (IfcDuration) parameters.get(12);
		this.IsCritical = (BOOLEAN) parameters.get(13);
		this.StatusTime = (IfcDateTime) parameters.get(14);
		this.ActualDuration = (IfcDuration) parameters.get(15);
		this.ActualStart = (IfcDateTime) parameters.get(16);
		this.ActualFinish = (IfcDateTime) parameters.get(17);
		this.RemainingTime = (IfcDuration) parameters.get(18);
		this.Completion = (IfcPositiveRatioMeasure) parameters.get(19);
		this.Recurrance = (IfcRecurrencePattern) parameters.get(20);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcTaskTimeRecurring.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCTASKTIMERECURRING(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("DataOrigin")) stepString = stepString.concat("*,");
		else{
		if(this.DataOrigin != null)		stepString = stepString.concat(((RootInterface)this.DataOrigin).getStepParameter(IfcDataOriginEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("UserDefinedDataOrigin")) stepString = stepString.concat("*,");
		else{
		if(this.UserDefinedDataOrigin != null)		stepString = stepString.concat(((RootInterface)this.UserDefinedDataOrigin).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("DurationType")) stepString = stepString.concat("*,");
		else{
		if(this.DurationType != null)		stepString = stepString.concat(((RootInterface)this.DurationType).getStepParameter(IfcTaskDurationEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ScheduleDuration")) stepString = stepString.concat("*,");
		else{
		if(this.ScheduleDuration != null)		stepString = stepString.concat(((RootInterface)this.ScheduleDuration).getStepParameter(IfcDuration.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ScheduleStart")) stepString = stepString.concat("*,");
		else{
		if(this.ScheduleStart != null)		stepString = stepString.concat(((RootInterface)this.ScheduleStart).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ScheduleFinish")) stepString = stepString.concat("*,");
		else{
		if(this.ScheduleFinish != null)		stepString = stepString.concat(((RootInterface)this.ScheduleFinish).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("EarlyStart")) stepString = stepString.concat("*,");
		else{
		if(this.EarlyStart != null)		stepString = stepString.concat(((RootInterface)this.EarlyStart).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("EarlyFinish")) stepString = stepString.concat("*,");
		else{
		if(this.EarlyFinish != null)		stepString = stepString.concat(((RootInterface)this.EarlyFinish).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LateStart")) stepString = stepString.concat("*,");
		else{
		if(this.LateStart != null)		stepString = stepString.concat(((RootInterface)this.LateStart).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LateFinish")) stepString = stepString.concat("*,");
		else{
		if(this.LateFinish != null)		stepString = stepString.concat(((RootInterface)this.LateFinish).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("FreeFloat")) stepString = stepString.concat("*,");
		else{
		if(this.FreeFloat != null)		stepString = stepString.concat(((RootInterface)this.FreeFloat).getStepParameter(IfcDuration.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TotalFloat")) stepString = stepString.concat("*,");
		else{
		if(this.TotalFloat != null)		stepString = stepString.concat(((RootInterface)this.TotalFloat).getStepParameter(IfcDuration.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("IsCritical")) stepString = stepString.concat("*,");
		else{
		if(this.IsCritical != null)		stepString = stepString.concat(((RootInterface)this.IsCritical).getStepParameter(BOOLEAN.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("StatusTime")) stepString = stepString.concat("*,");
		else{
		if(this.StatusTime != null)		stepString = stepString.concat(((RootInterface)this.StatusTime).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ActualDuration")) stepString = stepString.concat("*,");
		else{
		if(this.ActualDuration != null)		stepString = stepString.concat(((RootInterface)this.ActualDuration).getStepParameter(IfcDuration.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ActualStart")) stepString = stepString.concat("*,");
		else{
		if(this.ActualStart != null)		stepString = stepString.concat(((RootInterface)this.ActualStart).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ActualFinish")) stepString = stepString.concat("*,");
		else{
		if(this.ActualFinish != null)		stepString = stepString.concat(((RootInterface)this.ActualFinish).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RemainingTime")) stepString = stepString.concat("*,");
		else{
		if(this.RemainingTime != null)		stepString = stepString.concat(((RootInterface)this.RemainingTime).getStepParameter(IfcDuration.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Completion")) stepString = stepString.concat("*,");
		else{
		if(this.Completion != null)		stepString = stepString.concat(((RootInterface)this.Completion).getStepParameter(IfcPositiveRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Recurrance")) stepString = stepString.concat("*);");
		else{
		if(this.Recurrance != null)		stepString = stepString.concat(((RootInterface)this.Recurrance).getStepParameter(IfcRecurrencePattern.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the Recurrance attribute to the given value.
	*
	* @param Recurrance OPTIONAL value to set
	**/
	public void setRecurrance(IfcRecurrencePattern Recurrance)
	{
		this.Recurrance = Recurrance;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Recurrance attribute.
	*
	* @return the value of Recurrance
	/**/
	public IfcRecurrencePattern getRecurrance()
	{
		return this.Recurrance;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcTaskTimeRecurring ifcTaskTimeRecurring = new IfcTaskTimeRecurring();
		if(this.Name != null)
			ifcTaskTimeRecurring.setName((IfcLabel)this.Name.clone());
		if(this.DataOrigin != null)
			ifcTaskTimeRecurring.setDataOrigin((IfcDataOriginEnum)this.DataOrigin.clone());
		if(this.UserDefinedDataOrigin != null)
			ifcTaskTimeRecurring.setUserDefinedDataOrigin((IfcLabel)this.UserDefinedDataOrigin.clone());
		if(this.DurationType != null)
			ifcTaskTimeRecurring.setDurationType((IfcTaskDurationEnum)this.DurationType.clone());
		if(this.ScheduleDuration != null)
			ifcTaskTimeRecurring.setScheduleDuration((IfcDuration)this.ScheduleDuration.clone());
		if(this.ScheduleStart != null)
			ifcTaskTimeRecurring.setScheduleStart((IfcDateTime)this.ScheduleStart.clone());
		if(this.ScheduleFinish != null)
			ifcTaskTimeRecurring.setScheduleFinish((IfcDateTime)this.ScheduleFinish.clone());
		if(this.EarlyStart != null)
			ifcTaskTimeRecurring.setEarlyStart((IfcDateTime)this.EarlyStart.clone());
		if(this.EarlyFinish != null)
			ifcTaskTimeRecurring.setEarlyFinish((IfcDateTime)this.EarlyFinish.clone());
		if(this.LateStart != null)
			ifcTaskTimeRecurring.setLateStart((IfcDateTime)this.LateStart.clone());
		if(this.LateFinish != null)
			ifcTaskTimeRecurring.setLateFinish((IfcDateTime)this.LateFinish.clone());
		if(this.FreeFloat != null)
			ifcTaskTimeRecurring.setFreeFloat((IfcDuration)this.FreeFloat.clone());
		if(this.TotalFloat != null)
			ifcTaskTimeRecurring.setTotalFloat((IfcDuration)this.TotalFloat.clone());
		if(this.IsCritical != null)
			ifcTaskTimeRecurring.setIsCritical((BOOLEAN)this.IsCritical.clone());
		if(this.StatusTime != null)
			ifcTaskTimeRecurring.setStatusTime((IfcDateTime)this.StatusTime.clone());
		if(this.ActualDuration != null)
			ifcTaskTimeRecurring.setActualDuration((IfcDuration)this.ActualDuration.clone());
		if(this.ActualStart != null)
			ifcTaskTimeRecurring.setActualStart((IfcDateTime)this.ActualStart.clone());
		if(this.ActualFinish != null)
			ifcTaskTimeRecurring.setActualFinish((IfcDateTime)this.ActualFinish.clone());
		if(this.RemainingTime != null)
			ifcTaskTimeRecurring.setRemainingTime((IfcDuration)this.RemainingTime.clone());
		if(this.Completion != null)
			ifcTaskTimeRecurring.setCompletion((IfcPositiveRatioMeasure)this.Completion.clone());
		if(this.Recurrance != null)
			ifcTaskTimeRecurring.setRecurrance((IfcRecurrencePattern)this.Recurrance.clone());
		return ifcTaskTimeRecurring;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcTaskTimeRecurring ifcTaskTimeRecurring = new IfcTaskTimeRecurring();
		if(this.Name != null)
			ifcTaskTimeRecurring.setName(this.Name);
		if(this.DataOrigin != null)
			ifcTaskTimeRecurring.setDataOrigin(this.DataOrigin);
		if(this.UserDefinedDataOrigin != null)
			ifcTaskTimeRecurring.setUserDefinedDataOrigin(this.UserDefinedDataOrigin);
		if(this.DurationType != null)
			ifcTaskTimeRecurring.setDurationType(this.DurationType);
		if(this.ScheduleDuration != null)
			ifcTaskTimeRecurring.setScheduleDuration(this.ScheduleDuration);
		if(this.ScheduleStart != null)
			ifcTaskTimeRecurring.setScheduleStart(this.ScheduleStart);
		if(this.ScheduleFinish != null)
			ifcTaskTimeRecurring.setScheduleFinish(this.ScheduleFinish);
		if(this.EarlyStart != null)
			ifcTaskTimeRecurring.setEarlyStart(this.EarlyStart);
		if(this.EarlyFinish != null)
			ifcTaskTimeRecurring.setEarlyFinish(this.EarlyFinish);
		if(this.LateStart != null)
			ifcTaskTimeRecurring.setLateStart(this.LateStart);
		if(this.LateFinish != null)
			ifcTaskTimeRecurring.setLateFinish(this.LateFinish);
		if(this.FreeFloat != null)
			ifcTaskTimeRecurring.setFreeFloat(this.FreeFloat);
		if(this.TotalFloat != null)
			ifcTaskTimeRecurring.setTotalFloat(this.TotalFloat);
		if(this.IsCritical != null)
			ifcTaskTimeRecurring.setIsCritical(this.IsCritical);
		if(this.StatusTime != null)
			ifcTaskTimeRecurring.setStatusTime(this.StatusTime);
		if(this.ActualDuration != null)
			ifcTaskTimeRecurring.setActualDuration(this.ActualDuration);
		if(this.ActualStart != null)
			ifcTaskTimeRecurring.setActualStart(this.ActualStart);
		if(this.ActualFinish != null)
			ifcTaskTimeRecurring.setActualFinish(this.ActualFinish);
		if(this.RemainingTime != null)
			ifcTaskTimeRecurring.setRemainingTime(this.RemainingTime);
		if(this.Completion != null)
			ifcTaskTimeRecurring.setCompletion(this.Completion);
		if(this.Recurrance != null)
			ifcTaskTimeRecurring.setRecurrance(this.Recurrance);
		return ifcTaskTimeRecurring;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

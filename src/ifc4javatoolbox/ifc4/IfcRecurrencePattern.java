/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcRecurrencePattern<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcRecurrencePattern extends InternalAccessClass implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcRecurrenceTypeEnum","SET<IfcDayInMonthNumber>","SET<IfcDayInWeekNumber>","SET<IfcMonthInYearNumber>","IfcInteger","IfcInteger","IfcInteger","LIST<IfcTimePeriod>"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** RecurrenceType is an DEMANDED attribute - may not be null**/
	protected IfcRecurrenceTypeEnum RecurrenceType;
	/** DayComponent is an OPTIONAL attribute**/
	protected SET<IfcDayInMonthNumber> DayComponent;
	/** WeekdayComponent is an OPTIONAL attribute**/
	protected SET<IfcDayInWeekNumber> WeekdayComponent;
	/** MonthComponent is an OPTIONAL attribute**/
	protected SET<IfcMonthInYearNumber> MonthComponent;
	/** Position is an OPTIONAL attribute**/
	protected IfcInteger Position;
	/** Interval is an OPTIONAL attribute**/
	protected IfcInteger Interval;
	/** Occurrences is an OPTIONAL attribute**/
	protected IfcInteger Occurrences;
	/** TimePeriods is an OPTIONAL attribute**/
	protected LIST<IfcTimePeriod> TimePeriods;
	/**
	* The default constructor.
	**/
	public IfcRecurrencePattern(){}

	/**
	* Constructs a new IfcRecurrencePattern object using the given parameters.
	*
	* @param RecurrenceType DEMANDED parameter of type IfcRecurrenceTypeEnum - may not be null.
	* @param DayComponent OPTIONAL parameter of type SET<IfcDayInMonthNumber>
	* @param WeekdayComponent OPTIONAL parameter of type SET<IfcDayInWeekNumber>
	* @param MonthComponent OPTIONAL parameter of type SET<IfcMonthInYearNumber>
	* @param Position OPTIONAL parameter of type IfcInteger
	* @param Interval OPTIONAL parameter of type IfcInteger
	* @param Occurrences OPTIONAL parameter of type IfcInteger
	* @param TimePeriods OPTIONAL parameter of type LIST<IfcTimePeriod>
	**/
	public IfcRecurrencePattern(IfcRecurrenceTypeEnum RecurrenceType, SET<IfcDayInMonthNumber> DayComponent, SET<IfcDayInWeekNumber> WeekdayComponent, SET<IfcMonthInYearNumber> MonthComponent, IfcInteger Position, IfcInteger Interval, IfcInteger Occurrences, LIST<IfcTimePeriod> TimePeriods)
	{
		this.RecurrenceType = RecurrenceType;
		this.DayComponent = DayComponent;
		this.WeekdayComponent = WeekdayComponent;
		this.MonthComponent = MonthComponent;
		this.Position = Position;
		this.Interval = Interval;
		this.Occurrences = Occurrences;
		this.TimePeriods = TimePeriods;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcRecurrencePattern object using the given parameters.
	*
	* @param RecurrenceType DEMANDED parameter of type IfcRecurrenceTypeEnum - may not be null.
	* @param DayComponent OPTIONAL parameter of type SET<IfcDayInMonthNumber>
	* @param WeekdayComponent OPTIONAL parameter of type SET<IfcDayInWeekNumber>
	* @param MonthComponent OPTIONAL parameter of type SET<IfcMonthInYearNumber>
	* @param Position OPTIONAL parameter of type IfcInteger
	* @param Interval OPTIONAL parameter of type IfcInteger
	* @param Occurrences OPTIONAL parameter of type IfcInteger
	* @param TimePeriods OPTIONAL parameter of type LIST<IfcTimePeriod>
	**/
	public void setParameters(IfcRecurrenceTypeEnum RecurrenceType, SET<IfcDayInMonthNumber> DayComponent, SET<IfcDayInWeekNumber> WeekdayComponent, SET<IfcMonthInYearNumber> MonthComponent, IfcInteger Position, IfcInteger Interval, IfcInteger Occurrences, LIST<IfcTimePeriod> TimePeriods)
	{
		this.RecurrenceType = RecurrenceType;
		this.DayComponent = DayComponent;
		this.WeekdayComponent = WeekdayComponent;
		this.MonthComponent = MonthComponent;
		this.Position = Position;
		this.Interval = Interval;
		this.Occurrences = Occurrences;
		this.TimePeriods = TimePeriods;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.RecurrenceType = (IfcRecurrenceTypeEnum) parameters.get(0);
		this.DayComponent = (SET<IfcDayInMonthNumber>) parameters.get(1);
		this.WeekdayComponent = (SET<IfcDayInWeekNumber>) parameters.get(2);
		this.MonthComponent = (SET<IfcMonthInYearNumber>) parameters.get(3);
		this.Position = (IfcInteger) parameters.get(4);
		this.Interval = (IfcInteger) parameters.get(5);
		this.Occurrences = (IfcInteger) parameters.get(6);
		this.TimePeriods = (LIST<IfcTimePeriod>) parameters.get(7);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcRecurrencePattern.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCRECURRENCEPATTERN(");
		if(getRedefinedDerivedAttributeTypes().contains("RecurrenceType")) stepString = stepString.concat("*,");
		else{
		if(this.RecurrenceType != null)		stepString = stepString.concat(((RootInterface)this.RecurrenceType).getStepParameter(IfcRecurrenceTypeEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("DayComponent")) stepString = stepString.concat("*,");
		else{
		if(this.DayComponent != null)		stepString = stepString.concat(((RootInterface)this.DayComponent).getStepParameter(IfcDayInMonthNumber.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("WeekdayComponent")) stepString = stepString.concat("*,");
		else{
		if(this.WeekdayComponent != null)		stepString = stepString.concat(((RootInterface)this.WeekdayComponent).getStepParameter(IfcDayInWeekNumber.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MonthComponent")) stepString = stepString.concat("*,");
		else{
		if(this.MonthComponent != null)		stepString = stepString.concat(((RootInterface)this.MonthComponent).getStepParameter(IfcMonthInYearNumber.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Position")) stepString = stepString.concat("*,");
		else{
		if(this.Position != null)		stepString = stepString.concat(((RootInterface)this.Position).getStepParameter(IfcInteger.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Interval")) stepString = stepString.concat("*,");
		else{
		if(this.Interval != null)		stepString = stepString.concat(((RootInterface)this.Interval).getStepParameter(IfcInteger.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Occurrences")) stepString = stepString.concat("*,");
		else{
		if(this.Occurrences != null)		stepString = stepString.concat(((RootInterface)this.Occurrences).getStepParameter(IfcInteger.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TimePeriods")) stepString = stepString.concat("*);");
		else{
		if(this.TimePeriods != null)		stepString = stepString.concat(((RootInterface)this.TimePeriods).getStepParameter(IfcTimePeriod.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the RecurrenceType attribute to the given value.
	*
	* @param RecurrenceType OPTIONAL value to set
	**/
	public void setRecurrenceType(IfcRecurrenceTypeEnum RecurrenceType)
	{
		this.RecurrenceType = RecurrenceType;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RecurrenceType attribute.
	*
	* @return the value of RecurrenceType
	/**/
	public IfcRecurrenceTypeEnum getRecurrenceType()
	{
		return this.RecurrenceType;
	}

	/**
	* This method sets the DayComponent attribute to the given value.
	*
	* @param DayComponent DEMANDED value to set - may not be null
	**/
	public void setDayComponent(SET<IfcDayInMonthNumber> DayComponent)
	{
		this.DayComponent = DayComponent;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the set of the DayComponent attribute.
	*
	* @return a copy of the DayComponent set
	**/
	public SET<IfcDayInMonthNumber> getDayComponent()
	{
		if(this.DayComponent != null)
			return new SET<IfcDayInMonthNumber>(this.DayComponent);
		return null;
	}

	/**
	* This method adds an IfcDayInMonthNumber object to the DayComponent set.
	* @param DayComponent element to be appended to this set.
	**/
	public void addDayComponent(IfcDayInMonthNumber DayComponent)
	{
		if(this.DayComponent == null)
			this.DayComponent = new SET<IfcDayInMonthNumber>();
		this.DayComponent.add(DayComponent);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcDayInMonthNumber objects to the DayComponent set.
	* @param DayComponent collection containing elements to be added to this set.
	**/
	public void addAllDayComponent(java.util.Collection<IfcDayInMonthNumber> DayComponent)
	{
		if(this.DayComponent == null)
			this.DayComponent = new SET<IfcDayInMonthNumber>();
		this.DayComponent.addAll(DayComponent);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the DayComponent set.
	**/
	public void clearDayComponent()
	{
		if(this.DayComponent != null)
		{
			this.DayComponent.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcDayInMonthNumber object from the DayComponent set.
	* @param DayComponent element to be removed from this set.
	**/
	public void removeDayComponent(IfcDayInMonthNumber DayComponent)
	{
		if(this.DayComponent != null)
		{
			this.DayComponent.remove(DayComponent);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcDayInMonthNumber objects from the DayComponent set.
	* @param DayComponent collection containing elements to be removed from this set.
	**/
	public void removeAllDayComponent(java.util.Collection<IfcDayInMonthNumber> DayComponent)
	{
		if(this.DayComponent != null)
		{
			this.DayComponent.removeAll(DayComponent);
			fireChangeEvent();
		}
	}

	/**
	* This method sets the WeekdayComponent attribute to the given value.
	*
	* @param WeekdayComponent DEMANDED value to set - may not be null
	**/
	public void setWeekdayComponent(SET<IfcDayInWeekNumber> WeekdayComponent)
	{
		this.WeekdayComponent = WeekdayComponent;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the set of the WeekdayComponent attribute.
	*
	* @return a copy of the WeekdayComponent set
	**/
	public SET<IfcDayInWeekNumber> getWeekdayComponent()
	{
		if(this.WeekdayComponent != null)
			return new SET<IfcDayInWeekNumber>(this.WeekdayComponent);
		return null;
	}

	/**
	* This method adds an IfcDayInWeekNumber object to the WeekdayComponent set.
	* @param WeekdayComponent element to be appended to this set.
	**/
	public void addWeekdayComponent(IfcDayInWeekNumber WeekdayComponent)
	{
		if(this.WeekdayComponent == null)
			this.WeekdayComponent = new SET<IfcDayInWeekNumber>();
		this.WeekdayComponent.add(WeekdayComponent);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcDayInWeekNumber objects to the WeekdayComponent set.
	* @param WeekdayComponent collection containing elements to be added to this set.
	**/
	public void addAllWeekdayComponent(java.util.Collection<IfcDayInWeekNumber> WeekdayComponent)
	{
		if(this.WeekdayComponent == null)
			this.WeekdayComponent = new SET<IfcDayInWeekNumber>();
		this.WeekdayComponent.addAll(WeekdayComponent);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the WeekdayComponent set.
	**/
	public void clearWeekdayComponent()
	{
		if(this.WeekdayComponent != null)
		{
			this.WeekdayComponent.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcDayInWeekNumber object from the WeekdayComponent set.
	* @param WeekdayComponent element to be removed from this set.
	**/
	public void removeWeekdayComponent(IfcDayInWeekNumber WeekdayComponent)
	{
		if(this.WeekdayComponent != null)
		{
			this.WeekdayComponent.remove(WeekdayComponent);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcDayInWeekNumber objects from the WeekdayComponent set.
	* @param WeekdayComponent collection containing elements to be removed from this set.
	**/
	public void removeAllWeekdayComponent(java.util.Collection<IfcDayInWeekNumber> WeekdayComponent)
	{
		if(this.WeekdayComponent != null)
		{
			this.WeekdayComponent.removeAll(WeekdayComponent);
			fireChangeEvent();
		}
	}

	/**
	* This method sets the MonthComponent attribute to the given value.
	*
	* @param MonthComponent DEMANDED value to set - may not be null
	**/
	public void setMonthComponent(SET<IfcMonthInYearNumber> MonthComponent)
	{
		this.MonthComponent = MonthComponent;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the set of the MonthComponent attribute.
	*
	* @return a copy of the MonthComponent set
	**/
	public SET<IfcMonthInYearNumber> getMonthComponent()
	{
		if(this.MonthComponent != null)
			return new SET<IfcMonthInYearNumber>(this.MonthComponent);
		return null;
	}

	/**
	* This method adds an IfcMonthInYearNumber object to the MonthComponent set.
	* @param MonthComponent element to be appended to this set.
	**/
	public void addMonthComponent(IfcMonthInYearNumber MonthComponent)
	{
		if(this.MonthComponent == null)
			this.MonthComponent = new SET<IfcMonthInYearNumber>();
		this.MonthComponent.add(MonthComponent);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcMonthInYearNumber objects to the MonthComponent set.
	* @param MonthComponent collection containing elements to be added to this set.
	**/
	public void addAllMonthComponent(java.util.Collection<IfcMonthInYearNumber> MonthComponent)
	{
		if(this.MonthComponent == null)
			this.MonthComponent = new SET<IfcMonthInYearNumber>();
		this.MonthComponent.addAll(MonthComponent);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the MonthComponent set.
	**/
	public void clearMonthComponent()
	{
		if(this.MonthComponent != null)
		{
			this.MonthComponent.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcMonthInYearNumber object from the MonthComponent set.
	* @param MonthComponent element to be removed from this set.
	**/
	public void removeMonthComponent(IfcMonthInYearNumber MonthComponent)
	{
		if(this.MonthComponent != null)
		{
			this.MonthComponent.remove(MonthComponent);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcMonthInYearNumber objects from the MonthComponent set.
	* @param MonthComponent collection containing elements to be removed from this set.
	**/
	public void removeAllMonthComponent(java.util.Collection<IfcMonthInYearNumber> MonthComponent)
	{
		if(this.MonthComponent != null)
		{
			this.MonthComponent.removeAll(MonthComponent);
			fireChangeEvent();
		}
	}

	/**
	* This method sets the Position attribute to the given value.
	*
	* @param Position DEMANDED value to set - may not be null
	**/
	public void setPosition(IfcInteger Position)
	{
		this.Position = Position;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Position attribute.
	*
	* @return the value of Position
	/**/
	public IfcInteger getPosition()
	{
		return this.Position;
	}

	/**
	* This method sets the Interval attribute to the given value.
	*
	* @param Interval DEMANDED value to set - may not be null
	**/
	public void setInterval(IfcInteger Interval)
	{
		this.Interval = Interval;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Interval attribute.
	*
	* @return the value of Interval
	/**/
	public IfcInteger getInterval()
	{
		return this.Interval;
	}

	/**
	* This method sets the Occurrences attribute to the given value.
	*
	* @param Occurrences DEMANDED value to set - may not be null
	**/
	public void setOccurrences(IfcInteger Occurrences)
	{
		this.Occurrences = Occurrences;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Occurrences attribute.
	*
	* @return the value of Occurrences
	/**/
	public IfcInteger getOccurrences()
	{
		return this.Occurrences;
	}

	/**
	* This method sets the TimePeriods attribute to the given value.
	*
	* @param TimePeriods DEMANDED value to set - may not be null
	**/
	public void setTimePeriods(LIST<IfcTimePeriod> TimePeriods)
	{
		this.TimePeriods = TimePeriods;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the TimePeriods attribute.
	*
	* @return a copy of the TimePeriods list
	**/
	public LIST<IfcTimePeriod> getTimePeriods()
	{
		if(this.TimePeriods != null)
			return new LIST<IfcTimePeriod>(this.TimePeriods);
		return null;
	}

	/**
	* This method adds an IfcTimePeriod object to the TimePeriods list.
	* @param TimePeriods element to be appended to this list.
	**/
	public void addTimePeriods(IfcTimePeriod TimePeriods)
	{
		if(this.TimePeriods == null)
			this.TimePeriods = new LIST<IfcTimePeriod>();
		this.TimePeriods.add(TimePeriods);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcTimePeriod objects to the TimePeriods list.
	* @param TimePeriods collection containing elements to be added to this list.
	**/
	public void addAllTimePeriods(java.util.Collection<IfcTimePeriod> TimePeriods)
	{
		if(this.TimePeriods == null)
			this.TimePeriods = new LIST<IfcTimePeriod>();
		this.TimePeriods.addAll(TimePeriods);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the TimePeriods list.
	**/
	public void clearTimePeriods()
	{
		if(this.TimePeriods != null)
		{
			this.TimePeriods.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcTimePeriod object from the TimePeriods list.
	* @param TimePeriods element to be removed from this list.
	**/
	public void removeTimePeriods(IfcTimePeriod TimePeriods)
	{
		if(this.TimePeriods != null)
		{
			this.TimePeriods.remove(TimePeriods);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcTimePeriod objects from the TimePeriods list.
	* @param TimePeriods collection containing elements to be removed from this list.
	**/
	public void removeAllTimePeriods(java.util.Collection<IfcTimePeriod> TimePeriods)
	{
		if(this.TimePeriods != null)
		{
			this.TimePeriods.removeAll(TimePeriods);
			fireChangeEvent();
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcRecurrencePattern ifcRecurrencePattern = new IfcRecurrencePattern();
		if(this.RecurrenceType != null)
			ifcRecurrencePattern.setRecurrenceType((IfcRecurrenceTypeEnum)this.RecurrenceType.clone());
		if(this.DayComponent != null)
			ifcRecurrencePattern.setDayComponent((SET<IfcDayInMonthNumber>)this.DayComponent.clone());
		if(this.WeekdayComponent != null)
			ifcRecurrencePattern.setWeekdayComponent((SET<IfcDayInWeekNumber>)this.WeekdayComponent.clone());
		if(this.MonthComponent != null)
			ifcRecurrencePattern.setMonthComponent((SET<IfcMonthInYearNumber>)this.MonthComponent.clone());
		if(this.Position != null)
			ifcRecurrencePattern.setPosition((IfcInteger)this.Position.clone());
		if(this.Interval != null)
			ifcRecurrencePattern.setInterval((IfcInteger)this.Interval.clone());
		if(this.Occurrences != null)
			ifcRecurrencePattern.setOccurrences((IfcInteger)this.Occurrences.clone());
		if(this.TimePeriods != null)
			ifcRecurrencePattern.setTimePeriods((LIST<IfcTimePeriod>)this.TimePeriods.clone());
		return ifcRecurrencePattern;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcRecurrencePattern ifcRecurrencePattern = new IfcRecurrencePattern();
		if(this.RecurrenceType != null)
			ifcRecurrencePattern.setRecurrenceType(this.RecurrenceType);
		if(this.DayComponent != null)
			ifcRecurrencePattern.setDayComponent(this.DayComponent);
		if(this.WeekdayComponent != null)
			ifcRecurrencePattern.setWeekdayComponent(this.WeekdayComponent);
		if(this.MonthComponent != null)
			ifcRecurrencePattern.setMonthComponent(this.MonthComponent);
		if(this.Position != null)
			ifcRecurrencePattern.setPosition(this.Position);
		if(this.Interval != null)
			ifcRecurrencePattern.setInterval(this.Interval);
		if(this.Occurrences != null)
			ifcRecurrencePattern.setOccurrences(this.Occurrences);
		if(this.TimePeriods != null)
			ifcRecurrencePattern.setTimePeriods(this.TimePeriods);
		return ifcRecurrencePattern;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

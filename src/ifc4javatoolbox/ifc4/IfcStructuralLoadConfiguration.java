/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcStructuralLoadConfiguration<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcStructuralLoadConfiguration extends IfcStructuralLoad implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","LIST<IfcStructuralLoadOrResult>","LIST<LIST<IfcLengthMeasure>>"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** Values is an DEMANDED attribute - may not be null**/
	protected LIST<IfcStructuralLoadOrResult> Values;
	/** Locations is an OPTIONAL attribute**/
	protected LIST<LIST<IfcLengthMeasure>> Locations;
	/**
	* The default constructor.
	**/
	public IfcStructuralLoadConfiguration(){}

	/**
	* Constructs a new IfcStructuralLoadConfiguration object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Values DEMANDED parameter of type LIST<IfcStructuralLoadOrResult> - may not be null.
	* @param Locations OPTIONAL parameter of type LIST<LIST<IfcLengthMeasure>>
	**/
	public IfcStructuralLoadConfiguration(IfcLabel Name, LIST<IfcStructuralLoadOrResult> Values, LIST<LIST<IfcLengthMeasure>> Locations)
	{
		this.Name = Name;
		this.Values = Values;
		this.Locations = Locations;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcStructuralLoadConfiguration object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Values DEMANDED parameter of type LIST<IfcStructuralLoadOrResult> - may not be null.
	* @param Locations OPTIONAL parameter of type LIST<LIST<IfcLengthMeasure>>
	**/
	public void setParameters(IfcLabel Name, LIST<IfcStructuralLoadOrResult> Values, LIST<LIST<IfcLengthMeasure>> Locations)
	{
		this.Name = Name;
		this.Values = Values;
		this.Locations = Locations;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.Values = (LIST<IfcStructuralLoadOrResult>) parameters.get(1);
		this.Locations = (LIST<LIST<IfcLengthMeasure>>) parameters.get(2);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcStructuralLoadConfiguration.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCSTRUCTURALLOADCONFIGURATION(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Values")) stepString = stepString.concat("*,");
		else{
		if(this.Values != null)		stepString = stepString.concat(((RootInterface)this.Values).getStepParameter(IfcStructuralLoadOrResult.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Locations")) stepString = stepString.concat("*);");
		else{
		if(this.Locations != null)		stepString = stepString.concat(((RootInterface)this.Locations).getStepParameter(LIST.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the Values attribute to the given value.
	*
	* @param Values OPTIONAL value to set
	**/
	public void setValues(LIST<IfcStructuralLoadOrResult> Values)
	{
		this.Values = Values;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the Values attribute.
	*
	* @return a copy of the Values list
	**/
	public LIST<IfcStructuralLoadOrResult> getValues()
	{
		if(this.Values != null)
			return new LIST<IfcStructuralLoadOrResult>(this.Values);
		return null;
	}

	/**
	* This method adds an IfcStructuralLoadOrResult object to the Values list.
	* @param Values element to be appended to this list.
	**/
	public void addValues(IfcStructuralLoadOrResult Values)
	{
		if(this.Values == null)
			this.Values = new LIST<IfcStructuralLoadOrResult>();
		this.Values.add(Values);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcStructuralLoadOrResult objects to the Values list.
	* @param Values collection containing elements to be added to this list.
	**/
	public void addAllValues(java.util.Collection<IfcStructuralLoadOrResult> Values)
	{
		if(this.Values == null)
			this.Values = new LIST<IfcStructuralLoadOrResult>();
		this.Values.addAll(Values);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the Values list.
	**/
	public void clearValues()
	{
		if(this.Values != null)
		{
			this.Values.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcStructuralLoadOrResult object from the Values list.
	* @param Values element to be removed from this list.
	**/
	public void removeValues(IfcStructuralLoadOrResult Values)
	{
		if(this.Values != null)
		{
			this.Values.remove(Values);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcStructuralLoadOrResult objects from the Values list.
	* @param Values collection containing elements to be removed from this list.
	**/
	public void removeAllValues(java.util.Collection<IfcStructuralLoadOrResult> Values)
	{
		if(this.Values != null)
		{
			this.Values.removeAll(Values);
			fireChangeEvent();
		}
	}

	/**
	* This method sets the Locations attribute to the given value.
	*
	* @param Locations DEMANDED value to set - may not be null
	**/
	public void setLocations(LIST<LIST<IfcLengthMeasure>> Locations)
	{
		this.Locations = Locations;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the Locations attribute.
	*
	* @return a copy of the Locations list
	**/
	public LIST<LIST<IfcLengthMeasure>> getLocations()
	{
		if(this.Locations != null)
			return new LIST<LIST<IfcLengthMeasure>>(this.Locations);
		return null;
	}

	/**
	* This method adds an LIST<IfcLengthMeasure> object to the Locations list.
	* @param Locations element to be appended to this list.
	**/
	public void addLocations(LIST<IfcLengthMeasure> Locations)
	{
		if(this.Locations == null)
			this.Locations = new LIST<LIST<IfcLengthMeasure>>();
		this.Locations.add(Locations);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of LIST<IfcLengthMeasure> objects to the Locations list.
	* @param Locations collection containing elements to be added to this list.
	**/
	public void addAllLocations(java.util.Collection<LIST<IfcLengthMeasure>> Locations)
	{
		if(this.Locations == null)
			this.Locations = new LIST<LIST<IfcLengthMeasure>>();
		this.Locations.addAll(Locations);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the Locations list.
	**/
	public void clearLocations()
	{
		if(this.Locations != null)
		{
			this.Locations.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an LIST<IfcLengthMeasure> object from the Locations list.
	* @param Locations element to be removed from this list.
	**/
	public void removeLocations(LIST<IfcLengthMeasure> Locations)
	{
		if(this.Locations != null)
		{
			this.Locations.remove(Locations);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of LIST<IfcLengthMeasure> objects from the Locations list.
	* @param Locations collection containing elements to be removed from this list.
	**/
	public void removeAllLocations(java.util.Collection<LIST<IfcLengthMeasure>> Locations)
	{
		if(this.Locations != null)
		{
			this.Locations.removeAll(Locations);
			fireChangeEvent();
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcStructuralLoadConfiguration ifcStructuralLoadConfiguration = new IfcStructuralLoadConfiguration();
		if(this.Name != null)
			ifcStructuralLoadConfiguration.setName((IfcLabel)this.Name.clone());
		if(this.Values != null)
			ifcStructuralLoadConfiguration.setValues((LIST<IfcStructuralLoadOrResult>)this.Values.clone());
		if(this.Locations != null)
			ifcStructuralLoadConfiguration.setLocations((LIST<LIST<IfcLengthMeasure>>)this.Locations.clone());
		return ifcStructuralLoadConfiguration;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcStructuralLoadConfiguration ifcStructuralLoadConfiguration = new IfcStructuralLoadConfiguration();
		if(this.Name != null)
			ifcStructuralLoadConfiguration.setName(this.Name);
		if(this.Values != null)
			ifcStructuralLoadConfiguration.setValues(this.Values);
		if(this.Locations != null)
			ifcStructuralLoadConfiguration.setLocations(this.Locations);
		return ifcStructuralLoadConfiguration;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

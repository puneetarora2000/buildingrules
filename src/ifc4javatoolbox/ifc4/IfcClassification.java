/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcClassification<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcClassification extends IfcExternalInformation implements IfcClassificationReferenceSelect, ClassInterface, IfcClassificationSelect
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcLabel","IfcDate","IfcLabel","IfcText","IfcURIReference","LIST<IfcIdentifier>"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** Source is an OPTIONAL attribute**/
	protected IfcLabel Source;
	/** Edition is an OPTIONAL attribute**/
	protected IfcLabel Edition;
	/** EditionDate is an OPTIONAL attribute**/
	protected IfcDate EditionDate;
	/** Name is an DEMANDED attribute - may not be null**/
	protected IfcLabel Name;
	/** Description is an OPTIONAL attribute**/
	protected IfcText Description;
	/** Location is an OPTIONAL attribute**/
	protected IfcURIReference Location;
	/** ReferenceTokens is an OPTIONAL attribute**/
	protected LIST<IfcIdentifier> ReferenceTokens;
	protected SET<IfcRelAssociatesClassification> ClassificationForObjects_Inverse;
	protected SET<IfcClassificationReference> HasReferences_Inverse;
	/**
	* The default constructor.
	**/
	public IfcClassification(){}

	/**
	* Constructs a new IfcClassification object using the given parameters.
	*
	* @param Source OPTIONAL parameter of type IfcLabel
	* @param Edition OPTIONAL parameter of type IfcLabel
	* @param EditionDate OPTIONAL parameter of type IfcDate
	* @param Name DEMANDED parameter of type IfcLabel - may not be null.
	* @param Description OPTIONAL parameter of type IfcText
	* @param Location OPTIONAL parameter of type IfcURIReference
	* @param ReferenceTokens OPTIONAL parameter of type LIST<IfcIdentifier>
	**/
	public IfcClassification(IfcLabel Source, IfcLabel Edition, IfcDate EditionDate, IfcLabel Name, IfcText Description, IfcURIReference Location, LIST<IfcIdentifier> ReferenceTokens)
	{
		this.Source = Source;
		this.Edition = Edition;
		this.EditionDate = EditionDate;
		this.Name = Name;
		this.Description = Description;
		this.Location = Location;
		this.ReferenceTokens = ReferenceTokens;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcClassification object using the given parameters.
	*
	* @param Source OPTIONAL parameter of type IfcLabel
	* @param Edition OPTIONAL parameter of type IfcLabel
	* @param EditionDate OPTIONAL parameter of type IfcDate
	* @param Name DEMANDED parameter of type IfcLabel - may not be null.
	* @param Description OPTIONAL parameter of type IfcText
	* @param Location OPTIONAL parameter of type IfcURIReference
	* @param ReferenceTokens OPTIONAL parameter of type LIST<IfcIdentifier>
	**/
	public void setParameters(IfcLabel Source, IfcLabel Edition, IfcDate EditionDate, IfcLabel Name, IfcText Description, IfcURIReference Location, LIST<IfcIdentifier> ReferenceTokens)
	{
		this.Source = Source;
		this.Edition = Edition;
		this.EditionDate = EditionDate;
		this.Name = Name;
		this.Description = Description;
		this.Location = Location;
		this.ReferenceTokens = ReferenceTokens;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Source = (IfcLabel) parameters.get(0);
		this.Edition = (IfcLabel) parameters.get(1);
		this.EditionDate = (IfcDate) parameters.get(2);
		this.Name = (IfcLabel) parameters.get(3);
		this.Description = (IfcText) parameters.get(4);
		this.Location = (IfcURIReference) parameters.get(5);
		this.ReferenceTokens = (LIST<IfcIdentifier>) parameters.get(6);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
		ClassificationForObjects_Inverse = null;
		HasReferences_Inverse = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcClassification.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCCLASSIFICATION(");
		if(getRedefinedDerivedAttributeTypes().contains("Source")) stepString = stepString.concat("*,");
		else{
		if(this.Source != null)		stepString = stepString.concat(((RootInterface)this.Source).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Edition")) stepString = stepString.concat("*,");
		else{
		if(this.Edition != null)		stepString = stepString.concat(((RootInterface)this.Edition).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("EditionDate")) stepString = stepString.concat("*,");
		else{
		if(this.EditionDate != null)		stepString = stepString.concat(((RootInterface)this.EditionDate).getStepParameter(IfcDate.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Location")) stepString = stepString.concat("*,");
		else{
		if(this.Location != null)		stepString = stepString.concat(((RootInterface)this.Location).getStepParameter(IfcURIReference.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ReferenceTokens")) stepString = stepString.concat("*);");
		else{
		if(this.ReferenceTokens != null)		stepString = stepString.concat(((RootInterface)this.ReferenceTokens).getStepParameter(IfcIdentifier.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method returns a copy of the set of the ClassificationForObjects_Inverse attribute.
	*
	* @return a copy of the ClassificationForObjects_Inverse set
	**/
	public SET<IfcRelAssociatesClassification> getClassificationForObjects_Inverse()
	{
		if(this.ClassificationForObjects_Inverse != null)
			return new SET<IfcRelAssociatesClassification>(this.ClassificationForObjects_Inverse);
		return null;
	}

	/**
	* This method returns a copy of the set of the HasReferences_Inverse attribute.
	*
	* @return a copy of the HasReferences_Inverse set
	**/
	public SET<IfcClassificationReference> getHasReferences_Inverse()
	{
		if(this.HasReferences_Inverse != null)
			return new SET<IfcClassificationReference>(this.HasReferences_Inverse);
		return null;
	}

	/**
	* This method sets the Source attribute to the given value.
	*
	* @param Source DEMANDED value to set - may not be null
	**/
	public void setSource(IfcLabel Source)
	{
		this.Source = Source;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Source attribute.
	*
	* @return the value of Source
	/**/
	public IfcLabel getSource()
	{
		return this.Source;
	}

	/**
	* This method sets the Edition attribute to the given value.
	*
	* @param Edition DEMANDED value to set - may not be null
	**/
	public void setEdition(IfcLabel Edition)
	{
		this.Edition = Edition;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Edition attribute.
	*
	* @return the value of Edition
	/**/
	public IfcLabel getEdition()
	{
		return this.Edition;
	}

	/**
	* This method sets the EditionDate attribute to the given value.
	*
	* @param EditionDate DEMANDED value to set - may not be null
	**/
	public void setEditionDate(IfcDate EditionDate)
	{
		this.EditionDate = EditionDate;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the EditionDate attribute.
	*
	* @return the value of EditionDate
	/**/
	public IfcDate getEditionDate()
	{
		return this.EditionDate;
	}

	/**
	* This method sets the Name attribute to the given value.
	*
	* @param Name OPTIONAL value to set
	**/
	public void setName(IfcLabel Name)
	{
		this.Name = Name;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Name attribute.
	*
	* @return the value of Name
	/**/
	public IfcLabel getName()
	{
		return this.Name;
	}

	/**
	* This method sets the Description attribute to the given value.
	*
	* @param Description DEMANDED value to set - may not be null
	**/
	public void setDescription(IfcText Description)
	{
		this.Description = Description;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Description attribute.
	*
	* @return the value of Description
	/**/
	public IfcText getDescription()
	{
		return this.Description;
	}

	/**
	* This method sets the Location attribute to the given value.
	*
	* @param Location DEMANDED value to set - may not be null
	**/
	public void setLocation(IfcURIReference Location)
	{
		this.Location = Location;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Location attribute.
	*
	* @return the value of Location
	/**/
	public IfcURIReference getLocation()
	{
		return this.Location;
	}

	/**
	* This method sets the ReferenceTokens attribute to the given value.
	*
	* @param ReferenceTokens DEMANDED value to set - may not be null
	**/
	public void setReferenceTokens(LIST<IfcIdentifier> ReferenceTokens)
	{
		this.ReferenceTokens = ReferenceTokens;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the ReferenceTokens attribute.
	*
	* @return a copy of the ReferenceTokens list
	**/
	public LIST<IfcIdentifier> getReferenceTokens()
	{
		if(this.ReferenceTokens != null)
			return new LIST<IfcIdentifier>(this.ReferenceTokens);
		return null;
	}

	/**
	* This method adds an IfcIdentifier object to the ReferenceTokens list.
	* @param ReferenceTokens element to be appended to this list.
	**/
	public void addReferenceTokens(IfcIdentifier ReferenceTokens)
	{
		if(this.ReferenceTokens == null)
			this.ReferenceTokens = new LIST<IfcIdentifier>();
		this.ReferenceTokens.add(ReferenceTokens);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcIdentifier objects to the ReferenceTokens list.
	* @param ReferenceTokens collection containing elements to be added to this list.
	**/
	public void addAllReferenceTokens(java.util.Collection<IfcIdentifier> ReferenceTokens)
	{
		if(this.ReferenceTokens == null)
			this.ReferenceTokens = new LIST<IfcIdentifier>();
		this.ReferenceTokens.addAll(ReferenceTokens);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the ReferenceTokens list.
	**/
	public void clearReferenceTokens()
	{
		if(this.ReferenceTokens != null)
		{
			this.ReferenceTokens.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcIdentifier object from the ReferenceTokens list.
	* @param ReferenceTokens element to be removed from this list.
	**/
	public void removeReferenceTokens(IfcIdentifier ReferenceTokens)
	{
		if(this.ReferenceTokens != null)
		{
			this.ReferenceTokens.remove(ReferenceTokens);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcIdentifier objects from the ReferenceTokens list.
	* @param ReferenceTokens collection containing elements to be removed from this list.
	**/
	public void removeAllReferenceTokens(java.util.Collection<IfcIdentifier> ReferenceTokens)
	{
		if(this.ReferenceTokens != null)
		{
			this.ReferenceTokens.removeAll(ReferenceTokens);
			fireChangeEvent();
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcClassification ifcClassification = new IfcClassification();
		if(this.Source != null)
			ifcClassification.setSource((IfcLabel)this.Source.clone());
		if(this.Edition != null)
			ifcClassification.setEdition((IfcLabel)this.Edition.clone());
		if(this.EditionDate != null)
			ifcClassification.setEditionDate((IfcDate)this.EditionDate.clone());
		if(this.Name != null)
			ifcClassification.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcClassification.setDescription((IfcText)this.Description.clone());
		if(this.Location != null)
			ifcClassification.setLocation((IfcURIReference)this.Location.clone());
		if(this.ReferenceTokens != null)
			ifcClassification.setReferenceTokens((LIST<IfcIdentifier>)this.ReferenceTokens.clone());
		return ifcClassification;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcClassification ifcClassification = new IfcClassification();
		if(this.Source != null)
			ifcClassification.setSource(this.Source);
		if(this.Edition != null)
			ifcClassification.setEdition(this.Edition);
		if(this.EditionDate != null)
			ifcClassification.setEditionDate(this.EditionDate);
		if(this.Name != null)
			ifcClassification.setName(this.Name);
		if(this.Description != null)
			ifcClassification.setDescription(this.Description);
		if(this.Location != null)
			ifcClassification.setLocation(this.Location);
		if(this.ReferenceTokens != null)
			ifcClassification.setReferenceTokens(this.ReferenceTokens);
		return ifcClassification;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcTextureCoordinate<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public abstract class IfcTextureCoordinate extends IfcPresentationItem implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"LIST<IfcSurfaceTexture>"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** Maps is an DEMANDED attribute - may not be null**/
	protected LIST<IfcSurfaceTexture> Maps;
	/**
	* The default constructor.
	**/
	public IfcTextureCoordinate(){}

	/**
	* Constructs a new IfcTextureCoordinate object using the given parameters.
	*
	* @param Maps DEMANDED parameter of type LIST<IfcSurfaceTexture> - may not be null.
	**/
	public IfcTextureCoordinate(LIST<IfcSurfaceTexture> Maps)
	{
		this.Maps = Maps;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcTextureCoordinate object using the given parameters.
	*
	* @param Maps DEMANDED parameter of type LIST<IfcSurfaceTexture> - may not be null.
	**/
	public void setParameters(LIST<IfcSurfaceTexture> Maps)
	{
		this.Maps = Maps;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Maps = (LIST<IfcSurfaceTexture>) parameters.get(0);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
		if(Maps != null)
		{
			for(IfcSurfaceTexture Maps$ : Maps)
			{
				if(Maps$.IsMappedBy_Inverse == null)
				{
					Maps$.IsMappedBy_Inverse = new SET<IfcTextureCoordinate>();
				}
				Maps$.IsMappedBy_Inverse.add(this);
			}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcTextureCoordinate.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCTEXTURECOORDINATE(");
		if(getRedefinedDerivedAttributeTypes().contains("Maps")) stepString = stepString.concat("*);");
		else{
		if(this.Maps != null)		stepString = stepString.concat(((RootInterface)this.Maps).getStepParameter(IfcSurfaceTexture.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the Maps attribute to the given value.
	*
	* @param Maps OPTIONAL value to set
	**/
	public void setMaps(LIST<IfcSurfaceTexture> Maps)
	{
		synchronizeInversesRemoveMaps(this.Maps);
		this.Maps = Maps;
		synchronizeInversesAddMaps(this.Maps);
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the Maps attribute.
	*
	* @return a copy of the Maps list
	**/
	public LIST<IfcSurfaceTexture> getMaps()
	{
		if(this.Maps != null)
			return new LIST<IfcSurfaceTexture>(this.Maps);
		return null;
	}

	/**
	* This method adds an IfcSurfaceTexture object to the Maps list.
	* @param Maps element to be appended to this list.
	**/
	public void addMaps(IfcSurfaceTexture Maps)
	{
		if(this.Maps == null)
			this.Maps = new LIST<IfcSurfaceTexture>();
		this.Maps.add(Maps);
		synchronizeInversesAddMaps(Maps);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcSurfaceTexture objects to the Maps list.
	* @param Maps collection containing elements to be added to this list.
	**/
	public void addAllMaps(java.util.Collection<IfcSurfaceTexture> Maps)
	{
		if(this.Maps == null)
			this.Maps = new LIST<IfcSurfaceTexture>();
		this.Maps.addAll(Maps);
		synchronizeInversesAddMaps(Maps);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the Maps list.
	**/
	public void clearMaps()
	{
		if(this.Maps != null)
		{
			synchronizeInversesRemoveMaps(this.Maps);
			this.Maps.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcSurfaceTexture object from the Maps list.
	* @param Maps element to be removed from this list.
	**/
	public void removeMaps(IfcSurfaceTexture Maps)
	{
		if(this.Maps != null)
		{
			this.Maps.remove(Maps);
			synchronizeInversesRemoveMaps(Maps);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcSurfaceTexture objects from the Maps list.
	* @param Maps collection containing elements to be removed from this list.
	**/
	public void removeAllMaps(java.util.Collection<IfcSurfaceTexture> Maps)
	{
		if(this.Maps != null)
		{
			this.Maps.removeAll(Maps);
			synchronizeInversesRemoveMaps(Maps);
			fireChangeEvent();
		}
	}

	private void synchronizeInversesAddMaps(IfcSurfaceTexture Maps)
	{
		if(Maps != null)
		{
				if(Maps.IsMappedBy_Inverse == null)
				{
					Maps.IsMappedBy_Inverse = new SET<IfcTextureCoordinate>();
				}
				Maps.IsMappedBy_Inverse.add(this);
		}
	}

	private void synchronizeInversesAddMaps(java.util.Collection<IfcSurfaceTexture> Maps)
	{
		if(Maps != null)
		{
			for(IfcSurfaceTexture Maps$ : Maps)
			{
				synchronizeInversesAddMaps(Maps$);
			}
		}
	}

	private void synchronizeInversesRemoveMaps(IfcSurfaceTexture Maps)
	{
		if(Maps != null)
		{
				if(Maps.IsMappedBy_Inverse != null)
				{
					Maps.IsMappedBy_Inverse.remove(this);
				}
		}
	}

	private void synchronizeInversesRemoveMaps(java.util.Collection<IfcSurfaceTexture> Maps)
	{
		if(Maps != null)
		{
			for(IfcSurfaceTexture Maps$ : Maps)
			{
				synchronizeInversesRemoveMaps(Maps$);
			}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public abstract Object clone();

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public abstract Object shallowCopy();

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

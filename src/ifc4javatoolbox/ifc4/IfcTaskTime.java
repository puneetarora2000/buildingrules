/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcTaskTime<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcTaskTime extends IfcSchedulingTime implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcDataOriginEnum","IfcLabel","IfcTaskDurationEnum","IfcDuration","IfcDateTime","IfcDateTime","IfcDateTime","IfcDateTime","IfcDateTime","IfcDateTime","IfcDuration","IfcDuration","BOOLEAN","IfcDateTime","IfcDuration","IfcDateTime","IfcDateTime","IfcDuration","IfcPositiveRatioMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** DurationType is an OPTIONAL attribute**/
	protected IfcTaskDurationEnum DurationType;
	/** ScheduleDuration is an OPTIONAL attribute**/
	protected IfcDuration ScheduleDuration;
	/** ScheduleStart is an OPTIONAL attribute**/
	protected IfcDateTime ScheduleStart;
	/** ScheduleFinish is an OPTIONAL attribute**/
	protected IfcDateTime ScheduleFinish;
	/** EarlyStart is an OPTIONAL attribute**/
	protected IfcDateTime EarlyStart;
	/** EarlyFinish is an OPTIONAL attribute**/
	protected IfcDateTime EarlyFinish;
	/** LateStart is an OPTIONAL attribute**/
	protected IfcDateTime LateStart;
	/** LateFinish is an OPTIONAL attribute**/
	protected IfcDateTime LateFinish;
	/** FreeFloat is an OPTIONAL attribute**/
	protected IfcDuration FreeFloat;
	/** TotalFloat is an OPTIONAL attribute**/
	protected IfcDuration TotalFloat;
	/** IsCritical is an OPTIONAL attribute**/
	protected BOOLEAN IsCritical;
	/** StatusTime is an OPTIONAL attribute**/
	protected IfcDateTime StatusTime;
	/** ActualDuration is an OPTIONAL attribute**/
	protected IfcDuration ActualDuration;
	/** ActualStart is an OPTIONAL attribute**/
	protected IfcDateTime ActualStart;
	/** ActualFinish is an OPTIONAL attribute**/
	protected IfcDateTime ActualFinish;
	/** RemainingTime is an OPTIONAL attribute**/
	protected IfcDuration RemainingTime;
	/** Completion is an OPTIONAL attribute**/
	protected IfcPositiveRatioMeasure Completion;
	/**
	* The default constructor.
	**/
	public IfcTaskTime(){}

	/**
	* Constructs a new IfcTaskTime object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param DataOrigin OPTIONAL parameter of type IfcDataOriginEnum
	* @param UserDefinedDataOrigin OPTIONAL parameter of type IfcLabel
	* @param DurationType OPTIONAL parameter of type IfcTaskDurationEnum
	* @param ScheduleDuration OPTIONAL parameter of type IfcDuration
	* @param ScheduleStart OPTIONAL parameter of type IfcDateTime
	* @param ScheduleFinish OPTIONAL parameter of type IfcDateTime
	* @param EarlyStart OPTIONAL parameter of type IfcDateTime
	* @param EarlyFinish OPTIONAL parameter of type IfcDateTime
	* @param LateStart OPTIONAL parameter of type IfcDateTime
	* @param LateFinish OPTIONAL parameter of type IfcDateTime
	* @param FreeFloat OPTIONAL parameter of type IfcDuration
	* @param TotalFloat OPTIONAL parameter of type IfcDuration
	* @param IsCritical OPTIONAL parameter of type BOOLEAN
	* @param StatusTime OPTIONAL parameter of type IfcDateTime
	* @param ActualDuration OPTIONAL parameter of type IfcDuration
	* @param ActualStart OPTIONAL parameter of type IfcDateTime
	* @param ActualFinish OPTIONAL parameter of type IfcDateTime
	* @param RemainingTime OPTIONAL parameter of type IfcDuration
	* @param Completion OPTIONAL parameter of type IfcPositiveRatioMeasure
	**/
	public IfcTaskTime(IfcLabel Name, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin, IfcTaskDurationEnum DurationType, IfcDuration ScheduleDuration, IfcDateTime ScheduleStart, IfcDateTime ScheduleFinish, IfcDateTime EarlyStart, IfcDateTime EarlyFinish, IfcDateTime LateStart, IfcDateTime LateFinish, IfcDuration FreeFloat, IfcDuration TotalFloat, BOOLEAN IsCritical, IfcDateTime StatusTime, IfcDuration ActualDuration, IfcDateTime ActualStart, IfcDateTime ActualFinish, IfcDuration RemainingTime, IfcPositiveRatioMeasure Completion)
	{
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.DurationType = DurationType;
		this.ScheduleDuration = ScheduleDuration;
		this.ScheduleStart = ScheduleStart;
		this.ScheduleFinish = ScheduleFinish;
		this.EarlyStart = EarlyStart;
		this.EarlyFinish = EarlyFinish;
		this.LateStart = LateStart;
		this.LateFinish = LateFinish;
		this.FreeFloat = FreeFloat;
		this.TotalFloat = TotalFloat;
		this.IsCritical = IsCritical;
		this.StatusTime = StatusTime;
		this.ActualDuration = ActualDuration;
		this.ActualStart = ActualStart;
		this.ActualFinish = ActualFinish;
		this.RemainingTime = RemainingTime;
		this.Completion = Completion;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcTaskTime object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param DataOrigin OPTIONAL parameter of type IfcDataOriginEnum
	* @param UserDefinedDataOrigin OPTIONAL parameter of type IfcLabel
	* @param DurationType OPTIONAL parameter of type IfcTaskDurationEnum
	* @param ScheduleDuration OPTIONAL parameter of type IfcDuration
	* @param ScheduleStart OPTIONAL parameter of type IfcDateTime
	* @param ScheduleFinish OPTIONAL parameter of type IfcDateTime
	* @param EarlyStart OPTIONAL parameter of type IfcDateTime
	* @param EarlyFinish OPTIONAL parameter of type IfcDateTime
	* @param LateStart OPTIONAL parameter of type IfcDateTime
	* @param LateFinish OPTIONAL parameter of type IfcDateTime
	* @param FreeFloat OPTIONAL parameter of type IfcDuration
	* @param TotalFloat OPTIONAL parameter of type IfcDuration
	* @param IsCritical OPTIONAL parameter of type BOOLEAN
	* @param StatusTime OPTIONAL parameter of type IfcDateTime
	* @param ActualDuration OPTIONAL parameter of type IfcDuration
	* @param ActualStart OPTIONAL parameter of type IfcDateTime
	* @param ActualFinish OPTIONAL parameter of type IfcDateTime
	* @param RemainingTime OPTIONAL parameter of type IfcDuration
	* @param Completion OPTIONAL parameter of type IfcPositiveRatioMeasure
	**/
	public void setParameters(IfcLabel Name, IfcDataOriginEnum DataOrigin, IfcLabel UserDefinedDataOrigin, IfcTaskDurationEnum DurationType, IfcDuration ScheduleDuration, IfcDateTime ScheduleStart, IfcDateTime ScheduleFinish, IfcDateTime EarlyStart, IfcDateTime EarlyFinish, IfcDateTime LateStart, IfcDateTime LateFinish, IfcDuration FreeFloat, IfcDuration TotalFloat, BOOLEAN IsCritical, IfcDateTime StatusTime, IfcDuration ActualDuration, IfcDateTime ActualStart, IfcDateTime ActualFinish, IfcDuration RemainingTime, IfcPositiveRatioMeasure Completion)
	{
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.DurationType = DurationType;
		this.ScheduleDuration = ScheduleDuration;
		this.ScheduleStart = ScheduleStart;
		this.ScheduleFinish = ScheduleFinish;
		this.EarlyStart = EarlyStart;
		this.EarlyFinish = EarlyFinish;
		this.LateStart = LateStart;
		this.LateFinish = LateFinish;
		this.FreeFloat = FreeFloat;
		this.TotalFloat = TotalFloat;
		this.IsCritical = IsCritical;
		this.StatusTime = StatusTime;
		this.ActualDuration = ActualDuration;
		this.ActualStart = ActualStart;
		this.ActualFinish = ActualFinish;
		this.RemainingTime = RemainingTime;
		this.Completion = Completion;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.DataOrigin = (IfcDataOriginEnum) parameters.get(1);
		this.UserDefinedDataOrigin = (IfcLabel) parameters.get(2);
		this.DurationType = (IfcTaskDurationEnum) parameters.get(3);
		this.ScheduleDuration = (IfcDuration) parameters.get(4);
		this.ScheduleStart = (IfcDateTime) parameters.get(5);
		this.ScheduleFinish = (IfcDateTime) parameters.get(6);
		this.EarlyStart = (IfcDateTime) parameters.get(7);
		this.EarlyFinish = (IfcDateTime) parameters.get(8);
		this.LateStart = (IfcDateTime) parameters.get(9);
		this.LateFinish = (IfcDateTime) parameters.get(10);
		this.FreeFloat = (IfcDuration) parameters.get(11);
		this.TotalFloat = (IfcDuration) parameters.get(12);
		this.IsCritical = (BOOLEAN) parameters.get(13);
		this.StatusTime = (IfcDateTime) parameters.get(14);
		this.ActualDuration = (IfcDuration) parameters.get(15);
		this.ActualStart = (IfcDateTime) parameters.get(16);
		this.ActualFinish = (IfcDateTime) parameters.get(17);
		this.RemainingTime = (IfcDuration) parameters.get(18);
		this.Completion = (IfcPositiveRatioMeasure) parameters.get(19);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcTaskTime.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCTASKTIME(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("DataOrigin")) stepString = stepString.concat("*,");
		else{
		if(this.DataOrigin != null)		stepString = stepString.concat(((RootInterface)this.DataOrigin).getStepParameter(IfcDataOriginEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("UserDefinedDataOrigin")) stepString = stepString.concat("*,");
		else{
		if(this.UserDefinedDataOrigin != null)		stepString = stepString.concat(((RootInterface)this.UserDefinedDataOrigin).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("DurationType")) stepString = stepString.concat("*,");
		else{
		if(this.DurationType != null)		stepString = stepString.concat(((RootInterface)this.DurationType).getStepParameter(IfcTaskDurationEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ScheduleDuration")) stepString = stepString.concat("*,");
		else{
		if(this.ScheduleDuration != null)		stepString = stepString.concat(((RootInterface)this.ScheduleDuration).getStepParameter(IfcDuration.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ScheduleStart")) stepString = stepString.concat("*,");
		else{
		if(this.ScheduleStart != null)		stepString = stepString.concat(((RootInterface)this.ScheduleStart).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ScheduleFinish")) stepString = stepString.concat("*,");
		else{
		if(this.ScheduleFinish != null)		stepString = stepString.concat(((RootInterface)this.ScheduleFinish).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("EarlyStart")) stepString = stepString.concat("*,");
		else{
		if(this.EarlyStart != null)		stepString = stepString.concat(((RootInterface)this.EarlyStart).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("EarlyFinish")) stepString = stepString.concat("*,");
		else{
		if(this.EarlyFinish != null)		stepString = stepString.concat(((RootInterface)this.EarlyFinish).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LateStart")) stepString = stepString.concat("*,");
		else{
		if(this.LateStart != null)		stepString = stepString.concat(((RootInterface)this.LateStart).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LateFinish")) stepString = stepString.concat("*,");
		else{
		if(this.LateFinish != null)		stepString = stepString.concat(((RootInterface)this.LateFinish).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("FreeFloat")) stepString = stepString.concat("*,");
		else{
		if(this.FreeFloat != null)		stepString = stepString.concat(((RootInterface)this.FreeFloat).getStepParameter(IfcDuration.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TotalFloat")) stepString = stepString.concat("*,");
		else{
		if(this.TotalFloat != null)		stepString = stepString.concat(((RootInterface)this.TotalFloat).getStepParameter(IfcDuration.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("IsCritical")) stepString = stepString.concat("*,");
		else{
		if(this.IsCritical != null)		stepString = stepString.concat(((RootInterface)this.IsCritical).getStepParameter(BOOLEAN.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("StatusTime")) stepString = stepString.concat("*,");
		else{
		if(this.StatusTime != null)		stepString = stepString.concat(((RootInterface)this.StatusTime).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ActualDuration")) stepString = stepString.concat("*,");
		else{
		if(this.ActualDuration != null)		stepString = stepString.concat(((RootInterface)this.ActualDuration).getStepParameter(IfcDuration.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ActualStart")) stepString = stepString.concat("*,");
		else{
		if(this.ActualStart != null)		stepString = stepString.concat(((RootInterface)this.ActualStart).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ActualFinish")) stepString = stepString.concat("*,");
		else{
		if(this.ActualFinish != null)		stepString = stepString.concat(((RootInterface)this.ActualFinish).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RemainingTime")) stepString = stepString.concat("*,");
		else{
		if(this.RemainingTime != null)		stepString = stepString.concat(((RootInterface)this.RemainingTime).getStepParameter(IfcDuration.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Completion")) stepString = stepString.concat("*);");
		else{
		if(this.Completion != null)		stepString = stepString.concat(((RootInterface)this.Completion).getStepParameter(IfcPositiveRatioMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the DurationType attribute to the given value.
	*
	* @param DurationType DEMANDED value to set - may not be null
	**/
	public void setDurationType(IfcTaskDurationEnum DurationType)
	{
		this.DurationType = DurationType;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the DurationType attribute.
	*
	* @return the value of DurationType
	/**/
	public IfcTaskDurationEnum getDurationType()
	{
		return this.DurationType;
	}

	/**
	* This method sets the ScheduleDuration attribute to the given value.
	*
	* @param ScheduleDuration DEMANDED value to set - may not be null
	**/
	public void setScheduleDuration(IfcDuration ScheduleDuration)
	{
		this.ScheduleDuration = ScheduleDuration;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ScheduleDuration attribute.
	*
	* @return the value of ScheduleDuration
	/**/
	public IfcDuration getScheduleDuration()
	{
		return this.ScheduleDuration;
	}

	/**
	* This method sets the ScheduleStart attribute to the given value.
	*
	* @param ScheduleStart DEMANDED value to set - may not be null
	**/
	public void setScheduleStart(IfcDateTime ScheduleStart)
	{
		this.ScheduleStart = ScheduleStart;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ScheduleStart attribute.
	*
	* @return the value of ScheduleStart
	/**/
	public IfcDateTime getScheduleStart()
	{
		return this.ScheduleStart;
	}

	/**
	* This method sets the ScheduleFinish attribute to the given value.
	*
	* @param ScheduleFinish DEMANDED value to set - may not be null
	**/
	public void setScheduleFinish(IfcDateTime ScheduleFinish)
	{
		this.ScheduleFinish = ScheduleFinish;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ScheduleFinish attribute.
	*
	* @return the value of ScheduleFinish
	/**/
	public IfcDateTime getScheduleFinish()
	{
		return this.ScheduleFinish;
	}

	/**
	* This method sets the EarlyStart attribute to the given value.
	*
	* @param EarlyStart DEMANDED value to set - may not be null
	**/
	public void setEarlyStart(IfcDateTime EarlyStart)
	{
		this.EarlyStart = EarlyStart;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the EarlyStart attribute.
	*
	* @return the value of EarlyStart
	/**/
	public IfcDateTime getEarlyStart()
	{
		return this.EarlyStart;
	}

	/**
	* This method sets the EarlyFinish attribute to the given value.
	*
	* @param EarlyFinish DEMANDED value to set - may not be null
	**/
	public void setEarlyFinish(IfcDateTime EarlyFinish)
	{
		this.EarlyFinish = EarlyFinish;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the EarlyFinish attribute.
	*
	* @return the value of EarlyFinish
	/**/
	public IfcDateTime getEarlyFinish()
	{
		return this.EarlyFinish;
	}

	/**
	* This method sets the LateStart attribute to the given value.
	*
	* @param LateStart DEMANDED value to set - may not be null
	**/
	public void setLateStart(IfcDateTime LateStart)
	{
		this.LateStart = LateStart;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LateStart attribute.
	*
	* @return the value of LateStart
	/**/
	public IfcDateTime getLateStart()
	{
		return this.LateStart;
	}

	/**
	* This method sets the LateFinish attribute to the given value.
	*
	* @param LateFinish DEMANDED value to set - may not be null
	**/
	public void setLateFinish(IfcDateTime LateFinish)
	{
		this.LateFinish = LateFinish;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LateFinish attribute.
	*
	* @return the value of LateFinish
	/**/
	public IfcDateTime getLateFinish()
	{
		return this.LateFinish;
	}

	/**
	* This method sets the FreeFloat attribute to the given value.
	*
	* @param FreeFloat DEMANDED value to set - may not be null
	**/
	public void setFreeFloat(IfcDuration FreeFloat)
	{
		this.FreeFloat = FreeFloat;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the FreeFloat attribute.
	*
	* @return the value of FreeFloat
	/**/
	public IfcDuration getFreeFloat()
	{
		return this.FreeFloat;
	}

	/**
	* This method sets the TotalFloat attribute to the given value.
	*
	* @param TotalFloat DEMANDED value to set - may not be null
	**/
	public void setTotalFloat(IfcDuration TotalFloat)
	{
		this.TotalFloat = TotalFloat;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TotalFloat attribute.
	*
	* @return the value of TotalFloat
	/**/
	public IfcDuration getTotalFloat()
	{
		return this.TotalFloat;
	}

	/**
	* This method sets the IsCritical attribute to the given value.
	*
	* @param IsCritical DEMANDED value to set - may not be null
	**/
	public void setIsCritical(BOOLEAN IsCritical)
	{
		this.IsCritical = IsCritical;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the IsCritical attribute.
	*
	* @return the value of IsCritical
	/**/
	public BOOLEAN getIsCritical()
	{
		return this.IsCritical;
	}

	/**
	* This method sets the StatusTime attribute to the given value.
	*
	* @param StatusTime DEMANDED value to set - may not be null
	**/
	public void setStatusTime(IfcDateTime StatusTime)
	{
		this.StatusTime = StatusTime;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the StatusTime attribute.
	*
	* @return the value of StatusTime
	/**/
	public IfcDateTime getStatusTime()
	{
		return this.StatusTime;
	}

	/**
	* This method sets the ActualDuration attribute to the given value.
	*
	* @param ActualDuration DEMANDED value to set - may not be null
	**/
	public void setActualDuration(IfcDuration ActualDuration)
	{
		this.ActualDuration = ActualDuration;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ActualDuration attribute.
	*
	* @return the value of ActualDuration
	/**/
	public IfcDuration getActualDuration()
	{
		return this.ActualDuration;
	}

	/**
	* This method sets the ActualStart attribute to the given value.
	*
	* @param ActualStart DEMANDED value to set - may not be null
	**/
	public void setActualStart(IfcDateTime ActualStart)
	{
		this.ActualStart = ActualStart;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ActualStart attribute.
	*
	* @return the value of ActualStart
	/**/
	public IfcDateTime getActualStart()
	{
		return this.ActualStart;
	}

	/**
	* This method sets the ActualFinish attribute to the given value.
	*
	* @param ActualFinish DEMANDED value to set - may not be null
	**/
	public void setActualFinish(IfcDateTime ActualFinish)
	{
		this.ActualFinish = ActualFinish;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ActualFinish attribute.
	*
	* @return the value of ActualFinish
	/**/
	public IfcDateTime getActualFinish()
	{
		return this.ActualFinish;
	}

	/**
	* This method sets the RemainingTime attribute to the given value.
	*
	* @param RemainingTime DEMANDED value to set - may not be null
	**/
	public void setRemainingTime(IfcDuration RemainingTime)
	{
		this.RemainingTime = RemainingTime;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RemainingTime attribute.
	*
	* @return the value of RemainingTime
	/**/
	public IfcDuration getRemainingTime()
	{
		return this.RemainingTime;
	}

	/**
	* This method sets the Completion attribute to the given value.
	*
	* @param Completion DEMANDED value to set - may not be null
	**/
	public void setCompletion(IfcPositiveRatioMeasure Completion)
	{
		this.Completion = Completion;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Completion attribute.
	*
	* @return the value of Completion
	/**/
	public IfcPositiveRatioMeasure getCompletion()
	{
		return this.Completion;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcTaskTime ifcTaskTime = new IfcTaskTime();
		if(this.Name != null)
			ifcTaskTime.setName((IfcLabel)this.Name.clone());
		if(this.DataOrigin != null)
			ifcTaskTime.setDataOrigin((IfcDataOriginEnum)this.DataOrigin.clone());
		if(this.UserDefinedDataOrigin != null)
			ifcTaskTime.setUserDefinedDataOrigin((IfcLabel)this.UserDefinedDataOrigin.clone());
		if(this.DurationType != null)
			ifcTaskTime.setDurationType((IfcTaskDurationEnum)this.DurationType.clone());
		if(this.ScheduleDuration != null)
			ifcTaskTime.setScheduleDuration((IfcDuration)this.ScheduleDuration.clone());
		if(this.ScheduleStart != null)
			ifcTaskTime.setScheduleStart((IfcDateTime)this.ScheduleStart.clone());
		if(this.ScheduleFinish != null)
			ifcTaskTime.setScheduleFinish((IfcDateTime)this.ScheduleFinish.clone());
		if(this.EarlyStart != null)
			ifcTaskTime.setEarlyStart((IfcDateTime)this.EarlyStart.clone());
		if(this.EarlyFinish != null)
			ifcTaskTime.setEarlyFinish((IfcDateTime)this.EarlyFinish.clone());
		if(this.LateStart != null)
			ifcTaskTime.setLateStart((IfcDateTime)this.LateStart.clone());
		if(this.LateFinish != null)
			ifcTaskTime.setLateFinish((IfcDateTime)this.LateFinish.clone());
		if(this.FreeFloat != null)
			ifcTaskTime.setFreeFloat((IfcDuration)this.FreeFloat.clone());
		if(this.TotalFloat != null)
			ifcTaskTime.setTotalFloat((IfcDuration)this.TotalFloat.clone());
		if(this.IsCritical != null)
			ifcTaskTime.setIsCritical((BOOLEAN)this.IsCritical.clone());
		if(this.StatusTime != null)
			ifcTaskTime.setStatusTime((IfcDateTime)this.StatusTime.clone());
		if(this.ActualDuration != null)
			ifcTaskTime.setActualDuration((IfcDuration)this.ActualDuration.clone());
		if(this.ActualStart != null)
			ifcTaskTime.setActualStart((IfcDateTime)this.ActualStart.clone());
		if(this.ActualFinish != null)
			ifcTaskTime.setActualFinish((IfcDateTime)this.ActualFinish.clone());
		if(this.RemainingTime != null)
			ifcTaskTime.setRemainingTime((IfcDuration)this.RemainingTime.clone());
		if(this.Completion != null)
			ifcTaskTime.setCompletion((IfcPositiveRatioMeasure)this.Completion.clone());
		return ifcTaskTime;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcTaskTime ifcTaskTime = new IfcTaskTime();
		if(this.Name != null)
			ifcTaskTime.setName(this.Name);
		if(this.DataOrigin != null)
			ifcTaskTime.setDataOrigin(this.DataOrigin);
		if(this.UserDefinedDataOrigin != null)
			ifcTaskTime.setUserDefinedDataOrigin(this.UserDefinedDataOrigin);
		if(this.DurationType != null)
			ifcTaskTime.setDurationType(this.DurationType);
		if(this.ScheduleDuration != null)
			ifcTaskTime.setScheduleDuration(this.ScheduleDuration);
		if(this.ScheduleStart != null)
			ifcTaskTime.setScheduleStart(this.ScheduleStart);
		if(this.ScheduleFinish != null)
			ifcTaskTime.setScheduleFinish(this.ScheduleFinish);
		if(this.EarlyStart != null)
			ifcTaskTime.setEarlyStart(this.EarlyStart);
		if(this.EarlyFinish != null)
			ifcTaskTime.setEarlyFinish(this.EarlyFinish);
		if(this.LateStart != null)
			ifcTaskTime.setLateStart(this.LateStart);
		if(this.LateFinish != null)
			ifcTaskTime.setLateFinish(this.LateFinish);
		if(this.FreeFloat != null)
			ifcTaskTime.setFreeFloat(this.FreeFloat);
		if(this.TotalFloat != null)
			ifcTaskTime.setTotalFloat(this.TotalFloat);
		if(this.IsCritical != null)
			ifcTaskTime.setIsCritical(this.IsCritical);
		if(this.StatusTime != null)
			ifcTaskTime.setStatusTime(this.StatusTime);
		if(this.ActualDuration != null)
			ifcTaskTime.setActualDuration(this.ActualDuration);
		if(this.ActualStart != null)
			ifcTaskTime.setActualStart(this.ActualStart);
		if(this.ActualFinish != null)
			ifcTaskTime.setActualFinish(this.ActualFinish);
		if(this.RemainingTime != null)
			ifcTaskTime.setRemainingTime(this.RemainingTime);
		if(this.Completion != null)
			ifcTaskTime.setCompletion(this.Completion);
		return ifcTaskTime;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

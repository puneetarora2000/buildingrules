/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcObjective<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcObjective extends IfcConstraint implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcText","IfcConstraintEnum","IfcLabel","IfcActorSelect","IfcDateTime","IfcLabel","LIST<IfcConstraint>","IfcLogicalOperatorEnum","IfcObjectiveEnum","IfcLabel"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** BenchmarkValues is an OPTIONAL attribute**/
	protected LIST<IfcConstraint> BenchmarkValues;
	/** LogicalAggregator is an OPTIONAL attribute**/
	protected IfcLogicalOperatorEnum LogicalAggregator;
	/** ObjectiveQualifier is an DEMANDED attribute - may not be null**/
	protected IfcObjectiveEnum ObjectiveQualifier;
	/** UserDefinedQualifier is an OPTIONAL attribute**/
	protected IfcLabel UserDefinedQualifier;
	/**
	* The default constructor.
	**/
	public IfcObjective(){}

	/**
	* Constructs a new IfcObjective object using the given parameters.
	*
	* @param Name DEMANDED parameter of type IfcLabel - may not be null.
	* @param Description OPTIONAL parameter of type IfcText
	* @param ConstraintGrade DEMANDED parameter of type IfcConstraintEnum - may not be null.
	* @param ConstraintSource OPTIONAL parameter of type IfcLabel
	* @param CreatingActor OPTIONAL parameter of type IfcActorSelect
	* @param CreationTime OPTIONAL parameter of type IfcDateTime
	* @param UserDefinedGrade OPTIONAL parameter of type IfcLabel
	* @param BenchmarkValues OPTIONAL parameter of type LIST<IfcConstraint>
	* @param LogicalAggregator OPTIONAL parameter of type IfcLogicalOperatorEnum
	* @param ObjectiveQualifier DEMANDED parameter of type IfcObjectiveEnum - may not be null.
	* @param UserDefinedQualifier OPTIONAL parameter of type IfcLabel
	**/
	public IfcObjective(IfcLabel Name, IfcText Description, IfcConstraintEnum ConstraintGrade, IfcLabel ConstraintSource, IfcActorSelect CreatingActor, IfcDateTime CreationTime, IfcLabel UserDefinedGrade, LIST<IfcConstraint> BenchmarkValues, IfcLogicalOperatorEnum LogicalAggregator, IfcObjectiveEnum ObjectiveQualifier, IfcLabel UserDefinedQualifier)
	{
		this.Name = Name;
		this.Description = Description;
		this.ConstraintGrade = ConstraintGrade;
		this.ConstraintSource = ConstraintSource;
		this.CreatingActor = CreatingActor;
		this.CreationTime = CreationTime;
		this.UserDefinedGrade = UserDefinedGrade;
		this.BenchmarkValues = BenchmarkValues;
		this.LogicalAggregator = LogicalAggregator;
		this.ObjectiveQualifier = ObjectiveQualifier;
		this.UserDefinedQualifier = UserDefinedQualifier;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcObjective object using the given parameters.
	*
	* @param Name DEMANDED parameter of type IfcLabel - may not be null.
	* @param Description OPTIONAL parameter of type IfcText
	* @param ConstraintGrade DEMANDED parameter of type IfcConstraintEnum - may not be null.
	* @param ConstraintSource OPTIONAL parameter of type IfcLabel
	* @param CreatingActor OPTIONAL parameter of type IfcActorSelect
	* @param CreationTime OPTIONAL parameter of type IfcDateTime
	* @param UserDefinedGrade OPTIONAL parameter of type IfcLabel
	* @param BenchmarkValues OPTIONAL parameter of type LIST<IfcConstraint>
	* @param LogicalAggregator OPTIONAL parameter of type IfcLogicalOperatorEnum
	* @param ObjectiveQualifier DEMANDED parameter of type IfcObjectiveEnum - may not be null.
	* @param UserDefinedQualifier OPTIONAL parameter of type IfcLabel
	**/
	public void setParameters(IfcLabel Name, IfcText Description, IfcConstraintEnum ConstraintGrade, IfcLabel ConstraintSource, IfcActorSelect CreatingActor, IfcDateTime CreationTime, IfcLabel UserDefinedGrade, LIST<IfcConstraint> BenchmarkValues, IfcLogicalOperatorEnum LogicalAggregator, IfcObjectiveEnum ObjectiveQualifier, IfcLabel UserDefinedQualifier)
	{
		this.Name = Name;
		this.Description = Description;
		this.ConstraintGrade = ConstraintGrade;
		this.ConstraintSource = ConstraintSource;
		this.CreatingActor = CreatingActor;
		this.CreationTime = CreationTime;
		this.UserDefinedGrade = UserDefinedGrade;
		this.BenchmarkValues = BenchmarkValues;
		this.LogicalAggregator = LogicalAggregator;
		this.ObjectiveQualifier = ObjectiveQualifier;
		this.UserDefinedQualifier = UserDefinedQualifier;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.Description = (IfcText) parameters.get(1);
		this.ConstraintGrade = (IfcConstraintEnum) parameters.get(2);
		this.ConstraintSource = (IfcLabel) parameters.get(3);
		this.CreatingActor = (IfcActorSelect) parameters.get(4);
		this.CreationTime = (IfcDateTime) parameters.get(5);
		this.UserDefinedGrade = (IfcLabel) parameters.get(6);
		this.BenchmarkValues = (LIST<IfcConstraint>) parameters.get(7);
		this.LogicalAggregator = (IfcLogicalOperatorEnum) parameters.get(8);
		this.ObjectiveQualifier = (IfcObjectiveEnum) parameters.get(9);
		this.UserDefinedQualifier = (IfcLabel) parameters.get(10);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcObjective.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCOBJECTIVE(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ConstraintGrade")) stepString = stepString.concat("*,");
		else{
		if(this.ConstraintGrade != null)		stepString = stepString.concat(((RootInterface)this.ConstraintGrade).getStepParameter(IfcConstraintEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ConstraintSource")) stepString = stepString.concat("*,");
		else{
		if(this.ConstraintSource != null)		stepString = stepString.concat(((RootInterface)this.ConstraintSource).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CreatingActor")) stepString = stepString.concat("*,");
		else{
		if(this.CreatingActor != null)		stepString = stepString.concat(((RootInterface)this.CreatingActor).getStepParameter(IfcActorSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CreationTime")) stepString = stepString.concat("*,");
		else{
		if(this.CreationTime != null)		stepString = stepString.concat(((RootInterface)this.CreationTime).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("UserDefinedGrade")) stepString = stepString.concat("*,");
		else{
		if(this.UserDefinedGrade != null)		stepString = stepString.concat(((RootInterface)this.UserDefinedGrade).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("BenchmarkValues")) stepString = stepString.concat("*,");
		else{
		if(this.BenchmarkValues != null)		stepString = stepString.concat(((RootInterface)this.BenchmarkValues).getStepParameter(IfcConstraint.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LogicalAggregator")) stepString = stepString.concat("*,");
		else{
		if(this.LogicalAggregator != null)		stepString = stepString.concat(((RootInterface)this.LogicalAggregator).getStepParameter(IfcLogicalOperatorEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ObjectiveQualifier")) stepString = stepString.concat("*,");
		else{
		if(this.ObjectiveQualifier != null)		stepString = stepString.concat(((RootInterface)this.ObjectiveQualifier).getStepParameter(IfcObjectiveEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("UserDefinedQualifier")) stepString = stepString.concat("*);");
		else{
		if(this.UserDefinedQualifier != null)		stepString = stepString.concat(((RootInterface)this.UserDefinedQualifier).getStepParameter(IfcLabel.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the BenchmarkValues attribute to the given value.
	*
	* @param BenchmarkValues DEMANDED value to set - may not be null
	**/
	public void setBenchmarkValues(LIST<IfcConstraint> BenchmarkValues)
	{
		this.BenchmarkValues = BenchmarkValues;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the BenchmarkValues attribute.
	*
	* @return a copy of the BenchmarkValues list
	**/
	public LIST<IfcConstraint> getBenchmarkValues()
	{
		if(this.BenchmarkValues != null)
			return new LIST<IfcConstraint>(this.BenchmarkValues);
		return null;
	}

	/**
	* This method adds an IfcConstraint object to the BenchmarkValues list.
	* @param BenchmarkValues element to be appended to this list.
	**/
	public void addBenchmarkValues(IfcConstraint BenchmarkValues)
	{
		if(this.BenchmarkValues == null)
			this.BenchmarkValues = new LIST<IfcConstraint>();
		this.BenchmarkValues.add(BenchmarkValues);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcConstraint objects to the BenchmarkValues list.
	* @param BenchmarkValues collection containing elements to be added to this list.
	**/
	public void addAllBenchmarkValues(java.util.Collection<IfcConstraint> BenchmarkValues)
	{
		if(this.BenchmarkValues == null)
			this.BenchmarkValues = new LIST<IfcConstraint>();
		this.BenchmarkValues.addAll(BenchmarkValues);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the BenchmarkValues list.
	**/
	public void clearBenchmarkValues()
	{
		if(this.BenchmarkValues != null)
		{
			this.BenchmarkValues.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcConstraint object from the BenchmarkValues list.
	* @param BenchmarkValues element to be removed from this list.
	**/
	public void removeBenchmarkValues(IfcConstraint BenchmarkValues)
	{
		if(this.BenchmarkValues != null)
		{
			this.BenchmarkValues.remove(BenchmarkValues);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcConstraint objects from the BenchmarkValues list.
	* @param BenchmarkValues collection containing elements to be removed from this list.
	**/
	public void removeAllBenchmarkValues(java.util.Collection<IfcConstraint> BenchmarkValues)
	{
		if(this.BenchmarkValues != null)
		{
			this.BenchmarkValues.removeAll(BenchmarkValues);
			fireChangeEvent();
		}
	}

	/**
	* This method sets the LogicalAggregator attribute to the given value.
	*
	* @param LogicalAggregator DEMANDED value to set - may not be null
	**/
	public void setLogicalAggregator(IfcLogicalOperatorEnum LogicalAggregator)
	{
		this.LogicalAggregator = LogicalAggregator;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LogicalAggregator attribute.
	*
	* @return the value of LogicalAggregator
	/**/
	public IfcLogicalOperatorEnum getLogicalAggregator()
	{
		return this.LogicalAggregator;
	}

	/**
	* This method sets the ObjectiveQualifier attribute to the given value.
	*
	* @param ObjectiveQualifier OPTIONAL value to set
	**/
	public void setObjectiveQualifier(IfcObjectiveEnum ObjectiveQualifier)
	{
		this.ObjectiveQualifier = ObjectiveQualifier;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ObjectiveQualifier attribute.
	*
	* @return the value of ObjectiveQualifier
	/**/
	public IfcObjectiveEnum getObjectiveQualifier()
	{
		return this.ObjectiveQualifier;
	}

	/**
	* This method sets the UserDefinedQualifier attribute to the given value.
	*
	* @param UserDefinedQualifier DEMANDED value to set - may not be null
	**/
	public void setUserDefinedQualifier(IfcLabel UserDefinedQualifier)
	{
		this.UserDefinedQualifier = UserDefinedQualifier;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the UserDefinedQualifier attribute.
	*
	* @return the value of UserDefinedQualifier
	/**/
	public IfcLabel getUserDefinedQualifier()
	{
		return this.UserDefinedQualifier;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcObjective ifcObjective = new IfcObjective();
		if(this.Name != null)
			ifcObjective.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcObjective.setDescription((IfcText)this.Description.clone());
		if(this.ConstraintGrade != null)
			ifcObjective.setConstraintGrade((IfcConstraintEnum)this.ConstraintGrade.clone());
		if(this.ConstraintSource != null)
			ifcObjective.setConstraintSource((IfcLabel)this.ConstraintSource.clone());
		if(this.CreatingActor != null)
			ifcObjective.setCreatingActor((IfcActorSelect)this.CreatingActor.clone());
		if(this.CreationTime != null)
			ifcObjective.setCreationTime((IfcDateTime)this.CreationTime.clone());
		if(this.UserDefinedGrade != null)
			ifcObjective.setUserDefinedGrade((IfcLabel)this.UserDefinedGrade.clone());
		if(this.BenchmarkValues != null)
			ifcObjective.setBenchmarkValues((LIST<IfcConstraint>)this.BenchmarkValues.clone());
		if(this.LogicalAggregator != null)
			ifcObjective.setLogicalAggregator((IfcLogicalOperatorEnum)this.LogicalAggregator.clone());
		if(this.ObjectiveQualifier != null)
			ifcObjective.setObjectiveQualifier((IfcObjectiveEnum)this.ObjectiveQualifier.clone());
		if(this.UserDefinedQualifier != null)
			ifcObjective.setUserDefinedQualifier((IfcLabel)this.UserDefinedQualifier.clone());
		return ifcObjective;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcObjective ifcObjective = new IfcObjective();
		if(this.Name != null)
			ifcObjective.setName(this.Name);
		if(this.Description != null)
			ifcObjective.setDescription(this.Description);
		if(this.ConstraintGrade != null)
			ifcObjective.setConstraintGrade(this.ConstraintGrade);
		if(this.ConstraintSource != null)
			ifcObjective.setConstraintSource(this.ConstraintSource);
		if(this.CreatingActor != null)
			ifcObjective.setCreatingActor(this.CreatingActor);
		if(this.CreationTime != null)
			ifcObjective.setCreationTime(this.CreationTime);
		if(this.UserDefinedGrade != null)
			ifcObjective.setUserDefinedGrade(this.UserDefinedGrade);
		if(this.BenchmarkValues != null)
			ifcObjective.setBenchmarkValues(this.BenchmarkValues);
		if(this.LogicalAggregator != null)
			ifcObjective.setLogicalAggregator(this.LogicalAggregator);
		if(this.ObjectiveQualifier != null)
			ifcObjective.setObjectiveQualifier(this.ObjectiveQualifier);
		if(this.UserDefinedQualifier != null)
			ifcObjective.setUserDefinedQualifier(this.UserDefinedQualifier);
		return ifcObjective;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcMaterialLayerWithOffsets<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcMaterialLayerWithOffsets extends IfcMaterialLayer implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcMaterial","IfcNonNegativeLengthMeasure","IfcLogical","IfcLabel","IfcText","IfcLabel","IfcNormalisedRatioMeasure","IfcLayerSetDirectionEnum","LIST<IfcLengthMeasure>"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** OffsetDirection is an DEMANDED attribute - may not be null**/
	protected IfcLayerSetDirectionEnum OffsetDirection;
	/** OffsetValues is an DEMANDED attribute - may not be null**/
	protected LIST<IfcLengthMeasure> OffsetValues;
	/**
	* The default constructor.
	**/
	public IfcMaterialLayerWithOffsets(){}

	/**
	* Constructs a new IfcMaterialLayerWithOffsets object using the given parameters.
	*
	* @param Material OPTIONAL parameter of type IfcMaterial
	* @param LayerThickness DEMANDED parameter of type IfcNonNegativeLengthMeasure - may not be null.
	* @param IsVentilated OPTIONAL parameter of type IfcLogical
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param Category OPTIONAL parameter of type IfcLabel
	* @param Priority OPTIONAL parameter of type IfcNormalisedRatioMeasure
	* @param OffsetDirection DEMANDED parameter of type IfcLayerSetDirectionEnum - may not be null.
	* @param OffsetValues DEMANDED parameter of type LIST<IfcLengthMeasure> - may not be null.
	**/
	public IfcMaterialLayerWithOffsets(IfcMaterial Material, IfcNonNegativeLengthMeasure LayerThickness, IfcLogical IsVentilated, IfcLabel Name, IfcText Description, IfcLabel Category, IfcNormalisedRatioMeasure Priority, IfcLayerSetDirectionEnum OffsetDirection, LIST<IfcLengthMeasure> OffsetValues)
	{
		this.Material = Material;
		this.LayerThickness = LayerThickness;
		this.IsVentilated = IsVentilated;
		this.Name = Name;
		this.Description = Description;
		this.Category = Category;
		this.Priority = Priority;
		this.OffsetDirection = OffsetDirection;
		this.OffsetValues = OffsetValues;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcMaterialLayerWithOffsets object using the given parameters.
	*
	* @param Material OPTIONAL parameter of type IfcMaterial
	* @param LayerThickness DEMANDED parameter of type IfcNonNegativeLengthMeasure - may not be null.
	* @param IsVentilated OPTIONAL parameter of type IfcLogical
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param Category OPTIONAL parameter of type IfcLabel
	* @param Priority OPTIONAL parameter of type IfcNormalisedRatioMeasure
	* @param OffsetDirection DEMANDED parameter of type IfcLayerSetDirectionEnum - may not be null.
	* @param OffsetValues DEMANDED parameter of type LIST<IfcLengthMeasure> - may not be null.
	**/
	public void setParameters(IfcMaterial Material, IfcNonNegativeLengthMeasure LayerThickness, IfcLogical IsVentilated, IfcLabel Name, IfcText Description, IfcLabel Category, IfcNormalisedRatioMeasure Priority, IfcLayerSetDirectionEnum OffsetDirection, LIST<IfcLengthMeasure> OffsetValues)
	{
		this.Material = Material;
		this.LayerThickness = LayerThickness;
		this.IsVentilated = IsVentilated;
		this.Name = Name;
		this.Description = Description;
		this.Category = Category;
		this.Priority = Priority;
		this.OffsetDirection = OffsetDirection;
		this.OffsetValues = OffsetValues;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Material = (IfcMaterial) parameters.get(0);
		this.LayerThickness = (IfcNonNegativeLengthMeasure) parameters.get(1);
		this.IsVentilated = (IfcLogical) parameters.get(2);
		this.Name = (IfcLabel) parameters.get(3);
		this.Description = (IfcText) parameters.get(4);
		this.Category = (IfcLabel) parameters.get(5);
		this.Priority = (IfcNormalisedRatioMeasure) parameters.get(6);
		this.OffsetDirection = (IfcLayerSetDirectionEnum) parameters.get(7);
		this.OffsetValues = (LIST<IfcLengthMeasure>) parameters.get(8);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcMaterialLayerWithOffsets.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCMATERIALLAYERWITHOFFSETS(");
		if(getRedefinedDerivedAttributeTypes().contains("Material")) stepString = stepString.concat("*,");
		else{
		if(this.Material != null)		stepString = stepString.concat(((RootInterface)this.Material).getStepParameter(IfcMaterial.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LayerThickness")) stepString = stepString.concat("*,");
		else{
		if(this.LayerThickness != null)		stepString = stepString.concat(((RootInterface)this.LayerThickness).getStepParameter(IfcNonNegativeLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("IsVentilated")) stepString = stepString.concat("*,");
		else{
		if(this.IsVentilated != null)		stepString = stepString.concat(((RootInterface)this.IsVentilated).getStepParameter(IfcLogical.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Category")) stepString = stepString.concat("*,");
		else{
		if(this.Category != null)		stepString = stepString.concat(((RootInterface)this.Category).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Priority")) stepString = stepString.concat("*,");
		else{
		if(this.Priority != null)		stepString = stepString.concat(((RootInterface)this.Priority).getStepParameter(IfcNormalisedRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OffsetDirection")) stepString = stepString.concat("*,");
		else{
		if(this.OffsetDirection != null)		stepString = stepString.concat(((RootInterface)this.OffsetDirection).getStepParameter(IfcLayerSetDirectionEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OffsetValues")) stepString = stepString.concat("*);");
		else{
		if(this.OffsetValues != null)		stepString = stepString.concat(((RootInterface)this.OffsetValues).getStepParameter(IfcLengthMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the OffsetDirection attribute to the given value.
	*
	* @param OffsetDirection OPTIONAL value to set
	**/
	public void setOffsetDirection(IfcLayerSetDirectionEnum OffsetDirection)
	{
		this.OffsetDirection = OffsetDirection;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the OffsetDirection attribute.
	*
	* @return the value of OffsetDirection
	/**/
	public IfcLayerSetDirectionEnum getOffsetDirection()
	{
		return this.OffsetDirection;
	}

	/**
	* This method sets the OffsetValues attribute to the given value.
	*
	* @param OffsetValues OPTIONAL value to set
	**/
	public void setOffsetValues(LIST<IfcLengthMeasure> OffsetValues)
	{
		this.OffsetValues = OffsetValues;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the OffsetValues attribute.
	*
	* @return a copy of the OffsetValues list
	**/
	public LIST<IfcLengthMeasure> getOffsetValues()
	{
		if(this.OffsetValues != null)
			return new LIST<IfcLengthMeasure>(this.OffsetValues);
		return null;
	}

	/**
	* This method adds an IfcLengthMeasure object to the OffsetValues list.
	* @param OffsetValues element to be appended to this list.
	**/
	public void addOffsetValues(IfcLengthMeasure OffsetValues)
	{
		if(this.OffsetValues == null)
			this.OffsetValues = new LIST<IfcLengthMeasure>();
		this.OffsetValues.add(OffsetValues);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcLengthMeasure objects to the OffsetValues list.
	* @param OffsetValues collection containing elements to be added to this list.
	**/
	public void addAllOffsetValues(java.util.Collection<IfcLengthMeasure> OffsetValues)
	{
		if(this.OffsetValues == null)
			this.OffsetValues = new LIST<IfcLengthMeasure>();
		this.OffsetValues.addAll(OffsetValues);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the OffsetValues list.
	**/
	public void clearOffsetValues()
	{
		if(this.OffsetValues != null)
		{
			this.OffsetValues.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcLengthMeasure object from the OffsetValues list.
	* @param OffsetValues element to be removed from this list.
	**/
	public void removeOffsetValues(IfcLengthMeasure OffsetValues)
	{
		if(this.OffsetValues != null)
		{
			this.OffsetValues.remove(OffsetValues);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcLengthMeasure objects from the OffsetValues list.
	* @param OffsetValues collection containing elements to be removed from this list.
	**/
	public void removeAllOffsetValues(java.util.Collection<IfcLengthMeasure> OffsetValues)
	{
		if(this.OffsetValues != null)
		{
			this.OffsetValues.removeAll(OffsetValues);
			fireChangeEvent();
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcMaterialLayerWithOffsets ifcMaterialLayerWithOffsets = new IfcMaterialLayerWithOffsets();
		if(this.Material != null)
			ifcMaterialLayerWithOffsets.setMaterial((IfcMaterial)this.Material.clone());
		if(this.LayerThickness != null)
			ifcMaterialLayerWithOffsets.setLayerThickness((IfcNonNegativeLengthMeasure)this.LayerThickness.clone());
		if(this.IsVentilated != null)
			ifcMaterialLayerWithOffsets.setIsVentilated((IfcLogical)this.IsVentilated.clone());
		if(this.Name != null)
			ifcMaterialLayerWithOffsets.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcMaterialLayerWithOffsets.setDescription((IfcText)this.Description.clone());
		if(this.Category != null)
			ifcMaterialLayerWithOffsets.setCategory((IfcLabel)this.Category.clone());
		if(this.Priority != null)
			ifcMaterialLayerWithOffsets.setPriority((IfcNormalisedRatioMeasure)this.Priority.clone());
		if(this.OffsetDirection != null)
			ifcMaterialLayerWithOffsets.setOffsetDirection((IfcLayerSetDirectionEnum)this.OffsetDirection.clone());
		if(this.OffsetValues != null)
			ifcMaterialLayerWithOffsets.setOffsetValues((LIST<IfcLengthMeasure>)this.OffsetValues.clone());
		return ifcMaterialLayerWithOffsets;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcMaterialLayerWithOffsets ifcMaterialLayerWithOffsets = new IfcMaterialLayerWithOffsets();
		if(this.Material != null)
			ifcMaterialLayerWithOffsets.setMaterial(this.Material);
		if(this.LayerThickness != null)
			ifcMaterialLayerWithOffsets.setLayerThickness(this.LayerThickness);
		if(this.IsVentilated != null)
			ifcMaterialLayerWithOffsets.setIsVentilated(this.IsVentilated);
		if(this.Name != null)
			ifcMaterialLayerWithOffsets.setName(this.Name);
		if(this.Description != null)
			ifcMaterialLayerWithOffsets.setDescription(this.Description);
		if(this.Category != null)
			ifcMaterialLayerWithOffsets.setCategory(this.Category);
		if(this.Priority != null)
			ifcMaterialLayerWithOffsets.setPriority(this.Priority);
		if(this.OffsetDirection != null)
			ifcMaterialLayerWithOffsets.setOffsetDirection(this.OffsetDirection);
		if(this.OffsetValues != null)
			ifcMaterialLayerWithOffsets.setOffsetValues(this.OffsetValues);
		return ifcMaterialLayerWithOffsets;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcTriangulatedFaceSet<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcTriangulatedFaceSet extends IfcTessellatedFaceSet implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcCartesianPointList3D","LIST<LIST<IfcParameterValue>>","BOOLEAN","LIST<LIST<INTEGER>>","LIST<LIST<INTEGER>>"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** CoordIndex is an DEMANDED attribute - may not be null**/
	protected LIST<LIST<INTEGER>> CoordIndex;
	/** NormalIndex is an OPTIONAL attribute**/
	protected LIST<LIST<INTEGER>> NormalIndex;
	/**
	* The default constructor.
	**/
	public IfcTriangulatedFaceSet(){}

	/**
	* Constructs a new IfcTriangulatedFaceSet object using the given parameters.
	*
	* @param Coordinates DEMANDED parameter of type IfcCartesianPointList3D - may not be null.
	* @param Normals OPTIONAL parameter of type LIST<LIST<IfcParameterValue>>
	* @param Closed OPTIONAL parameter of type BOOLEAN
	* @param CoordIndex DEMANDED parameter of type LIST<LIST<INTEGER>> - may not be null.
	* @param NormalIndex OPTIONAL parameter of type LIST<LIST<INTEGER>>
	**/
	public IfcTriangulatedFaceSet(IfcCartesianPointList3D Coordinates, LIST<LIST<IfcParameterValue>> Normals, BOOLEAN Closed, LIST<LIST<INTEGER>> CoordIndex, LIST<LIST<INTEGER>> NormalIndex)
	{
		this.Coordinates = Coordinates;
		this.Normals = Normals;
		this.Closed = Closed;
		this.CoordIndex = CoordIndex;
		this.NormalIndex = NormalIndex;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcTriangulatedFaceSet object using the given parameters.
	*
	* @param Coordinates DEMANDED parameter of type IfcCartesianPointList3D - may not be null.
	* @param Normals OPTIONAL parameter of type LIST<LIST<IfcParameterValue>>
	* @param Closed OPTIONAL parameter of type BOOLEAN
	* @param CoordIndex DEMANDED parameter of type LIST<LIST<INTEGER>> - may not be null.
	* @param NormalIndex OPTIONAL parameter of type LIST<LIST<INTEGER>>
	**/
	public void setParameters(IfcCartesianPointList3D Coordinates, LIST<LIST<IfcParameterValue>> Normals, BOOLEAN Closed, LIST<LIST<INTEGER>> CoordIndex, LIST<LIST<INTEGER>> NormalIndex)
	{
		this.Coordinates = Coordinates;
		this.Normals = Normals;
		this.Closed = Closed;
		this.CoordIndex = CoordIndex;
		this.NormalIndex = NormalIndex;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Coordinates = (IfcCartesianPointList3D) parameters.get(0);
		this.Normals = (LIST<LIST<IfcParameterValue>>) parameters.get(1);
		this.Closed = (BOOLEAN) parameters.get(2);
		this.CoordIndex = (LIST<LIST<INTEGER>>) parameters.get(3);
		this.NormalIndex = (LIST<LIST<INTEGER>>) parameters.get(4);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcTriangulatedFaceSet.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCTRIANGULATEDFACESET(");
		if(getRedefinedDerivedAttributeTypes().contains("Coordinates")) stepString = stepString.concat("*,");
		else{
		if(this.Coordinates != null)		stepString = stepString.concat(((RootInterface)this.Coordinates).getStepParameter(IfcCartesianPointList3D.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Normals")) stepString = stepString.concat("*,");
		else{
		if(this.Normals != null)		stepString = stepString.concat(((RootInterface)this.Normals).getStepParameter(LIST.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Closed")) stepString = stepString.concat("*,");
		else{
		if(this.Closed != null)		stepString = stepString.concat(((RootInterface)this.Closed).getStepParameter(BOOLEAN.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("CoordIndex")) stepString = stepString.concat("*,");
		else{
		if(this.CoordIndex != null)		stepString = stepString.concat(((RootInterface)this.CoordIndex).getStepParameter(LIST.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("NormalIndex")) stepString = stepString.concat("*);");
		else{
		if(this.NormalIndex != null)		stepString = stepString.concat(((RootInterface)this.NormalIndex).getStepParameter(LIST.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the CoordIndex attribute to the given value.
	*
	* @param CoordIndex OPTIONAL value to set
	**/
	public void setCoordIndex(LIST<LIST<INTEGER>> CoordIndex)
	{
		this.CoordIndex = CoordIndex;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the CoordIndex attribute.
	*
	* @return a copy of the CoordIndex list
	**/
	public LIST<LIST<INTEGER>> getCoordIndex()
	{
		if(this.CoordIndex != null)
			return new LIST<LIST<INTEGER>>(this.CoordIndex);
		return null;
	}

	/**
	* This method adds an LIST<INTEGER> object to the CoordIndex list.
	* @param CoordIndex element to be appended to this list.
	**/
	public void addCoordIndex(LIST<INTEGER> CoordIndex)
	{
		if(this.CoordIndex == null)
			this.CoordIndex = new LIST<LIST<INTEGER>>();
		this.CoordIndex.add(CoordIndex);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of LIST<INTEGER> objects to the CoordIndex list.
	* @param CoordIndex collection containing elements to be added to this list.
	**/
	public void addAllCoordIndex(java.util.Collection<LIST<INTEGER>> CoordIndex)
	{
		if(this.CoordIndex == null)
			this.CoordIndex = new LIST<LIST<INTEGER>>();
		this.CoordIndex.addAll(CoordIndex);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the CoordIndex list.
	**/
	public void clearCoordIndex()
	{
		if(this.CoordIndex != null)
		{
			this.CoordIndex.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an LIST<INTEGER> object from the CoordIndex list.
	* @param CoordIndex element to be removed from this list.
	**/
	public void removeCoordIndex(LIST<INTEGER> CoordIndex)
	{
		if(this.CoordIndex != null)
		{
			this.CoordIndex.remove(CoordIndex);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of LIST<INTEGER> objects from the CoordIndex list.
	* @param CoordIndex collection containing elements to be removed from this list.
	**/
	public void removeAllCoordIndex(java.util.Collection<LIST<INTEGER>> CoordIndex)
	{
		if(this.CoordIndex != null)
		{
			this.CoordIndex.removeAll(CoordIndex);
			fireChangeEvent();
		}
	}

	/**
	* This method sets the NormalIndex attribute to the given value.
	*
	* @param NormalIndex DEMANDED value to set - may not be null
	**/
	public void setNormalIndex(LIST<LIST<INTEGER>> NormalIndex)
	{
		this.NormalIndex = NormalIndex;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the NormalIndex attribute.
	*
	* @return a copy of the NormalIndex list
	**/
	public LIST<LIST<INTEGER>> getNormalIndex()
	{
		if(this.NormalIndex != null)
			return new LIST<LIST<INTEGER>>(this.NormalIndex);
		return null;
	}

	/**
	* This method adds an LIST<INTEGER> object to the NormalIndex list.
	* @param NormalIndex element to be appended to this list.
	**/
	public void addNormalIndex(LIST<INTEGER> NormalIndex)
	{
		if(this.NormalIndex == null)
			this.NormalIndex = new LIST<LIST<INTEGER>>();
		this.NormalIndex.add(NormalIndex);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of LIST<INTEGER> objects to the NormalIndex list.
	* @param NormalIndex collection containing elements to be added to this list.
	**/
	public void addAllNormalIndex(java.util.Collection<LIST<INTEGER>> NormalIndex)
	{
		if(this.NormalIndex == null)
			this.NormalIndex = new LIST<LIST<INTEGER>>();
		this.NormalIndex.addAll(NormalIndex);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the NormalIndex list.
	**/
	public void clearNormalIndex()
	{
		if(this.NormalIndex != null)
		{
			this.NormalIndex.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an LIST<INTEGER> object from the NormalIndex list.
	* @param NormalIndex element to be removed from this list.
	**/
	public void removeNormalIndex(LIST<INTEGER> NormalIndex)
	{
		if(this.NormalIndex != null)
		{
			this.NormalIndex.remove(NormalIndex);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of LIST<INTEGER> objects from the NormalIndex list.
	* @param NormalIndex collection containing elements to be removed from this list.
	**/
	public void removeAllNormalIndex(java.util.Collection<LIST<INTEGER>> NormalIndex)
	{
		if(this.NormalIndex != null)
		{
			this.NormalIndex.removeAll(NormalIndex);
			fireChangeEvent();
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcTriangulatedFaceSet ifcTriangulatedFaceSet = new IfcTriangulatedFaceSet();
		if(this.Coordinates != null)
			ifcTriangulatedFaceSet.setCoordinates((IfcCartesianPointList3D)this.Coordinates.clone());
		if(this.Normals != null)
			ifcTriangulatedFaceSet.setNormals((LIST<LIST<IfcParameterValue>>)this.Normals.clone());
		if(this.Closed != null)
			ifcTriangulatedFaceSet.setClosed((BOOLEAN)this.Closed.clone());
		if(this.CoordIndex != null)
			ifcTriangulatedFaceSet.setCoordIndex((LIST<LIST<INTEGER>>)this.CoordIndex.clone());
		if(this.NormalIndex != null)
			ifcTriangulatedFaceSet.setNormalIndex((LIST<LIST<INTEGER>>)this.NormalIndex.clone());
		return ifcTriangulatedFaceSet;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcTriangulatedFaceSet ifcTriangulatedFaceSet = new IfcTriangulatedFaceSet();
		if(this.Coordinates != null)
			ifcTriangulatedFaceSet.setCoordinates(this.Coordinates);
		if(this.Normals != null)
			ifcTriangulatedFaceSet.setNormals(this.Normals);
		if(this.Closed != null)
			ifcTriangulatedFaceSet.setClosed(this.Closed);
		if(this.CoordIndex != null)
			ifcTriangulatedFaceSet.setCoordIndex(this.CoordIndex);
		if(this.NormalIndex != null)
			ifcTriangulatedFaceSet.setNormalIndex(this.NormalIndex);
		return ifcTriangulatedFaceSet;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

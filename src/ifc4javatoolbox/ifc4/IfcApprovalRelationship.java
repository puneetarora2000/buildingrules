/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcApprovalRelationship<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcApprovalRelationship extends IfcResourceLevelRelationship implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcText","IfcApproval","SET<IfcApproval>"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** RelatingApproval is an DEMANDED attribute - may not be null**/
	protected IfcApproval RelatingApproval;
	/** RelatedApprovals is an DEMANDED attribute - may not be null**/
	protected SET<IfcApproval> RelatedApprovals;
	/**
	* The default constructor.
	**/
	public IfcApprovalRelationship(){}

	/**
	* Constructs a new IfcApprovalRelationship object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param RelatingApproval DEMANDED parameter of type IfcApproval - may not be null.
	* @param RelatedApprovals DEMANDED parameter of type SET<IfcApproval> - may not be null.
	**/
	public IfcApprovalRelationship(IfcLabel Name, IfcText Description, IfcApproval RelatingApproval, SET<IfcApproval> RelatedApprovals)
	{
		this.Name = Name;
		this.Description = Description;
		this.RelatingApproval = RelatingApproval;
		this.RelatedApprovals = RelatedApprovals;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcApprovalRelationship object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param RelatingApproval DEMANDED parameter of type IfcApproval - may not be null.
	* @param RelatedApprovals DEMANDED parameter of type SET<IfcApproval> - may not be null.
	**/
	public void setParameters(IfcLabel Name, IfcText Description, IfcApproval RelatingApproval, SET<IfcApproval> RelatedApprovals)
	{
		this.Name = Name;
		this.Description = Description;
		this.RelatingApproval = RelatingApproval;
		this.RelatedApprovals = RelatedApprovals;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.Description = (IfcText) parameters.get(1);
		this.RelatingApproval = (IfcApproval) parameters.get(2);
		this.RelatedApprovals = (SET<IfcApproval>) parameters.get(3);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
		if(RelatingApproval != null)
		{
				if(RelatingApproval.Relates_Inverse == null)
				{
					RelatingApproval.Relates_Inverse = new SET<IfcApprovalRelationship>();
				}
				RelatingApproval.Relates_Inverse.add(this);
		}
		if(RelatedApprovals != null)
		{
			for(IfcApproval RelatedApprovals$ : RelatedApprovals)
			{
				if(RelatedApprovals$.IsRelatedWith_Inverse == null)
				{
					RelatedApprovals$.IsRelatedWith_Inverse = new SET<IfcApprovalRelationship>();
				}
				RelatedApprovals$.IsRelatedWith_Inverse.add(this);
			}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcApprovalRelationship.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCAPPROVALRELATIONSHIP(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RelatingApproval")) stepString = stepString.concat("*,");
		else{
		if(this.RelatingApproval != null)		stepString = stepString.concat(((RootInterface)this.RelatingApproval).getStepParameter(IfcApproval.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RelatedApprovals")) stepString = stepString.concat("*);");
		else{
		if(this.RelatedApprovals != null)		stepString = stepString.concat(((RootInterface)this.RelatedApprovals).getStepParameter(IfcApproval.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the RelatingApproval attribute to the given value.
	*
	* @param RelatingApproval OPTIONAL value to set
	**/
	public void setRelatingApproval(IfcApproval RelatingApproval)
	{
		synchronizeInversesRemoveRelatingApproval(this.RelatingApproval);
		this.RelatingApproval = RelatingApproval;
		synchronizeInversesAddRelatingApproval(this.RelatingApproval);
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RelatingApproval attribute.
	*
	* @return the value of RelatingApproval
	/**/
	public IfcApproval getRelatingApproval()
	{
		return this.RelatingApproval;
	}

	private void synchronizeInversesAddRelatingApproval(IfcApproval RelatingApproval)
	{
		if(RelatingApproval != null)
		{
				if(RelatingApproval.Relates_Inverse == null)
				{
					RelatingApproval.Relates_Inverse = new SET<IfcApprovalRelationship>();
				}
				RelatingApproval.Relates_Inverse.add(this);
		}
	}

	private void synchronizeInversesRemoveRelatingApproval(IfcApproval RelatingApproval)
	{
		if(RelatingApproval != null)
		{
				if(RelatingApproval.Relates_Inverse != null)
				{
					RelatingApproval.Relates_Inverse.remove(this);
				}
		}
	}

	/**
	* This method sets the RelatedApprovals attribute to the given value.
	*
	* @param RelatedApprovals OPTIONAL value to set
	**/
	public void setRelatedApprovals(SET<IfcApproval> RelatedApprovals)
	{
		synchronizeInversesRemoveRelatedApprovals(this.RelatedApprovals);
		this.RelatedApprovals = RelatedApprovals;
		synchronizeInversesAddRelatedApprovals(this.RelatedApprovals);
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the set of the RelatedApprovals attribute.
	*
	* @return a copy of the RelatedApprovals set
	**/
	public SET<IfcApproval> getRelatedApprovals()
	{
		if(this.RelatedApprovals != null)
			return new SET<IfcApproval>(this.RelatedApprovals);
		return null;
	}

	/**
	* This method adds an IfcApproval object to the RelatedApprovals set.
	* @param RelatedApprovals element to be appended to this set.
	**/
	public void addRelatedApprovals(IfcApproval RelatedApprovals)
	{
		if(this.RelatedApprovals == null)
			this.RelatedApprovals = new SET<IfcApproval>();
		this.RelatedApprovals.add(RelatedApprovals);
		synchronizeInversesAddRelatedApprovals(RelatedApprovals);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcApproval objects to the RelatedApprovals set.
	* @param RelatedApprovals collection containing elements to be added to this set.
	**/
	public void addAllRelatedApprovals(java.util.Collection<IfcApproval> RelatedApprovals)
	{
		if(this.RelatedApprovals == null)
			this.RelatedApprovals = new SET<IfcApproval>();
		this.RelatedApprovals.addAll(RelatedApprovals);
		synchronizeInversesAddRelatedApprovals(RelatedApprovals);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the RelatedApprovals set.
	**/
	public void clearRelatedApprovals()
	{
		if(this.RelatedApprovals != null)
		{
			synchronizeInversesRemoveRelatedApprovals(this.RelatedApprovals);
			this.RelatedApprovals.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcApproval object from the RelatedApprovals set.
	* @param RelatedApprovals element to be removed from this set.
	**/
	public void removeRelatedApprovals(IfcApproval RelatedApprovals)
	{
		if(this.RelatedApprovals != null)
		{
			this.RelatedApprovals.remove(RelatedApprovals);
			synchronizeInversesRemoveRelatedApprovals(RelatedApprovals);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcApproval objects from the RelatedApprovals set.
	* @param RelatedApprovals collection containing elements to be removed from this set.
	**/
	public void removeAllRelatedApprovals(java.util.Collection<IfcApproval> RelatedApprovals)
	{
		if(this.RelatedApprovals != null)
		{
			this.RelatedApprovals.removeAll(RelatedApprovals);
			synchronizeInversesRemoveRelatedApprovals(RelatedApprovals);
			fireChangeEvent();
		}
	}

	private void synchronizeInversesAddRelatedApprovals(IfcApproval RelatedApprovals)
	{
		if(RelatedApprovals != null)
		{
				if(RelatedApprovals.IsRelatedWith_Inverse == null)
				{
					RelatedApprovals.IsRelatedWith_Inverse = new SET<IfcApprovalRelationship>();
				}
				RelatedApprovals.IsRelatedWith_Inverse.add(this);
		}
	}

	private void synchronizeInversesAddRelatedApprovals(java.util.Collection<IfcApproval> RelatedApprovals)
	{
		if(RelatedApprovals != null)
		{
			for(IfcApproval RelatedApprovals$ : RelatedApprovals)
			{
				synchronizeInversesAddRelatedApprovals(RelatedApprovals$);
			}
		}
	}

	private void synchronizeInversesRemoveRelatedApprovals(IfcApproval RelatedApprovals)
	{
		if(RelatedApprovals != null)
		{
				if(RelatedApprovals.IsRelatedWith_Inverse != null)
				{
					RelatedApprovals.IsRelatedWith_Inverse.remove(this);
				}
		}
	}

	private void synchronizeInversesRemoveRelatedApprovals(java.util.Collection<IfcApproval> RelatedApprovals)
	{
		if(RelatedApprovals != null)
		{
			for(IfcApproval RelatedApprovals$ : RelatedApprovals)
			{
				synchronizeInversesRemoveRelatedApprovals(RelatedApprovals$);
			}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcApprovalRelationship ifcApprovalRelationship = new IfcApprovalRelationship();
		if(this.Name != null)
			ifcApprovalRelationship.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcApprovalRelationship.setDescription((IfcText)this.Description.clone());
		if(this.RelatingApproval != null)
			ifcApprovalRelationship.setRelatingApproval((IfcApproval)this.RelatingApproval.clone());
		if(this.RelatedApprovals != null)
			ifcApprovalRelationship.setRelatedApprovals((SET<IfcApproval>)this.RelatedApprovals.clone());
		return ifcApprovalRelationship;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcApprovalRelationship ifcApprovalRelationship = new IfcApprovalRelationship();
		if(this.Name != null)
			ifcApprovalRelationship.setName(this.Name);
		if(this.Description != null)
			ifcApprovalRelationship.setDescription(this.Description);
		if(this.RelatingApproval != null)
			ifcApprovalRelationship.setRelatingApproval(this.RelatingApproval);
		if(this.RelatedApprovals != null)
			ifcApprovalRelationship.setRelatedApprovals(this.RelatedApprovals);
		return ifcApprovalRelationship;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

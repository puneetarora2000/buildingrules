/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcReinforcingMeshType<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcReinforcingMeshType extends IfcReinforcingElementType implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcGloballyUniqueId","IfcOwnerHistory","IfcLabel","IfcText","IfcIdentifier","SET<IfcPropertySetDefinition>","LIST<IfcRepresentationMap>","IfcLabel","IfcLabel","IfcReinforcingMeshTypeEnum","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcAreaMeasure","IfcAreaMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcLabel","LIST<IfcBendingParameterSelect>"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** PredefinedType is an DEMANDED attribute - may not be null**/
	protected IfcReinforcingMeshTypeEnum PredefinedType;
	/** MeshLength is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure MeshLength;
	/** MeshWidth is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure MeshWidth;
	/** LongitudinalBarNominalDiameter is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure LongitudinalBarNominalDiameter;
	/** TransverseBarNominalDiameter is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure TransverseBarNominalDiameter;
	/** LongitudinalBarCrossSectionArea is an OPTIONAL attribute**/
	protected IfcAreaMeasure LongitudinalBarCrossSectionArea;
	/** TransverseBarCrossSectionArea is an OPTIONAL attribute**/
	protected IfcAreaMeasure TransverseBarCrossSectionArea;
	/** LongitudinalBarSpacing is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure LongitudinalBarSpacing;
	/** TransverseBarSpacing is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure TransverseBarSpacing;
	/** BendingShapeCode is an OPTIONAL attribute**/
	protected IfcLabel BendingShapeCode;
	/** BendingParameters is an OPTIONAL attribute**/
	protected LIST<IfcBendingParameterSelect> BendingParameters;
	/**
	* The default constructor.
	**/
	public IfcReinforcingMeshType(){}

	/**
	* Constructs a new IfcReinforcingMeshType object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory OPTIONAL parameter of type IfcOwnerHistory
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ApplicableOccurrence OPTIONAL parameter of type IfcIdentifier
	* @param HasPropertySets OPTIONAL parameter of type SET<IfcPropertySetDefinition>
	* @param RepresentationMaps OPTIONAL parameter of type LIST<IfcRepresentationMap>
	* @param Tag OPTIONAL parameter of type IfcLabel
	* @param ElementType OPTIONAL parameter of type IfcLabel
	* @param PredefinedType DEMANDED parameter of type IfcReinforcingMeshTypeEnum - may not be null.
	* @param MeshLength OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param MeshWidth OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param LongitudinalBarNominalDiameter OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param TransverseBarNominalDiameter OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param LongitudinalBarCrossSectionArea OPTIONAL parameter of type IfcAreaMeasure
	* @param TransverseBarCrossSectionArea OPTIONAL parameter of type IfcAreaMeasure
	* @param LongitudinalBarSpacing OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param TransverseBarSpacing OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param BendingShapeCode OPTIONAL parameter of type IfcLabel
	* @param BendingParameters OPTIONAL parameter of type LIST<IfcBendingParameterSelect>
	**/
	public IfcReinforcingMeshType(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, SET<IfcPropertySetDefinition> HasPropertySets, LIST<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcReinforcingMeshTypeEnum PredefinedType, IfcPositiveLengthMeasure MeshLength, IfcPositiveLengthMeasure MeshWidth, IfcPositiveLengthMeasure LongitudinalBarNominalDiameter, IfcPositiveLengthMeasure TransverseBarNominalDiameter, IfcAreaMeasure LongitudinalBarCrossSectionArea, IfcAreaMeasure TransverseBarCrossSectionArea, IfcPositiveLengthMeasure LongitudinalBarSpacing, IfcPositiveLengthMeasure TransverseBarSpacing, IfcLabel BendingShapeCode, LIST<IfcBendingParameterSelect> BendingParameters)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.MeshLength = MeshLength;
		this.MeshWidth = MeshWidth;
		this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
		this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
		this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
		this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
		this.LongitudinalBarSpacing = LongitudinalBarSpacing;
		this.TransverseBarSpacing = TransverseBarSpacing;
		this.BendingShapeCode = BendingShapeCode;
		this.BendingParameters = BendingParameters;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcReinforcingMeshType object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory OPTIONAL parameter of type IfcOwnerHistory
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param ApplicableOccurrence OPTIONAL parameter of type IfcIdentifier
	* @param HasPropertySets OPTIONAL parameter of type SET<IfcPropertySetDefinition>
	* @param RepresentationMaps OPTIONAL parameter of type LIST<IfcRepresentationMap>
	* @param Tag OPTIONAL parameter of type IfcLabel
	* @param ElementType OPTIONAL parameter of type IfcLabel
	* @param PredefinedType DEMANDED parameter of type IfcReinforcingMeshTypeEnum - may not be null.
	* @param MeshLength OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param MeshWidth OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param LongitudinalBarNominalDiameter OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param TransverseBarNominalDiameter OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param LongitudinalBarCrossSectionArea OPTIONAL parameter of type IfcAreaMeasure
	* @param TransverseBarCrossSectionArea OPTIONAL parameter of type IfcAreaMeasure
	* @param LongitudinalBarSpacing OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param TransverseBarSpacing OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param BendingShapeCode OPTIONAL parameter of type IfcLabel
	* @param BendingParameters OPTIONAL parameter of type LIST<IfcBendingParameterSelect>
	**/
	public void setParameters(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcIdentifier ApplicableOccurrence, SET<IfcPropertySetDefinition> HasPropertySets, LIST<IfcRepresentationMap> RepresentationMaps, IfcLabel Tag, IfcLabel ElementType, IfcReinforcingMeshTypeEnum PredefinedType, IfcPositiveLengthMeasure MeshLength, IfcPositiveLengthMeasure MeshWidth, IfcPositiveLengthMeasure LongitudinalBarNominalDiameter, IfcPositiveLengthMeasure TransverseBarNominalDiameter, IfcAreaMeasure LongitudinalBarCrossSectionArea, IfcAreaMeasure TransverseBarCrossSectionArea, IfcPositiveLengthMeasure LongitudinalBarSpacing, IfcPositiveLengthMeasure TransverseBarSpacing, IfcLabel BendingShapeCode, LIST<IfcBendingParameterSelect> BendingParameters)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.MeshLength = MeshLength;
		this.MeshWidth = MeshWidth;
		this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
		this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
		this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
		this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
		this.LongitudinalBarSpacing = LongitudinalBarSpacing;
		this.TransverseBarSpacing = TransverseBarSpacing;
		this.BendingShapeCode = BendingShapeCode;
		this.BendingParameters = BendingParameters;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.GlobalId = (IfcGloballyUniqueId) parameters.get(0);
		this.OwnerHistory = (IfcOwnerHistory) parameters.get(1);
		this.Name = (IfcLabel) parameters.get(2);
		this.Description = (IfcText) parameters.get(3);
		this.ApplicableOccurrence = (IfcIdentifier) parameters.get(4);
		this.HasPropertySets = (SET<IfcPropertySetDefinition>) parameters.get(5);
		this.RepresentationMaps = (LIST<IfcRepresentationMap>) parameters.get(6);
		this.Tag = (IfcLabel) parameters.get(7);
		this.ElementType = (IfcLabel) parameters.get(8);
		this.PredefinedType = (IfcReinforcingMeshTypeEnum) parameters.get(9);
		this.MeshLength = (IfcPositiveLengthMeasure) parameters.get(10);
		this.MeshWidth = (IfcPositiveLengthMeasure) parameters.get(11);
		this.LongitudinalBarNominalDiameter = (IfcPositiveLengthMeasure) parameters.get(12);
		this.TransverseBarNominalDiameter = (IfcPositiveLengthMeasure) parameters.get(13);
		this.LongitudinalBarCrossSectionArea = (IfcAreaMeasure) parameters.get(14);
		this.TransverseBarCrossSectionArea = (IfcAreaMeasure) parameters.get(15);
		this.LongitudinalBarSpacing = (IfcPositiveLengthMeasure) parameters.get(16);
		this.TransverseBarSpacing = (IfcPositiveLengthMeasure) parameters.get(17);
		this.BendingShapeCode = (IfcLabel) parameters.get(18);
		this.BendingParameters = (LIST<IfcBendingParameterSelect>) parameters.get(19);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
		if(HasPropertySets != null)
		{
			for(IfcPropertySetDefinition HasPropertySets$ : HasPropertySets)
			{
				if(HasPropertySets$.DefinesType_Inverse == null)
				{
					HasPropertySets$.DefinesType_Inverse = new SET<IfcTypeObject>();
				}
				HasPropertySets$.DefinesType_Inverse.add(this);
			}
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcReinforcingMeshType.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCREINFORCINGMESHTYPE(");
		if(getRedefinedDerivedAttributeTypes().contains("GlobalId")) stepString = stepString.concat("*,");
		else{
		if(this.GlobalId != null)		stepString = stepString.concat(((RootInterface)this.GlobalId).getStepParameter(IfcGloballyUniqueId.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OwnerHistory")) stepString = stepString.concat("*,");
		else{
		if(this.OwnerHistory != null)		stepString = stepString.concat(((RootInterface)this.OwnerHistory).getStepParameter(IfcOwnerHistory.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ApplicableOccurrence")) stepString = stepString.concat("*,");
		else{
		if(this.ApplicableOccurrence != null)		stepString = stepString.concat(((RootInterface)this.ApplicableOccurrence).getStepParameter(IfcIdentifier.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("HasPropertySets")) stepString = stepString.concat("*,");
		else{
		if(this.HasPropertySets != null)		stepString = stepString.concat(((RootInterface)this.HasPropertySets).getStepParameter(IfcPropertySetDefinition.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RepresentationMaps")) stepString = stepString.concat("*,");
		else{
		if(this.RepresentationMaps != null)		stepString = stepString.concat(((RootInterface)this.RepresentationMaps).getStepParameter(IfcRepresentationMap.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Tag")) stepString = stepString.concat("*,");
		else{
		if(this.Tag != null)		stepString = stepString.concat(((RootInterface)this.Tag).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ElementType")) stepString = stepString.concat("*,");
		else{
		if(this.ElementType != null)		stepString = stepString.concat(((RootInterface)this.ElementType).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("PredefinedType")) stepString = stepString.concat("*,");
		else{
		if(this.PredefinedType != null)		stepString = stepString.concat(((RootInterface)this.PredefinedType).getStepParameter(IfcReinforcingMeshTypeEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MeshLength")) stepString = stepString.concat("*,");
		else{
		if(this.MeshLength != null)		stepString = stepString.concat(((RootInterface)this.MeshLength).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("MeshWidth")) stepString = stepString.concat("*,");
		else{
		if(this.MeshWidth != null)		stepString = stepString.concat(((RootInterface)this.MeshWidth).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LongitudinalBarNominalDiameter")) stepString = stepString.concat("*,");
		else{
		if(this.LongitudinalBarNominalDiameter != null)		stepString = stepString.concat(((RootInterface)this.LongitudinalBarNominalDiameter).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TransverseBarNominalDiameter")) stepString = stepString.concat("*,");
		else{
		if(this.TransverseBarNominalDiameter != null)		stepString = stepString.concat(((RootInterface)this.TransverseBarNominalDiameter).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LongitudinalBarCrossSectionArea")) stepString = stepString.concat("*,");
		else{
		if(this.LongitudinalBarCrossSectionArea != null)		stepString = stepString.concat(((RootInterface)this.LongitudinalBarCrossSectionArea).getStepParameter(IfcAreaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TransverseBarCrossSectionArea")) stepString = stepString.concat("*,");
		else{
		if(this.TransverseBarCrossSectionArea != null)		stepString = stepString.concat(((RootInterface)this.TransverseBarCrossSectionArea).getStepParameter(IfcAreaMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("LongitudinalBarSpacing")) stepString = stepString.concat("*,");
		else{
		if(this.LongitudinalBarSpacing != null)		stepString = stepString.concat(((RootInterface)this.LongitudinalBarSpacing).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TransverseBarSpacing")) stepString = stepString.concat("*,");
		else{
		if(this.TransverseBarSpacing != null)		stepString = stepString.concat(((RootInterface)this.TransverseBarSpacing).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("BendingShapeCode")) stepString = stepString.concat("*,");
		else{
		if(this.BendingShapeCode != null)		stepString = stepString.concat(((RootInterface)this.BendingShapeCode).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("BendingParameters")) stepString = stepString.concat("*);");
		else{
		if(this.BendingParameters != null)		stepString = stepString.concat(((RootInterface)this.BendingParameters).getStepParameter(IfcBendingParameterSelect.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the PredefinedType attribute to the given value.
	*
	* @param PredefinedType OPTIONAL value to set
	**/
	public void setPredefinedType(IfcReinforcingMeshTypeEnum PredefinedType)
	{
		this.PredefinedType = PredefinedType;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the PredefinedType attribute.
	*
	* @return the value of PredefinedType
	/**/
	public IfcReinforcingMeshTypeEnum getPredefinedType()
	{
		return this.PredefinedType;
	}

	/**
	* This method sets the MeshLength attribute to the given value.
	*
	* @param MeshLength DEMANDED value to set - may not be null
	**/
	public void setMeshLength(IfcPositiveLengthMeasure MeshLength)
	{
		this.MeshLength = MeshLength;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MeshLength attribute.
	*
	* @return the value of MeshLength
	/**/
	public IfcPositiveLengthMeasure getMeshLength()
	{
		return this.MeshLength;
	}

	/**
	* This method sets the MeshWidth attribute to the given value.
	*
	* @param MeshWidth DEMANDED value to set - may not be null
	**/
	public void setMeshWidth(IfcPositiveLengthMeasure MeshWidth)
	{
		this.MeshWidth = MeshWidth;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the MeshWidth attribute.
	*
	* @return the value of MeshWidth
	/**/
	public IfcPositiveLengthMeasure getMeshWidth()
	{
		return this.MeshWidth;
	}

	/**
	* This method sets the LongitudinalBarNominalDiameter attribute to the given value.
	*
	* @param LongitudinalBarNominalDiameter DEMANDED value to set - may not be null
	**/
	public void setLongitudinalBarNominalDiameter(IfcPositiveLengthMeasure LongitudinalBarNominalDiameter)
	{
		this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LongitudinalBarNominalDiameter attribute.
	*
	* @return the value of LongitudinalBarNominalDiameter
	/**/
	public IfcPositiveLengthMeasure getLongitudinalBarNominalDiameter()
	{
		return this.LongitudinalBarNominalDiameter;
	}

	/**
	* This method sets the TransverseBarNominalDiameter attribute to the given value.
	*
	* @param TransverseBarNominalDiameter DEMANDED value to set - may not be null
	**/
	public void setTransverseBarNominalDiameter(IfcPositiveLengthMeasure TransverseBarNominalDiameter)
	{
		this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TransverseBarNominalDiameter attribute.
	*
	* @return the value of TransverseBarNominalDiameter
	/**/
	public IfcPositiveLengthMeasure getTransverseBarNominalDiameter()
	{
		return this.TransverseBarNominalDiameter;
	}

	/**
	* This method sets the LongitudinalBarCrossSectionArea attribute to the given value.
	*
	* @param LongitudinalBarCrossSectionArea DEMANDED value to set - may not be null
	**/
	public void setLongitudinalBarCrossSectionArea(IfcAreaMeasure LongitudinalBarCrossSectionArea)
	{
		this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LongitudinalBarCrossSectionArea attribute.
	*
	* @return the value of LongitudinalBarCrossSectionArea
	/**/
	public IfcAreaMeasure getLongitudinalBarCrossSectionArea()
	{
		return this.LongitudinalBarCrossSectionArea;
	}

	/**
	* This method sets the TransverseBarCrossSectionArea attribute to the given value.
	*
	* @param TransverseBarCrossSectionArea DEMANDED value to set - may not be null
	**/
	public void setTransverseBarCrossSectionArea(IfcAreaMeasure TransverseBarCrossSectionArea)
	{
		this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TransverseBarCrossSectionArea attribute.
	*
	* @return the value of TransverseBarCrossSectionArea
	/**/
	public IfcAreaMeasure getTransverseBarCrossSectionArea()
	{
		return this.TransverseBarCrossSectionArea;
	}

	/**
	* This method sets the LongitudinalBarSpacing attribute to the given value.
	*
	* @param LongitudinalBarSpacing DEMANDED value to set - may not be null
	**/
	public void setLongitudinalBarSpacing(IfcPositiveLengthMeasure LongitudinalBarSpacing)
	{
		this.LongitudinalBarSpacing = LongitudinalBarSpacing;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the LongitudinalBarSpacing attribute.
	*
	* @return the value of LongitudinalBarSpacing
	/**/
	public IfcPositiveLengthMeasure getLongitudinalBarSpacing()
	{
		return this.LongitudinalBarSpacing;
	}

	/**
	* This method sets the TransverseBarSpacing attribute to the given value.
	*
	* @param TransverseBarSpacing DEMANDED value to set - may not be null
	**/
	public void setTransverseBarSpacing(IfcPositiveLengthMeasure TransverseBarSpacing)
	{
		this.TransverseBarSpacing = TransverseBarSpacing;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TransverseBarSpacing attribute.
	*
	* @return the value of TransverseBarSpacing
	/**/
	public IfcPositiveLengthMeasure getTransverseBarSpacing()
	{
		return this.TransverseBarSpacing;
	}

	/**
	* This method sets the BendingShapeCode attribute to the given value.
	*
	* @param BendingShapeCode DEMANDED value to set - may not be null
	**/
	public void setBendingShapeCode(IfcLabel BendingShapeCode)
	{
		this.BendingShapeCode = BendingShapeCode;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the BendingShapeCode attribute.
	*
	* @return the value of BendingShapeCode
	/**/
	public IfcLabel getBendingShapeCode()
	{
		return this.BendingShapeCode;
	}

	/**
	* This method sets the BendingParameters attribute to the given value.
	*
	* @param BendingParameters DEMANDED value to set - may not be null
	**/
	public void setBendingParameters(LIST<IfcBendingParameterSelect> BendingParameters)
	{
		this.BendingParameters = BendingParameters;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the BendingParameters attribute.
	*
	* @return a copy of the BendingParameters list
	**/
	public LIST<IfcBendingParameterSelect> getBendingParameters()
	{
		if(this.BendingParameters != null)
			return new LIST<IfcBendingParameterSelect>(this.BendingParameters);
		return null;
	}

	/**
	* This method adds an IfcBendingParameterSelect object to the BendingParameters list.
	* @param BendingParameters element to be appended to this list.
	**/
	public void addBendingParameters(IfcBendingParameterSelect BendingParameters)
	{
		if(this.BendingParameters == null)
			this.BendingParameters = new LIST<IfcBendingParameterSelect>();
		this.BendingParameters.add(BendingParameters);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of IfcBendingParameterSelect objects to the BendingParameters list.
	* @param BendingParameters collection containing elements to be added to this list.
	**/
	public void addAllBendingParameters(java.util.Collection<IfcBendingParameterSelect> BendingParameters)
	{
		if(this.BendingParameters == null)
			this.BendingParameters = new LIST<IfcBendingParameterSelect>();
		this.BendingParameters.addAll(BendingParameters);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the BendingParameters list.
	**/
	public void clearBendingParameters()
	{
		if(this.BendingParameters != null)
		{
			this.BendingParameters.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an IfcBendingParameterSelect object from the BendingParameters list.
	* @param BendingParameters element to be removed from this list.
	**/
	public void removeBendingParameters(IfcBendingParameterSelect BendingParameters)
	{
		if(this.BendingParameters != null)
		{
			this.BendingParameters.remove(BendingParameters);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of IfcBendingParameterSelect objects from the BendingParameters list.
	* @param BendingParameters collection containing elements to be removed from this list.
	**/
	public void removeAllBendingParameters(java.util.Collection<IfcBendingParameterSelect> BendingParameters)
	{
		if(this.BendingParameters != null)
		{
			this.BendingParameters.removeAll(BendingParameters);
			fireChangeEvent();
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcReinforcingMeshType ifcReinforcingMeshType = new IfcReinforcingMeshType();
		if(this.GlobalId != null)
			ifcReinforcingMeshType.setGlobalId((IfcGloballyUniqueId)this.GlobalId.clone());
		if(this.OwnerHistory != null)
			ifcReinforcingMeshType.setOwnerHistory((IfcOwnerHistory)this.OwnerHistory.clone());
		if(this.Name != null)
			ifcReinforcingMeshType.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcReinforcingMeshType.setDescription((IfcText)this.Description.clone());
		if(this.ApplicableOccurrence != null)
			ifcReinforcingMeshType.setApplicableOccurrence((IfcIdentifier)this.ApplicableOccurrence.clone());
		if(this.HasPropertySets != null)
			ifcReinforcingMeshType.setHasPropertySets((SET<IfcPropertySetDefinition>)this.HasPropertySets.clone());
		if(this.RepresentationMaps != null)
			ifcReinforcingMeshType.setRepresentationMaps((LIST<IfcRepresentationMap>)this.RepresentationMaps.clone());
		if(this.Tag != null)
			ifcReinforcingMeshType.setTag((IfcLabel)this.Tag.clone());
		if(this.ElementType != null)
			ifcReinforcingMeshType.setElementType((IfcLabel)this.ElementType.clone());
		if(this.PredefinedType != null)
			ifcReinforcingMeshType.setPredefinedType((IfcReinforcingMeshTypeEnum)this.PredefinedType.clone());
		if(this.MeshLength != null)
			ifcReinforcingMeshType.setMeshLength((IfcPositiveLengthMeasure)this.MeshLength.clone());
		if(this.MeshWidth != null)
			ifcReinforcingMeshType.setMeshWidth((IfcPositiveLengthMeasure)this.MeshWidth.clone());
		if(this.LongitudinalBarNominalDiameter != null)
			ifcReinforcingMeshType.setLongitudinalBarNominalDiameter((IfcPositiveLengthMeasure)this.LongitudinalBarNominalDiameter.clone());
		if(this.TransverseBarNominalDiameter != null)
			ifcReinforcingMeshType.setTransverseBarNominalDiameter((IfcPositiveLengthMeasure)this.TransverseBarNominalDiameter.clone());
		if(this.LongitudinalBarCrossSectionArea != null)
			ifcReinforcingMeshType.setLongitudinalBarCrossSectionArea((IfcAreaMeasure)this.LongitudinalBarCrossSectionArea.clone());
		if(this.TransverseBarCrossSectionArea != null)
			ifcReinforcingMeshType.setTransverseBarCrossSectionArea((IfcAreaMeasure)this.TransverseBarCrossSectionArea.clone());
		if(this.LongitudinalBarSpacing != null)
			ifcReinforcingMeshType.setLongitudinalBarSpacing((IfcPositiveLengthMeasure)this.LongitudinalBarSpacing.clone());
		if(this.TransverseBarSpacing != null)
			ifcReinforcingMeshType.setTransverseBarSpacing((IfcPositiveLengthMeasure)this.TransverseBarSpacing.clone());
		if(this.BendingShapeCode != null)
			ifcReinforcingMeshType.setBendingShapeCode((IfcLabel)this.BendingShapeCode.clone());
		if(this.BendingParameters != null)
			ifcReinforcingMeshType.setBendingParameters((LIST<IfcBendingParameterSelect>)this.BendingParameters.clone());
		return ifcReinforcingMeshType;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcReinforcingMeshType ifcReinforcingMeshType = new IfcReinforcingMeshType();
		if(this.GlobalId != null)
			ifcReinforcingMeshType.setGlobalId(this.GlobalId);
		if(this.OwnerHistory != null)
			ifcReinforcingMeshType.setOwnerHistory(this.OwnerHistory);
		if(this.Name != null)
			ifcReinforcingMeshType.setName(this.Name);
		if(this.Description != null)
			ifcReinforcingMeshType.setDescription(this.Description);
		if(this.ApplicableOccurrence != null)
			ifcReinforcingMeshType.setApplicableOccurrence(this.ApplicableOccurrence);
		if(this.HasPropertySets != null)
			ifcReinforcingMeshType.setHasPropertySets(this.HasPropertySets);
		if(this.RepresentationMaps != null)
			ifcReinforcingMeshType.setRepresentationMaps(this.RepresentationMaps);
		if(this.Tag != null)
			ifcReinforcingMeshType.setTag(this.Tag);
		if(this.ElementType != null)
			ifcReinforcingMeshType.setElementType(this.ElementType);
		if(this.PredefinedType != null)
			ifcReinforcingMeshType.setPredefinedType(this.PredefinedType);
		if(this.MeshLength != null)
			ifcReinforcingMeshType.setMeshLength(this.MeshLength);
		if(this.MeshWidth != null)
			ifcReinforcingMeshType.setMeshWidth(this.MeshWidth);
		if(this.LongitudinalBarNominalDiameter != null)
			ifcReinforcingMeshType.setLongitudinalBarNominalDiameter(this.LongitudinalBarNominalDiameter);
		if(this.TransverseBarNominalDiameter != null)
			ifcReinforcingMeshType.setTransverseBarNominalDiameter(this.TransverseBarNominalDiameter);
		if(this.LongitudinalBarCrossSectionArea != null)
			ifcReinforcingMeshType.setLongitudinalBarCrossSectionArea(this.LongitudinalBarCrossSectionArea);
		if(this.TransverseBarCrossSectionArea != null)
			ifcReinforcingMeshType.setTransverseBarCrossSectionArea(this.TransverseBarCrossSectionArea);
		if(this.LongitudinalBarSpacing != null)
			ifcReinforcingMeshType.setLongitudinalBarSpacing(this.LongitudinalBarSpacing);
		if(this.TransverseBarSpacing != null)
			ifcReinforcingMeshType.setTransverseBarSpacing(this.TransverseBarSpacing);
		if(this.BendingShapeCode != null)
			ifcReinforcingMeshType.setBendingShapeCode(this.BendingShapeCode);
		if(this.BendingParameters != null)
			ifcReinforcingMeshType.setBendingParameters(this.BendingParameters);
		return ifcReinforcingMeshType;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

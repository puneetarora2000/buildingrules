/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcAsymmetricIShapeProfileDef<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcAsymmetricIShapeProfileDef extends IfcParameterizedProfileDef implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcProfileTypeEnum","IfcLabel","IfcAxis2Placement2D","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcNonNegativeLengthMeasure","IfcPositiveLengthMeasure","IfcPositiveLengthMeasure","IfcNonNegativeLengthMeasure","IfcNonNegativeLengthMeasure","IfcPlaneAngleMeasure","IfcNonNegativeLengthMeasure","IfcPlaneAngleMeasure"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** BottomFlangeWidth is an DEMANDED attribute - may not be null**/
	protected IfcPositiveLengthMeasure BottomFlangeWidth;
	/** OverallDepth is an DEMANDED attribute - may not be null**/
	protected IfcPositiveLengthMeasure OverallDepth;
	/** WebThickness is an DEMANDED attribute - may not be null**/
	protected IfcPositiveLengthMeasure WebThickness;
	/** BottomFlangeThickness is an DEMANDED attribute - may not be null**/
	protected IfcPositiveLengthMeasure BottomFlangeThickness;
	/** BottomFlangeFilletRadius is an OPTIONAL attribute**/
	protected IfcNonNegativeLengthMeasure BottomFlangeFilletRadius;
	/** TopFlangeWidth is an DEMANDED attribute - may not be null**/
	protected IfcPositiveLengthMeasure TopFlangeWidth;
	/** TopFlangeThickness is an OPTIONAL attribute**/
	protected IfcPositiveLengthMeasure TopFlangeThickness;
	/** TopFlangeFilletRadius is an OPTIONAL attribute**/
	protected IfcNonNegativeLengthMeasure TopFlangeFilletRadius;
	/** BottomFlangeEdgeRadius is an OPTIONAL attribute**/
	protected IfcNonNegativeLengthMeasure BottomFlangeEdgeRadius;
	/** BottomFlangeSlope is an OPTIONAL attribute**/
	protected IfcPlaneAngleMeasure BottomFlangeSlope;
	/** TopFlangeEdgeRadius is an OPTIONAL attribute**/
	protected IfcNonNegativeLengthMeasure TopFlangeEdgeRadius;
	/** TopFlangeSlope is an OPTIONAL attribute**/
	protected IfcPlaneAngleMeasure TopFlangeSlope;
	/**
	* The default constructor.
	**/
	public IfcAsymmetricIShapeProfileDef(){}

	/**
	* Constructs a new IfcAsymmetricIShapeProfileDef object using the given parameters.
	*
	* @param ProfileType DEMANDED parameter of type IfcProfileTypeEnum - may not be null.
	* @param ProfileName OPTIONAL parameter of type IfcLabel
	* @param Position OPTIONAL parameter of type IfcAxis2Placement2D
	* @param BottomFlangeWidth DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param OverallDepth DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param WebThickness DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param BottomFlangeThickness DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param BottomFlangeFilletRadius OPTIONAL parameter of type IfcNonNegativeLengthMeasure
	* @param TopFlangeWidth DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param TopFlangeThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param TopFlangeFilletRadius OPTIONAL parameter of type IfcNonNegativeLengthMeasure
	* @param BottomFlangeEdgeRadius OPTIONAL parameter of type IfcNonNegativeLengthMeasure
	* @param BottomFlangeSlope OPTIONAL parameter of type IfcPlaneAngleMeasure
	* @param TopFlangeEdgeRadius OPTIONAL parameter of type IfcNonNegativeLengthMeasure
	* @param TopFlangeSlope OPTIONAL parameter of type IfcPlaneAngleMeasure
	**/
	public IfcAsymmetricIShapeProfileDef(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure BottomFlangeWidth, IfcPositiveLengthMeasure OverallDepth, IfcPositiveLengthMeasure WebThickness, IfcPositiveLengthMeasure BottomFlangeThickness, IfcNonNegativeLengthMeasure BottomFlangeFilletRadius, IfcPositiveLengthMeasure TopFlangeWidth, IfcPositiveLengthMeasure TopFlangeThickness, IfcNonNegativeLengthMeasure TopFlangeFilletRadius, IfcNonNegativeLengthMeasure BottomFlangeEdgeRadius, IfcPlaneAngleMeasure BottomFlangeSlope, IfcNonNegativeLengthMeasure TopFlangeEdgeRadius, IfcPlaneAngleMeasure TopFlangeSlope)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.BottomFlangeWidth = BottomFlangeWidth;
		this.OverallDepth = OverallDepth;
		this.WebThickness = WebThickness;
		this.BottomFlangeThickness = BottomFlangeThickness;
		this.BottomFlangeFilletRadius = BottomFlangeFilletRadius;
		this.TopFlangeWidth = TopFlangeWidth;
		this.TopFlangeThickness = TopFlangeThickness;
		this.TopFlangeFilletRadius = TopFlangeFilletRadius;
		this.BottomFlangeEdgeRadius = BottomFlangeEdgeRadius;
		this.BottomFlangeSlope = BottomFlangeSlope;
		this.TopFlangeEdgeRadius = TopFlangeEdgeRadius;
		this.TopFlangeSlope = TopFlangeSlope;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcAsymmetricIShapeProfileDef object using the given parameters.
	*
	* @param ProfileType DEMANDED parameter of type IfcProfileTypeEnum - may not be null.
	* @param ProfileName OPTIONAL parameter of type IfcLabel
	* @param Position OPTIONAL parameter of type IfcAxis2Placement2D
	* @param BottomFlangeWidth DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param OverallDepth DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param WebThickness DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param BottomFlangeThickness DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param BottomFlangeFilletRadius OPTIONAL parameter of type IfcNonNegativeLengthMeasure
	* @param TopFlangeWidth DEMANDED parameter of type IfcPositiveLengthMeasure - may not be null.
	* @param TopFlangeThickness OPTIONAL parameter of type IfcPositiveLengthMeasure
	* @param TopFlangeFilletRadius OPTIONAL parameter of type IfcNonNegativeLengthMeasure
	* @param BottomFlangeEdgeRadius OPTIONAL parameter of type IfcNonNegativeLengthMeasure
	* @param BottomFlangeSlope OPTIONAL parameter of type IfcPlaneAngleMeasure
	* @param TopFlangeEdgeRadius OPTIONAL parameter of type IfcNonNegativeLengthMeasure
	* @param TopFlangeSlope OPTIONAL parameter of type IfcPlaneAngleMeasure
	**/
	public void setParameters(IfcProfileTypeEnum ProfileType, IfcLabel ProfileName, IfcAxis2Placement2D Position, IfcPositiveLengthMeasure BottomFlangeWidth, IfcPositiveLengthMeasure OverallDepth, IfcPositiveLengthMeasure WebThickness, IfcPositiveLengthMeasure BottomFlangeThickness, IfcNonNegativeLengthMeasure BottomFlangeFilletRadius, IfcPositiveLengthMeasure TopFlangeWidth, IfcPositiveLengthMeasure TopFlangeThickness, IfcNonNegativeLengthMeasure TopFlangeFilletRadius, IfcNonNegativeLengthMeasure BottomFlangeEdgeRadius, IfcPlaneAngleMeasure BottomFlangeSlope, IfcNonNegativeLengthMeasure TopFlangeEdgeRadius, IfcPlaneAngleMeasure TopFlangeSlope)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.BottomFlangeWidth = BottomFlangeWidth;
		this.OverallDepth = OverallDepth;
		this.WebThickness = WebThickness;
		this.BottomFlangeThickness = BottomFlangeThickness;
		this.BottomFlangeFilletRadius = BottomFlangeFilletRadius;
		this.TopFlangeWidth = TopFlangeWidth;
		this.TopFlangeThickness = TopFlangeThickness;
		this.TopFlangeFilletRadius = TopFlangeFilletRadius;
		this.BottomFlangeEdgeRadius = BottomFlangeEdgeRadius;
		this.BottomFlangeSlope = BottomFlangeSlope;
		this.TopFlangeEdgeRadius = TopFlangeEdgeRadius;
		this.TopFlangeSlope = TopFlangeSlope;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.ProfileType = (IfcProfileTypeEnum) parameters.get(0);
		this.ProfileName = (IfcLabel) parameters.get(1);
		this.Position = (IfcAxis2Placement2D) parameters.get(2);
		this.BottomFlangeWidth = (IfcPositiveLengthMeasure) parameters.get(3);
		this.OverallDepth = (IfcPositiveLengthMeasure) parameters.get(4);
		this.WebThickness = (IfcPositiveLengthMeasure) parameters.get(5);
		this.BottomFlangeThickness = (IfcPositiveLengthMeasure) parameters.get(6);
		this.BottomFlangeFilletRadius = (IfcNonNegativeLengthMeasure) parameters.get(7);
		this.TopFlangeWidth = (IfcPositiveLengthMeasure) parameters.get(8);
		this.TopFlangeThickness = (IfcPositiveLengthMeasure) parameters.get(9);
		this.TopFlangeFilletRadius = (IfcNonNegativeLengthMeasure) parameters.get(10);
		this.BottomFlangeEdgeRadius = (IfcNonNegativeLengthMeasure) parameters.get(11);
		this.BottomFlangeSlope = (IfcPlaneAngleMeasure) parameters.get(12);
		this.TopFlangeEdgeRadius = (IfcNonNegativeLengthMeasure) parameters.get(13);
		this.TopFlangeSlope = (IfcPlaneAngleMeasure) parameters.get(14);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcAsymmetricIShapeProfileDef.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCASYMMETRICISHAPEPROFILEDEF(");
		if(getRedefinedDerivedAttributeTypes().contains("ProfileType")) stepString = stepString.concat("*,");
		else{
		if(this.ProfileType != null)		stepString = stepString.concat(((RootInterface)this.ProfileType).getStepParameter(IfcProfileTypeEnum.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ProfileName")) stepString = stepString.concat("*,");
		else{
		if(this.ProfileName != null)		stepString = stepString.concat(((RootInterface)this.ProfileName).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Position")) stepString = stepString.concat("*,");
		else{
		if(this.Position != null)		stepString = stepString.concat(((RootInterface)this.Position).getStepParameter(IfcAxis2Placement2D.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("BottomFlangeWidth")) stepString = stepString.concat("*,");
		else{
		if(this.BottomFlangeWidth != null)		stepString = stepString.concat(((RootInterface)this.BottomFlangeWidth).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OverallDepth")) stepString = stepString.concat("*,");
		else{
		if(this.OverallDepth != null)		stepString = stepString.concat(((RootInterface)this.OverallDepth).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("WebThickness")) stepString = stepString.concat("*,");
		else{
		if(this.WebThickness != null)		stepString = stepString.concat(((RootInterface)this.WebThickness).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("BottomFlangeThickness")) stepString = stepString.concat("*,");
		else{
		if(this.BottomFlangeThickness != null)		stepString = stepString.concat(((RootInterface)this.BottomFlangeThickness).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("BottomFlangeFilletRadius")) stepString = stepString.concat("*,");
		else{
		if(this.BottomFlangeFilletRadius != null)		stepString = stepString.concat(((RootInterface)this.BottomFlangeFilletRadius).getStepParameter(IfcNonNegativeLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TopFlangeWidth")) stepString = stepString.concat("*,");
		else{
		if(this.TopFlangeWidth != null)		stepString = stepString.concat(((RootInterface)this.TopFlangeWidth).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TopFlangeThickness")) stepString = stepString.concat("*,");
		else{
		if(this.TopFlangeThickness != null)		stepString = stepString.concat(((RootInterface)this.TopFlangeThickness).getStepParameter(IfcPositiveLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TopFlangeFilletRadius")) stepString = stepString.concat("*,");
		else{
		if(this.TopFlangeFilletRadius != null)		stepString = stepString.concat(((RootInterface)this.TopFlangeFilletRadius).getStepParameter(IfcNonNegativeLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("BottomFlangeEdgeRadius")) stepString = stepString.concat("*,");
		else{
		if(this.BottomFlangeEdgeRadius != null)		stepString = stepString.concat(((RootInterface)this.BottomFlangeEdgeRadius).getStepParameter(IfcNonNegativeLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("BottomFlangeSlope")) stepString = stepString.concat("*,");
		else{
		if(this.BottomFlangeSlope != null)		stepString = stepString.concat(((RootInterface)this.BottomFlangeSlope).getStepParameter(IfcPlaneAngleMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TopFlangeEdgeRadius")) stepString = stepString.concat("*,");
		else{
		if(this.TopFlangeEdgeRadius != null)		stepString = stepString.concat(((RootInterface)this.TopFlangeEdgeRadius).getStepParameter(IfcNonNegativeLengthMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TopFlangeSlope")) stepString = stepString.concat("*);");
		else{
		if(this.TopFlangeSlope != null)		stepString = stepString.concat(((RootInterface)this.TopFlangeSlope).getStepParameter(IfcPlaneAngleMeasure.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the BottomFlangeWidth attribute to the given value.
	*
	* @param BottomFlangeWidth OPTIONAL value to set
	**/
	public void setBottomFlangeWidth(IfcPositiveLengthMeasure BottomFlangeWidth)
	{
		this.BottomFlangeWidth = BottomFlangeWidth;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the BottomFlangeWidth attribute.
	*
	* @return the value of BottomFlangeWidth
	/**/
	public IfcPositiveLengthMeasure getBottomFlangeWidth()
	{
		return this.BottomFlangeWidth;
	}

	/**
	* This method sets the OverallDepth attribute to the given value.
	*
	* @param OverallDepth OPTIONAL value to set
	**/
	public void setOverallDepth(IfcPositiveLengthMeasure OverallDepth)
	{
		this.OverallDepth = OverallDepth;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the OverallDepth attribute.
	*
	* @return the value of OverallDepth
	/**/
	public IfcPositiveLengthMeasure getOverallDepth()
	{
		return this.OverallDepth;
	}

	/**
	* This method sets the WebThickness attribute to the given value.
	*
	* @param WebThickness OPTIONAL value to set
	**/
	public void setWebThickness(IfcPositiveLengthMeasure WebThickness)
	{
		this.WebThickness = WebThickness;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the WebThickness attribute.
	*
	* @return the value of WebThickness
	/**/
	public IfcPositiveLengthMeasure getWebThickness()
	{
		return this.WebThickness;
	}

	/**
	* This method sets the BottomFlangeThickness attribute to the given value.
	*
	* @param BottomFlangeThickness OPTIONAL value to set
	**/
	public void setBottomFlangeThickness(IfcPositiveLengthMeasure BottomFlangeThickness)
	{
		this.BottomFlangeThickness = BottomFlangeThickness;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the BottomFlangeThickness attribute.
	*
	* @return the value of BottomFlangeThickness
	/**/
	public IfcPositiveLengthMeasure getBottomFlangeThickness()
	{
		return this.BottomFlangeThickness;
	}

	/**
	* This method sets the BottomFlangeFilletRadius attribute to the given value.
	*
	* @param BottomFlangeFilletRadius DEMANDED value to set - may not be null
	**/
	public void setBottomFlangeFilletRadius(IfcNonNegativeLengthMeasure BottomFlangeFilletRadius)
	{
		this.BottomFlangeFilletRadius = BottomFlangeFilletRadius;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the BottomFlangeFilletRadius attribute.
	*
	* @return the value of BottomFlangeFilletRadius
	/**/
	public IfcNonNegativeLengthMeasure getBottomFlangeFilletRadius()
	{
		return this.BottomFlangeFilletRadius;
	}

	/**
	* This method sets the TopFlangeWidth attribute to the given value.
	*
	* @param TopFlangeWidth OPTIONAL value to set
	**/
	public void setTopFlangeWidth(IfcPositiveLengthMeasure TopFlangeWidth)
	{
		this.TopFlangeWidth = TopFlangeWidth;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TopFlangeWidth attribute.
	*
	* @return the value of TopFlangeWidth
	/**/
	public IfcPositiveLengthMeasure getTopFlangeWidth()
	{
		return this.TopFlangeWidth;
	}

	/**
	* This method sets the TopFlangeThickness attribute to the given value.
	*
	* @param TopFlangeThickness DEMANDED value to set - may not be null
	**/
	public void setTopFlangeThickness(IfcPositiveLengthMeasure TopFlangeThickness)
	{
		this.TopFlangeThickness = TopFlangeThickness;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TopFlangeThickness attribute.
	*
	* @return the value of TopFlangeThickness
	/**/
	public IfcPositiveLengthMeasure getTopFlangeThickness()
	{
		return this.TopFlangeThickness;
	}

	/**
	* This method sets the TopFlangeFilletRadius attribute to the given value.
	*
	* @param TopFlangeFilletRadius DEMANDED value to set - may not be null
	**/
	public void setTopFlangeFilletRadius(IfcNonNegativeLengthMeasure TopFlangeFilletRadius)
	{
		this.TopFlangeFilletRadius = TopFlangeFilletRadius;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TopFlangeFilletRadius attribute.
	*
	* @return the value of TopFlangeFilletRadius
	/**/
	public IfcNonNegativeLengthMeasure getTopFlangeFilletRadius()
	{
		return this.TopFlangeFilletRadius;
	}

	/**
	* This method sets the BottomFlangeEdgeRadius attribute to the given value.
	*
	* @param BottomFlangeEdgeRadius DEMANDED value to set - may not be null
	**/
	public void setBottomFlangeEdgeRadius(IfcNonNegativeLengthMeasure BottomFlangeEdgeRadius)
	{
		this.BottomFlangeEdgeRadius = BottomFlangeEdgeRadius;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the BottomFlangeEdgeRadius attribute.
	*
	* @return the value of BottomFlangeEdgeRadius
	/**/
	public IfcNonNegativeLengthMeasure getBottomFlangeEdgeRadius()
	{
		return this.BottomFlangeEdgeRadius;
	}

	/**
	* This method sets the BottomFlangeSlope attribute to the given value.
	*
	* @param BottomFlangeSlope DEMANDED value to set - may not be null
	**/
	public void setBottomFlangeSlope(IfcPlaneAngleMeasure BottomFlangeSlope)
	{
		this.BottomFlangeSlope = BottomFlangeSlope;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the BottomFlangeSlope attribute.
	*
	* @return the value of BottomFlangeSlope
	/**/
	public IfcPlaneAngleMeasure getBottomFlangeSlope()
	{
		return this.BottomFlangeSlope;
	}

	/**
	* This method sets the TopFlangeEdgeRadius attribute to the given value.
	*
	* @param TopFlangeEdgeRadius DEMANDED value to set - may not be null
	**/
	public void setTopFlangeEdgeRadius(IfcNonNegativeLengthMeasure TopFlangeEdgeRadius)
	{
		this.TopFlangeEdgeRadius = TopFlangeEdgeRadius;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TopFlangeEdgeRadius attribute.
	*
	* @return the value of TopFlangeEdgeRadius
	/**/
	public IfcNonNegativeLengthMeasure getTopFlangeEdgeRadius()
	{
		return this.TopFlangeEdgeRadius;
	}

	/**
	* This method sets the TopFlangeSlope attribute to the given value.
	*
	* @param TopFlangeSlope DEMANDED value to set - may not be null
	**/
	public void setTopFlangeSlope(IfcPlaneAngleMeasure TopFlangeSlope)
	{
		this.TopFlangeSlope = TopFlangeSlope;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TopFlangeSlope attribute.
	*
	* @return the value of TopFlangeSlope
	/**/
	public IfcPlaneAngleMeasure getTopFlangeSlope()
	{
		return this.TopFlangeSlope;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcAsymmetricIShapeProfileDef ifcAsymmetricIShapeProfileDef = new IfcAsymmetricIShapeProfileDef();
		if(this.ProfileType != null)
			ifcAsymmetricIShapeProfileDef.setProfileType((IfcProfileTypeEnum)this.ProfileType.clone());
		if(this.ProfileName != null)
			ifcAsymmetricIShapeProfileDef.setProfileName((IfcLabel)this.ProfileName.clone());
		if(this.Position != null)
			ifcAsymmetricIShapeProfileDef.setPosition((IfcAxis2Placement2D)this.Position.clone());
		if(this.BottomFlangeWidth != null)
			ifcAsymmetricIShapeProfileDef.setBottomFlangeWidth((IfcPositiveLengthMeasure)this.BottomFlangeWidth.clone());
		if(this.OverallDepth != null)
			ifcAsymmetricIShapeProfileDef.setOverallDepth((IfcPositiveLengthMeasure)this.OverallDepth.clone());
		if(this.WebThickness != null)
			ifcAsymmetricIShapeProfileDef.setWebThickness((IfcPositiveLengthMeasure)this.WebThickness.clone());
		if(this.BottomFlangeThickness != null)
			ifcAsymmetricIShapeProfileDef.setBottomFlangeThickness((IfcPositiveLengthMeasure)this.BottomFlangeThickness.clone());
		if(this.BottomFlangeFilletRadius != null)
			ifcAsymmetricIShapeProfileDef.setBottomFlangeFilletRadius((IfcNonNegativeLengthMeasure)this.BottomFlangeFilletRadius.clone());
		if(this.TopFlangeWidth != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeWidth((IfcPositiveLengthMeasure)this.TopFlangeWidth.clone());
		if(this.TopFlangeThickness != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeThickness((IfcPositiveLengthMeasure)this.TopFlangeThickness.clone());
		if(this.TopFlangeFilletRadius != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeFilletRadius((IfcNonNegativeLengthMeasure)this.TopFlangeFilletRadius.clone());
		if(this.BottomFlangeEdgeRadius != null)
			ifcAsymmetricIShapeProfileDef.setBottomFlangeEdgeRadius((IfcNonNegativeLengthMeasure)this.BottomFlangeEdgeRadius.clone());
		if(this.BottomFlangeSlope != null)
			ifcAsymmetricIShapeProfileDef.setBottomFlangeSlope((IfcPlaneAngleMeasure)this.BottomFlangeSlope.clone());
		if(this.TopFlangeEdgeRadius != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeEdgeRadius((IfcNonNegativeLengthMeasure)this.TopFlangeEdgeRadius.clone());
		if(this.TopFlangeSlope != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeSlope((IfcPlaneAngleMeasure)this.TopFlangeSlope.clone());
		return ifcAsymmetricIShapeProfileDef;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcAsymmetricIShapeProfileDef ifcAsymmetricIShapeProfileDef = new IfcAsymmetricIShapeProfileDef();
		if(this.ProfileType != null)
			ifcAsymmetricIShapeProfileDef.setProfileType(this.ProfileType);
		if(this.ProfileName != null)
			ifcAsymmetricIShapeProfileDef.setProfileName(this.ProfileName);
		if(this.Position != null)
			ifcAsymmetricIShapeProfileDef.setPosition(this.Position);
		if(this.BottomFlangeWidth != null)
			ifcAsymmetricIShapeProfileDef.setBottomFlangeWidth(this.BottomFlangeWidth);
		if(this.OverallDepth != null)
			ifcAsymmetricIShapeProfileDef.setOverallDepth(this.OverallDepth);
		if(this.WebThickness != null)
			ifcAsymmetricIShapeProfileDef.setWebThickness(this.WebThickness);
		if(this.BottomFlangeThickness != null)
			ifcAsymmetricIShapeProfileDef.setBottomFlangeThickness(this.BottomFlangeThickness);
		if(this.BottomFlangeFilletRadius != null)
			ifcAsymmetricIShapeProfileDef.setBottomFlangeFilletRadius(this.BottomFlangeFilletRadius);
		if(this.TopFlangeWidth != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeWidth(this.TopFlangeWidth);
		if(this.TopFlangeThickness != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeThickness(this.TopFlangeThickness);
		if(this.TopFlangeFilletRadius != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeFilletRadius(this.TopFlangeFilletRadius);
		if(this.BottomFlangeEdgeRadius != null)
			ifcAsymmetricIShapeProfileDef.setBottomFlangeEdgeRadius(this.BottomFlangeEdgeRadius);
		if(this.BottomFlangeSlope != null)
			ifcAsymmetricIShapeProfileDef.setBottomFlangeSlope(this.BottomFlangeSlope);
		if(this.TopFlangeEdgeRadius != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeEdgeRadius(this.TopFlangeEdgeRadius);
		if(this.TopFlangeSlope != null)
			ifcAsymmetricIShapeProfileDef.setTopFlangeSlope(this.TopFlangeSlope);
		return ifcAsymmetricIShapeProfileDef;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

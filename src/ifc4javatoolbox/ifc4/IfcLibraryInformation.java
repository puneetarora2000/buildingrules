/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcLibraryInformation<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcLibraryInformation extends IfcExternalInformation implements ClassInterface, IfcLibrarySelect
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcLabel","IfcActorSelect","IfcDateTime","IfcURIReference","IfcText"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** Name is an DEMANDED attribute - may not be null**/
	protected IfcLabel Name;
	/** Version is an OPTIONAL attribute**/
	protected IfcLabel Version;
	/** Publisher is an OPTIONAL attribute**/
	protected IfcActorSelect Publisher;
	/** VersionDate is an OPTIONAL attribute**/
	protected IfcDateTime VersionDate;
	/** Location is an OPTIONAL attribute**/
	protected IfcURIReference Location;
	/** Description is an OPTIONAL attribute**/
	protected IfcText Description;
	protected SET<IfcRelAssociatesLibrary> LibraryInfoForObjects_Inverse;
	protected SET<IfcLibraryReference> HasLibraryReferences_Inverse;
	/**
	* The default constructor.
	**/
	public IfcLibraryInformation(){}

	/**
	* Constructs a new IfcLibraryInformation object using the given parameters.
	*
	* @param Name DEMANDED parameter of type IfcLabel - may not be null.
	* @param Version OPTIONAL parameter of type IfcLabel
	* @param Publisher OPTIONAL parameter of type IfcActorSelect
	* @param VersionDate OPTIONAL parameter of type IfcDateTime
	* @param Location OPTIONAL parameter of type IfcURIReference
	* @param Description OPTIONAL parameter of type IfcText
	**/
	public IfcLibraryInformation(IfcLabel Name, IfcLabel Version, IfcActorSelect Publisher, IfcDateTime VersionDate, IfcURIReference Location, IfcText Description)
	{
		this.Name = Name;
		this.Version = Version;
		this.Publisher = Publisher;
		this.VersionDate = VersionDate;
		this.Location = Location;
		this.Description = Description;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcLibraryInformation object using the given parameters.
	*
	* @param Name DEMANDED parameter of type IfcLabel - may not be null.
	* @param Version OPTIONAL parameter of type IfcLabel
	* @param Publisher OPTIONAL parameter of type IfcActorSelect
	* @param VersionDate OPTIONAL parameter of type IfcDateTime
	* @param Location OPTIONAL parameter of type IfcURIReference
	* @param Description OPTIONAL parameter of type IfcText
	**/
	public void setParameters(IfcLabel Name, IfcLabel Version, IfcActorSelect Publisher, IfcDateTime VersionDate, IfcURIReference Location, IfcText Description)
	{
		this.Name = Name;
		this.Version = Version;
		this.Publisher = Publisher;
		this.VersionDate = VersionDate;
		this.Location = Location;
		this.Description = Description;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.Version = (IfcLabel) parameters.get(1);
		this.Publisher = (IfcActorSelect) parameters.get(2);
		this.VersionDate = (IfcDateTime) parameters.get(3);
		this.Location = (IfcURIReference) parameters.get(4);
		this.Description = (IfcText) parameters.get(5);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
		LibraryInfoForObjects_Inverse = null;
		HasLibraryReferences_Inverse = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcLibraryInformation.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCLIBRARYINFORMATION(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Version")) stepString = stepString.concat("*,");
		else{
		if(this.Version != null)		stepString = stepString.concat(((RootInterface)this.Version).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Publisher")) stepString = stepString.concat("*,");
		else{
		if(this.Publisher != null)		stepString = stepString.concat(((RootInterface)this.Publisher).getStepParameter(IfcActorSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("VersionDate")) stepString = stepString.concat("*,");
		else{
		if(this.VersionDate != null)		stepString = stepString.concat(((RootInterface)this.VersionDate).getStepParameter(IfcDateTime.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Location")) stepString = stepString.concat("*,");
		else{
		if(this.Location != null)		stepString = stepString.concat(((RootInterface)this.Location).getStepParameter(IfcURIReference.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*);");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method returns a copy of the set of the LibraryInfoForObjects_Inverse attribute.
	*
	* @return a copy of the LibraryInfoForObjects_Inverse set
	**/
	public SET<IfcRelAssociatesLibrary> getLibraryInfoForObjects_Inverse()
	{
		if(this.LibraryInfoForObjects_Inverse != null)
			return new SET<IfcRelAssociatesLibrary>(this.LibraryInfoForObjects_Inverse);
		return null;
	}

	/**
	* This method returns a copy of the set of the HasLibraryReferences_Inverse attribute.
	*
	* @return a copy of the HasLibraryReferences_Inverse set
	**/
	public SET<IfcLibraryReference> getHasLibraryReferences_Inverse()
	{
		if(this.HasLibraryReferences_Inverse != null)
			return new SET<IfcLibraryReference>(this.HasLibraryReferences_Inverse);
		return null;
	}

	/**
	* This method sets the Name attribute to the given value.
	*
	* @param Name OPTIONAL value to set
	**/
	public void setName(IfcLabel Name)
	{
		this.Name = Name;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Name attribute.
	*
	* @return the value of Name
	/**/
	public IfcLabel getName()
	{
		return this.Name;
	}

	/**
	* This method sets the Version attribute to the given value.
	*
	* @param Version DEMANDED value to set - may not be null
	**/
	public void setVersion(IfcLabel Version)
	{
		this.Version = Version;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Version attribute.
	*
	* @return the value of Version
	/**/
	public IfcLabel getVersion()
	{
		return this.Version;
	}

	/**
	* This method sets the Publisher attribute to the given value.
	*
	* @param Publisher DEMANDED value to set - may not be null
	**/
	public void setPublisher(IfcActorSelect Publisher)
	{
		this.Publisher = Publisher;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Publisher attribute.
	*
	* @return the value of Publisher
	/**/
	public IfcActorSelect getPublisher()
	{
		return this.Publisher;
	}

	/**
	* This method sets the VersionDate attribute to the given value.
	*
	* @param VersionDate DEMANDED value to set - may not be null
	**/
	public void setVersionDate(IfcDateTime VersionDate)
	{
		this.VersionDate = VersionDate;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the VersionDate attribute.
	*
	* @return the value of VersionDate
	/**/
	public IfcDateTime getVersionDate()
	{
		return this.VersionDate;
	}

	/**
	* This method sets the Location attribute to the given value.
	*
	* @param Location DEMANDED value to set - may not be null
	**/
	public void setLocation(IfcURIReference Location)
	{
		this.Location = Location;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Location attribute.
	*
	* @return the value of Location
	/**/
	public IfcURIReference getLocation()
	{
		return this.Location;
	}

	/**
	* This method sets the Description attribute to the given value.
	*
	* @param Description DEMANDED value to set - may not be null
	**/
	public void setDescription(IfcText Description)
	{
		this.Description = Description;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Description attribute.
	*
	* @return the value of Description
	/**/
	public IfcText getDescription()
	{
		return this.Description;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcLibraryInformation ifcLibraryInformation = new IfcLibraryInformation();
		if(this.Name != null)
			ifcLibraryInformation.setName((IfcLabel)this.Name.clone());
		if(this.Version != null)
			ifcLibraryInformation.setVersion((IfcLabel)this.Version.clone());
		if(this.Publisher != null)
			ifcLibraryInformation.setPublisher((IfcActorSelect)this.Publisher.clone());
		if(this.VersionDate != null)
			ifcLibraryInformation.setVersionDate((IfcDateTime)this.VersionDate.clone());
		if(this.Location != null)
			ifcLibraryInformation.setLocation((IfcURIReference)this.Location.clone());
		if(this.Description != null)
			ifcLibraryInformation.setDescription((IfcText)this.Description.clone());
		return ifcLibraryInformation;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcLibraryInformation ifcLibraryInformation = new IfcLibraryInformation();
		if(this.Name != null)
			ifcLibraryInformation.setName(this.Name);
		if(this.Version != null)
			ifcLibraryInformation.setVersion(this.Version);
		if(this.Publisher != null)
			ifcLibraryInformation.setPublisher(this.Publisher);
		if(this.VersionDate != null)
			ifcLibraryInformation.setVersionDate(this.VersionDate);
		if(this.Location != null)
			ifcLibraryInformation.setLocation(this.Location);
		if(this.Description != null)
			ifcLibraryInformation.setDescription(this.Description);
		return ifcLibraryInformation;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcMaterialProfile<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcMaterialProfile extends IfcMaterialDefinition implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcText","IfcMaterial","IfcProfileDef","IfcNormalisedRatioMeasure","IfcLabel"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** Name is an OPTIONAL attribute**/
	protected IfcLabel Name;
	/** Description is an OPTIONAL attribute**/
	protected IfcText Description;
	/** Material is an OPTIONAL attribute**/
	protected IfcMaterial Material;
	/** Profile is an DEMANDED attribute - may not be null**/
	protected IfcProfileDef Profile;
	/** Priority is an OPTIONAL attribute**/
	protected IfcNormalisedRatioMeasure Priority;
	/** Category is an OPTIONAL attribute**/
	protected IfcLabel Category;
	protected IfcMaterialProfileSet ToMaterialProfileSet_Inverse;
	/**
	* The default constructor.
	**/
	public IfcMaterialProfile(){}

	/**
	* Constructs a new IfcMaterialProfile object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param Material OPTIONAL parameter of type IfcMaterial
	* @param Profile DEMANDED parameter of type IfcProfileDef - may not be null.
	* @param Priority OPTIONAL parameter of type IfcNormalisedRatioMeasure
	* @param Category OPTIONAL parameter of type IfcLabel
	**/
	public IfcMaterialProfile(IfcLabel Name, IfcText Description, IfcMaterial Material, IfcProfileDef Profile, IfcNormalisedRatioMeasure Priority, IfcLabel Category)
	{
		this.Name = Name;
		this.Description = Description;
		this.Material = Material;
		this.Profile = Profile;
		this.Priority = Priority;
		this.Category = Category;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcMaterialProfile object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param Material OPTIONAL parameter of type IfcMaterial
	* @param Profile DEMANDED parameter of type IfcProfileDef - may not be null.
	* @param Priority OPTIONAL parameter of type IfcNormalisedRatioMeasure
	* @param Category OPTIONAL parameter of type IfcLabel
	**/
	public void setParameters(IfcLabel Name, IfcText Description, IfcMaterial Material, IfcProfileDef Profile, IfcNormalisedRatioMeasure Priority, IfcLabel Category)
	{
		this.Name = Name;
		this.Description = Description;
		this.Material = Material;
		this.Profile = Profile;
		this.Priority = Priority;
		this.Category = Category;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.Description = (IfcText) parameters.get(1);
		this.Material = (IfcMaterial) parameters.get(2);
		this.Profile = (IfcProfileDef) parameters.get(3);
		this.Priority = (IfcNormalisedRatioMeasure) parameters.get(4);
		this.Category = (IfcLabel) parameters.get(5);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
		ToMaterialProfileSet_Inverse = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcMaterialProfile.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCMATERIALPROFILE(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Material")) stepString = stepString.concat("*,");
		else{
		if(this.Material != null)		stepString = stepString.concat(((RootInterface)this.Material).getStepParameter(IfcMaterial.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Profile")) stepString = stepString.concat("*,");
		else{
		if(this.Profile != null)		stepString = stepString.concat(((RootInterface)this.Profile).getStepParameter(IfcProfileDef.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Priority")) stepString = stepString.concat("*,");
		else{
		if(this.Priority != null)		stepString = stepString.concat(((RootInterface)this.Priority).getStepParameter(IfcNormalisedRatioMeasure.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Category")) stepString = stepString.concat("*);");
		else{
		if(this.Category != null)		stepString = stepString.concat(((RootInterface)this.Category).getStepParameter(IfcLabel.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method returns the value of the ToMaterialProfileSet_Inverse attribute.
	*
	* @return the value of ToMaterialProfileSet_Inverse
	/**/
	public IfcMaterialProfileSet getToMaterialProfileSet_Inverse()
	{
		return this.ToMaterialProfileSet_Inverse;
	}

	/**
	* This method sets the Name attribute to the given value.
	*
	* @param Name DEMANDED value to set - may not be null
	**/
	public void setName(IfcLabel Name)
	{
		this.Name = Name;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Name attribute.
	*
	* @return the value of Name
	/**/
	public IfcLabel getName()
	{
		return this.Name;
	}

	/**
	* This method sets the Description attribute to the given value.
	*
	* @param Description DEMANDED value to set - may not be null
	**/
	public void setDescription(IfcText Description)
	{
		this.Description = Description;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Description attribute.
	*
	* @return the value of Description
	/**/
	public IfcText getDescription()
	{
		return this.Description;
	}

	/**
	* This method sets the Material attribute to the given value.
	*
	* @param Material DEMANDED value to set - may not be null
	**/
	public void setMaterial(IfcMaterial Material)
	{
		this.Material = Material;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Material attribute.
	*
	* @return the value of Material
	/**/
	public IfcMaterial getMaterial()
	{
		return this.Material;
	}

	/**
	* This method sets the Profile attribute to the given value.
	*
	* @param Profile OPTIONAL value to set
	**/
	public void setProfile(IfcProfileDef Profile)
	{
		this.Profile = Profile;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Profile attribute.
	*
	* @return the value of Profile
	/**/
	public IfcProfileDef getProfile()
	{
		return this.Profile;
	}

	/**
	* This method sets the Priority attribute to the given value.
	*
	* @param Priority DEMANDED value to set - may not be null
	**/
	public void setPriority(IfcNormalisedRatioMeasure Priority)
	{
		this.Priority = Priority;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Priority attribute.
	*
	* @return the value of Priority
	/**/
	public IfcNormalisedRatioMeasure getPriority()
	{
		return this.Priority;
	}

	/**
	* This method sets the Category attribute to the given value.
	*
	* @param Category DEMANDED value to set - may not be null
	**/
	public void setCategory(IfcLabel Category)
	{
		this.Category = Category;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the Category attribute.
	*
	* @return the value of Category
	/**/
	public IfcLabel getCategory()
	{
		return this.Category;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcMaterialProfile ifcMaterialProfile = new IfcMaterialProfile();
		if(this.Name != null)
			ifcMaterialProfile.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcMaterialProfile.setDescription((IfcText)this.Description.clone());
		if(this.Material != null)
			ifcMaterialProfile.setMaterial((IfcMaterial)this.Material.clone());
		if(this.Profile != null)
			ifcMaterialProfile.setProfile((IfcProfileDef)this.Profile.clone());
		if(this.Priority != null)
			ifcMaterialProfile.setPriority((IfcNormalisedRatioMeasure)this.Priority.clone());
		if(this.Category != null)
			ifcMaterialProfile.setCategory((IfcLabel)this.Category.clone());
		return ifcMaterialProfile;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcMaterialProfile ifcMaterialProfile = new IfcMaterialProfile();
		if(this.Name != null)
			ifcMaterialProfile.setName(this.Name);
		if(this.Description != null)
			ifcMaterialProfile.setDescription(this.Description);
		if(this.Material != null)
			ifcMaterialProfile.setMaterial(this.Material);
		if(this.Profile != null)
			ifcMaterialProfile.setProfile(this.Profile);
		if(this.Priority != null)
			ifcMaterialProfile.setPriority(this.Priority);
		if(this.Category != null)
			ifcMaterialProfile.setCategory(this.Category);
		return ifcMaterialProfile;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

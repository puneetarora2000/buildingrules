/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcRelInterferesElements<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcRelInterferesElements extends IfcRelConnects implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcGloballyUniqueId","IfcOwnerHistory","IfcLabel","IfcText","IfcElement","IfcElement","IfcConnectionGeometry","IfcIdentifier","LOGICAL"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** RelatingElement is an DEMANDED attribute - may not be null**/
	protected IfcElement RelatingElement;
	/** RelatedElement is an DEMANDED attribute - may not be null**/
	protected IfcElement RelatedElement;
	/** InterferenceGeometry is an OPTIONAL attribute**/
	protected IfcConnectionGeometry InterferenceGeometry;
	/** InterferenceType is an OPTIONAL attribute**/
	protected IfcIdentifier InterferenceType;
	/** ImpliedOrder is an DEMANDED attribute - may not be null**/
	protected LOGICAL ImpliedOrder;
	/**
	* The default constructor.
	**/
	public IfcRelInterferesElements(){}

	/**
	* Constructs a new IfcRelInterferesElements object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory OPTIONAL parameter of type IfcOwnerHistory
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param RelatingElement DEMANDED parameter of type IfcElement - may not be null.
	* @param RelatedElement DEMANDED parameter of type IfcElement - may not be null.
	* @param InterferenceGeometry OPTIONAL parameter of type IfcConnectionGeometry
	* @param InterferenceType OPTIONAL parameter of type IfcIdentifier
	* @param ImpliedOrder DEMANDED parameter of type LOGICAL - may not be null.
	**/
	public IfcRelInterferesElements(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcElement RelatingElement, IfcElement RelatedElement, IfcConnectionGeometry InterferenceGeometry, IfcIdentifier InterferenceType, LOGICAL ImpliedOrder)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingElement = RelatingElement;
		this.RelatedElement = RelatedElement;
		this.InterferenceGeometry = InterferenceGeometry;
		this.InterferenceType = InterferenceType;
		this.ImpliedOrder = ImpliedOrder;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcRelInterferesElements object using the given parameters.
	*
	* @param GlobalId DEMANDED parameter of type IfcGloballyUniqueId - may not be null.
	* @param OwnerHistory OPTIONAL parameter of type IfcOwnerHistory
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param Description OPTIONAL parameter of type IfcText
	* @param RelatingElement DEMANDED parameter of type IfcElement - may not be null.
	* @param RelatedElement DEMANDED parameter of type IfcElement - may not be null.
	* @param InterferenceGeometry OPTIONAL parameter of type IfcConnectionGeometry
	* @param InterferenceType OPTIONAL parameter of type IfcIdentifier
	* @param ImpliedOrder DEMANDED parameter of type LOGICAL - may not be null.
	**/
	public void setParameters(IfcGloballyUniqueId GlobalId, IfcOwnerHistory OwnerHistory, IfcLabel Name, IfcText Description, IfcElement RelatingElement, IfcElement RelatedElement, IfcConnectionGeometry InterferenceGeometry, IfcIdentifier InterferenceType, LOGICAL ImpliedOrder)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingElement = RelatingElement;
		this.RelatedElement = RelatedElement;
		this.InterferenceGeometry = InterferenceGeometry;
		this.InterferenceType = InterferenceType;
		this.ImpliedOrder = ImpliedOrder;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.GlobalId = (IfcGloballyUniqueId) parameters.get(0);
		this.OwnerHistory = (IfcOwnerHistory) parameters.get(1);
		this.Name = (IfcLabel) parameters.get(2);
		this.Description = (IfcText) parameters.get(3);
		this.RelatingElement = (IfcElement) parameters.get(4);
		this.RelatedElement = (IfcElement) parameters.get(5);
		this.InterferenceGeometry = (IfcConnectionGeometry) parameters.get(6);
		this.InterferenceType = (IfcIdentifier) parameters.get(7);
		this.ImpliedOrder = (LOGICAL) parameters.get(8);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
		if(RelatingElement != null)
		{
				if(RelatingElement.InterferesElements_Inverse == null)
				{
					RelatingElement.InterferesElements_Inverse = new SET<IfcRelInterferesElements>();
				}
				RelatingElement.InterferesElements_Inverse.add(this);
		}
		if(RelatedElement != null)
		{
				if(RelatedElement.IsInterferedByElements_Inverse == null)
				{
					RelatedElement.IsInterferedByElements_Inverse = new SET<IfcRelInterferesElements>();
				}
				RelatedElement.IsInterferedByElements_Inverse.add(this);
		}
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcRelInterferesElements.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCRELINTERFERESELEMENTS(");
		if(getRedefinedDerivedAttributeTypes().contains("GlobalId")) stepString = stepString.concat("*,");
		else{
		if(this.GlobalId != null)		stepString = stepString.concat(((RootInterface)this.GlobalId).getStepParameter(IfcGloballyUniqueId.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("OwnerHistory")) stepString = stepString.concat("*,");
		else{
		if(this.OwnerHistory != null)		stepString = stepString.concat(((RootInterface)this.OwnerHistory).getStepParameter(IfcOwnerHistory.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("Description")) stepString = stepString.concat("*,");
		else{
		if(this.Description != null)		stepString = stepString.concat(((RootInterface)this.Description).getStepParameter(IfcText.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RelatingElement")) stepString = stepString.concat("*,");
		else{
		if(this.RelatingElement != null)		stepString = stepString.concat(((RootInterface)this.RelatingElement).getStepParameter(IfcElement.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RelatedElement")) stepString = stepString.concat("*,");
		else{
		if(this.RelatedElement != null)		stepString = stepString.concat(((RootInterface)this.RelatedElement).getStepParameter(IfcElement.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("InterferenceGeometry")) stepString = stepString.concat("*,");
		else{
		if(this.InterferenceGeometry != null)		stepString = stepString.concat(((RootInterface)this.InterferenceGeometry).getStepParameter(IfcConnectionGeometry.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("InterferenceType")) stepString = stepString.concat("*,");
		else{
		if(this.InterferenceType != null)		stepString = stepString.concat(((RootInterface)this.InterferenceType).getStepParameter(IfcIdentifier.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ImpliedOrder")) stepString = stepString.concat("*);");
		else{
		if(this.ImpliedOrder != null)		stepString = stepString.concat(((RootInterface)this.ImpliedOrder).getStepParameter(LOGICAL.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the RelatingElement attribute to the given value.
	*
	* @param RelatingElement OPTIONAL value to set
	**/
	public void setRelatingElement(IfcElement RelatingElement)
	{
		synchronizeInversesRemoveRelatingElement(this.RelatingElement);
		this.RelatingElement = RelatingElement;
		synchronizeInversesAddRelatingElement(this.RelatingElement);
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RelatingElement attribute.
	*
	* @return the value of RelatingElement
	/**/
	public IfcElement getRelatingElement()
	{
		return this.RelatingElement;
	}

	private void synchronizeInversesAddRelatingElement(IfcElement RelatingElement)
	{
		if(RelatingElement != null)
		{
				if(RelatingElement.InterferesElements_Inverse == null)
				{
					RelatingElement.InterferesElements_Inverse = new SET<IfcRelInterferesElements>();
				}
				RelatingElement.InterferesElements_Inverse.add(this);
		}
	}

	private void synchronizeInversesRemoveRelatingElement(IfcElement RelatingElement)
	{
		if(RelatingElement != null)
		{
				if(RelatingElement.InterferesElements_Inverse != null)
				{
					RelatingElement.InterferesElements_Inverse.remove(this);
				}
		}
	}

	/**
	* This method sets the RelatedElement attribute to the given value.
	*
	* @param RelatedElement OPTIONAL value to set
	**/
	public void setRelatedElement(IfcElement RelatedElement)
	{
		synchronizeInversesRemoveRelatedElement(this.RelatedElement);
		this.RelatedElement = RelatedElement;
		synchronizeInversesAddRelatedElement(this.RelatedElement);
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RelatedElement attribute.
	*
	* @return the value of RelatedElement
	/**/
	public IfcElement getRelatedElement()
	{
		return this.RelatedElement;
	}

	private void synchronizeInversesAddRelatedElement(IfcElement RelatedElement)
	{
		if(RelatedElement != null)
		{
				if(RelatedElement.IsInterferedByElements_Inverse == null)
				{
					RelatedElement.IsInterferedByElements_Inverse = new SET<IfcRelInterferesElements>();
				}
				RelatedElement.IsInterferedByElements_Inverse.add(this);
		}
	}

	private void synchronizeInversesRemoveRelatedElement(IfcElement RelatedElement)
	{
		if(RelatedElement != null)
		{
				if(RelatedElement.IsInterferedByElements_Inverse != null)
				{
					RelatedElement.IsInterferedByElements_Inverse.remove(this);
				}
		}
	}

	/**
	* This method sets the InterferenceGeometry attribute to the given value.
	*
	* @param InterferenceGeometry DEMANDED value to set - may not be null
	**/
	public void setInterferenceGeometry(IfcConnectionGeometry InterferenceGeometry)
	{
		this.InterferenceGeometry = InterferenceGeometry;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the InterferenceGeometry attribute.
	*
	* @return the value of InterferenceGeometry
	/**/
	public IfcConnectionGeometry getInterferenceGeometry()
	{
		return this.InterferenceGeometry;
	}

	/**
	* This method sets the InterferenceType attribute to the given value.
	*
	* @param InterferenceType DEMANDED value to set - may not be null
	**/
	public void setInterferenceType(IfcIdentifier InterferenceType)
	{
		this.InterferenceType = InterferenceType;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the InterferenceType attribute.
	*
	* @return the value of InterferenceType
	/**/
	public IfcIdentifier getInterferenceType()
	{
		return this.InterferenceType;
	}

	/**
	* This method sets the ImpliedOrder attribute to the given value.
	*
	* @param ImpliedOrder OPTIONAL value to set
	**/
	public void setImpliedOrder(LOGICAL ImpliedOrder)
	{
		this.ImpliedOrder = ImpliedOrder;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the ImpliedOrder attribute.
	*
	* @return the value of ImpliedOrder
	/**/
	public LOGICAL getImpliedOrder()
	{
		return this.ImpliedOrder;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcRelInterferesElements ifcRelInterferesElements = new IfcRelInterferesElements();
		if(this.GlobalId != null)
			ifcRelInterferesElements.setGlobalId((IfcGloballyUniqueId)this.GlobalId.clone());
		if(this.OwnerHistory != null)
			ifcRelInterferesElements.setOwnerHistory((IfcOwnerHistory)this.OwnerHistory.clone());
		if(this.Name != null)
			ifcRelInterferesElements.setName((IfcLabel)this.Name.clone());
		if(this.Description != null)
			ifcRelInterferesElements.setDescription((IfcText)this.Description.clone());
		if(this.RelatingElement != null)
			ifcRelInterferesElements.setRelatingElement((IfcElement)this.RelatingElement.clone());
		if(this.RelatedElement != null)
			ifcRelInterferesElements.setRelatedElement((IfcElement)this.RelatedElement.clone());
		if(this.InterferenceGeometry != null)
			ifcRelInterferesElements.setInterferenceGeometry((IfcConnectionGeometry)this.InterferenceGeometry.clone());
		if(this.InterferenceType != null)
			ifcRelInterferesElements.setInterferenceType((IfcIdentifier)this.InterferenceType.clone());
		if(this.ImpliedOrder != null)
			ifcRelInterferesElements.setImpliedOrder((LOGICAL)this.ImpliedOrder.clone());
		return ifcRelInterferesElements;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcRelInterferesElements ifcRelInterferesElements = new IfcRelInterferesElements();
		if(this.GlobalId != null)
			ifcRelInterferesElements.setGlobalId(this.GlobalId);
		if(this.OwnerHistory != null)
			ifcRelInterferesElements.setOwnerHistory(this.OwnerHistory);
		if(this.Name != null)
			ifcRelInterferesElements.setName(this.Name);
		if(this.Description != null)
			ifcRelInterferesElements.setDescription(this.Description);
		if(this.RelatingElement != null)
			ifcRelInterferesElements.setRelatingElement(this.RelatingElement);
		if(this.RelatedElement != null)
			ifcRelInterferesElements.setRelatedElement(this.RelatedElement);
		if(this.InterferenceGeometry != null)
			ifcRelInterferesElements.setInterferenceGeometry(this.InterferenceGeometry);
		if(this.InterferenceType != null)
			ifcRelInterferesElements.setInterferenceType(this.InterferenceType);
		if(this.ImpliedOrder != null)
			ifcRelInterferesElements.setImpliedOrder(this.ImpliedOrder);
		return ifcRelInterferesElements;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

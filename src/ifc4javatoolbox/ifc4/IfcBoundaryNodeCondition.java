/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcBoundaryNodeCondition<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcBoundaryNodeCondition extends IfcBoundaryCondition implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcTranslationalStiffnessSelect","IfcTranslationalStiffnessSelect","IfcTranslationalStiffnessSelect","IfcRotationalStiffnessSelect","IfcRotationalStiffnessSelect","IfcRotationalStiffnessSelect"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** TranslationalStiffnessX is an OPTIONAL attribute**/
	protected IfcTranslationalStiffnessSelect TranslationalStiffnessX;
	/** TranslationalStiffnessY is an OPTIONAL attribute**/
	protected IfcTranslationalStiffnessSelect TranslationalStiffnessY;
	/** TranslationalStiffnessZ is an OPTIONAL attribute**/
	protected IfcTranslationalStiffnessSelect TranslationalStiffnessZ;
	/** RotationalStiffnessX is an OPTIONAL attribute**/
	protected IfcRotationalStiffnessSelect RotationalStiffnessX;
	/** RotationalStiffnessY is an OPTIONAL attribute**/
	protected IfcRotationalStiffnessSelect RotationalStiffnessY;
	/** RotationalStiffnessZ is an OPTIONAL attribute**/
	protected IfcRotationalStiffnessSelect RotationalStiffnessZ;
	/**
	* The default constructor.
	**/
	public IfcBoundaryNodeCondition(){}

	/**
	* Constructs a new IfcBoundaryNodeCondition object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param TranslationalStiffnessX OPTIONAL parameter of type IfcTranslationalStiffnessSelect
	* @param TranslationalStiffnessY OPTIONAL parameter of type IfcTranslationalStiffnessSelect
	* @param TranslationalStiffnessZ OPTIONAL parameter of type IfcTranslationalStiffnessSelect
	* @param RotationalStiffnessX OPTIONAL parameter of type IfcRotationalStiffnessSelect
	* @param RotationalStiffnessY OPTIONAL parameter of type IfcRotationalStiffnessSelect
	* @param RotationalStiffnessZ OPTIONAL parameter of type IfcRotationalStiffnessSelect
	**/
	public IfcBoundaryNodeCondition(IfcLabel Name, IfcTranslationalStiffnessSelect TranslationalStiffnessX, IfcTranslationalStiffnessSelect TranslationalStiffnessY, IfcTranslationalStiffnessSelect TranslationalStiffnessZ, IfcRotationalStiffnessSelect RotationalStiffnessX, IfcRotationalStiffnessSelect RotationalStiffnessY, IfcRotationalStiffnessSelect RotationalStiffnessZ)
	{
		this.Name = Name;
		this.TranslationalStiffnessX = TranslationalStiffnessX;
		this.TranslationalStiffnessY = TranslationalStiffnessY;
		this.TranslationalStiffnessZ = TranslationalStiffnessZ;
		this.RotationalStiffnessX = RotationalStiffnessX;
		this.RotationalStiffnessY = RotationalStiffnessY;
		this.RotationalStiffnessZ = RotationalStiffnessZ;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcBoundaryNodeCondition object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param TranslationalStiffnessX OPTIONAL parameter of type IfcTranslationalStiffnessSelect
	* @param TranslationalStiffnessY OPTIONAL parameter of type IfcTranslationalStiffnessSelect
	* @param TranslationalStiffnessZ OPTIONAL parameter of type IfcTranslationalStiffnessSelect
	* @param RotationalStiffnessX OPTIONAL parameter of type IfcRotationalStiffnessSelect
	* @param RotationalStiffnessY OPTIONAL parameter of type IfcRotationalStiffnessSelect
	* @param RotationalStiffnessZ OPTIONAL parameter of type IfcRotationalStiffnessSelect
	**/
	public void setParameters(IfcLabel Name, IfcTranslationalStiffnessSelect TranslationalStiffnessX, IfcTranslationalStiffnessSelect TranslationalStiffnessY, IfcTranslationalStiffnessSelect TranslationalStiffnessZ, IfcRotationalStiffnessSelect RotationalStiffnessX, IfcRotationalStiffnessSelect RotationalStiffnessY, IfcRotationalStiffnessSelect RotationalStiffnessZ)
	{
		this.Name = Name;
		this.TranslationalStiffnessX = TranslationalStiffnessX;
		this.TranslationalStiffnessY = TranslationalStiffnessY;
		this.TranslationalStiffnessZ = TranslationalStiffnessZ;
		this.RotationalStiffnessX = RotationalStiffnessX;
		this.RotationalStiffnessY = RotationalStiffnessY;
		this.RotationalStiffnessZ = RotationalStiffnessZ;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.TranslationalStiffnessX = (IfcTranslationalStiffnessSelect) parameters.get(1);
		this.TranslationalStiffnessY = (IfcTranslationalStiffnessSelect) parameters.get(2);
		this.TranslationalStiffnessZ = (IfcTranslationalStiffnessSelect) parameters.get(3);
		this.RotationalStiffnessX = (IfcRotationalStiffnessSelect) parameters.get(4);
		this.RotationalStiffnessY = (IfcRotationalStiffnessSelect) parameters.get(5);
		this.RotationalStiffnessZ = (IfcRotationalStiffnessSelect) parameters.get(6);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcBoundaryNodeCondition.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCBOUNDARYNODECONDITION(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TranslationalStiffnessX")) stepString = stepString.concat("*,");
		else{
		if(this.TranslationalStiffnessX != null)		stepString = stepString.concat(((RootInterface)this.TranslationalStiffnessX).getStepParameter(IfcTranslationalStiffnessSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TranslationalStiffnessY")) stepString = stepString.concat("*,");
		else{
		if(this.TranslationalStiffnessY != null)		stepString = stepString.concat(((RootInterface)this.TranslationalStiffnessY).getStepParameter(IfcTranslationalStiffnessSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TranslationalStiffnessZ")) stepString = stepString.concat("*,");
		else{
		if(this.TranslationalStiffnessZ != null)		stepString = stepString.concat(((RootInterface)this.TranslationalStiffnessZ).getStepParameter(IfcTranslationalStiffnessSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RotationalStiffnessX")) stepString = stepString.concat("*,");
		else{
		if(this.RotationalStiffnessX != null)		stepString = stepString.concat(((RootInterface)this.RotationalStiffnessX).getStepParameter(IfcRotationalStiffnessSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RotationalStiffnessY")) stepString = stepString.concat("*,");
		else{
		if(this.RotationalStiffnessY != null)		stepString = stepString.concat(((RootInterface)this.RotationalStiffnessY).getStepParameter(IfcRotationalStiffnessSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("RotationalStiffnessZ")) stepString = stepString.concat("*);");
		else{
		if(this.RotationalStiffnessZ != null)		stepString = stepString.concat(((RootInterface)this.RotationalStiffnessZ).getStepParameter(IfcRotationalStiffnessSelect.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the TranslationalStiffnessX attribute to the given value.
	*
	* @param TranslationalStiffnessX DEMANDED value to set - may not be null
	**/
	public void setTranslationalStiffnessX(IfcTranslationalStiffnessSelect TranslationalStiffnessX)
	{
		this.TranslationalStiffnessX = TranslationalStiffnessX;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TranslationalStiffnessX attribute.
	*
	* @return the value of TranslationalStiffnessX
	/**/
	public IfcTranslationalStiffnessSelect getTranslationalStiffnessX()
	{
		return this.TranslationalStiffnessX;
	}

	/**
	* This method sets the TranslationalStiffnessY attribute to the given value.
	*
	* @param TranslationalStiffnessY DEMANDED value to set - may not be null
	**/
	public void setTranslationalStiffnessY(IfcTranslationalStiffnessSelect TranslationalStiffnessY)
	{
		this.TranslationalStiffnessY = TranslationalStiffnessY;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TranslationalStiffnessY attribute.
	*
	* @return the value of TranslationalStiffnessY
	/**/
	public IfcTranslationalStiffnessSelect getTranslationalStiffnessY()
	{
		return this.TranslationalStiffnessY;
	}

	/**
	* This method sets the TranslationalStiffnessZ attribute to the given value.
	*
	* @param TranslationalStiffnessZ DEMANDED value to set - may not be null
	**/
	public void setTranslationalStiffnessZ(IfcTranslationalStiffnessSelect TranslationalStiffnessZ)
	{
		this.TranslationalStiffnessZ = TranslationalStiffnessZ;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TranslationalStiffnessZ attribute.
	*
	* @return the value of TranslationalStiffnessZ
	/**/
	public IfcTranslationalStiffnessSelect getTranslationalStiffnessZ()
	{
		return this.TranslationalStiffnessZ;
	}

	/**
	* This method sets the RotationalStiffnessX attribute to the given value.
	*
	* @param RotationalStiffnessX DEMANDED value to set - may not be null
	**/
	public void setRotationalStiffnessX(IfcRotationalStiffnessSelect RotationalStiffnessX)
	{
		this.RotationalStiffnessX = RotationalStiffnessX;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RotationalStiffnessX attribute.
	*
	* @return the value of RotationalStiffnessX
	/**/
	public IfcRotationalStiffnessSelect getRotationalStiffnessX()
	{
		return this.RotationalStiffnessX;
	}

	/**
	* This method sets the RotationalStiffnessY attribute to the given value.
	*
	* @param RotationalStiffnessY DEMANDED value to set - may not be null
	**/
	public void setRotationalStiffnessY(IfcRotationalStiffnessSelect RotationalStiffnessY)
	{
		this.RotationalStiffnessY = RotationalStiffnessY;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RotationalStiffnessY attribute.
	*
	* @return the value of RotationalStiffnessY
	/**/
	public IfcRotationalStiffnessSelect getRotationalStiffnessY()
	{
		return this.RotationalStiffnessY;
	}

	/**
	* This method sets the RotationalStiffnessZ attribute to the given value.
	*
	* @param RotationalStiffnessZ DEMANDED value to set - may not be null
	**/
	public void setRotationalStiffnessZ(IfcRotationalStiffnessSelect RotationalStiffnessZ)
	{
		this.RotationalStiffnessZ = RotationalStiffnessZ;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the RotationalStiffnessZ attribute.
	*
	* @return the value of RotationalStiffnessZ
	/**/
	public IfcRotationalStiffnessSelect getRotationalStiffnessZ()
	{
		return this.RotationalStiffnessZ;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcBoundaryNodeCondition ifcBoundaryNodeCondition = new IfcBoundaryNodeCondition();
		if(this.Name != null)
			ifcBoundaryNodeCondition.setName((IfcLabel)this.Name.clone());
		if(this.TranslationalStiffnessX != null)
			ifcBoundaryNodeCondition.setTranslationalStiffnessX((IfcTranslationalStiffnessSelect)this.TranslationalStiffnessX.clone());
		if(this.TranslationalStiffnessY != null)
			ifcBoundaryNodeCondition.setTranslationalStiffnessY((IfcTranslationalStiffnessSelect)this.TranslationalStiffnessY.clone());
		if(this.TranslationalStiffnessZ != null)
			ifcBoundaryNodeCondition.setTranslationalStiffnessZ((IfcTranslationalStiffnessSelect)this.TranslationalStiffnessZ.clone());
		if(this.RotationalStiffnessX != null)
			ifcBoundaryNodeCondition.setRotationalStiffnessX((IfcRotationalStiffnessSelect)this.RotationalStiffnessX.clone());
		if(this.RotationalStiffnessY != null)
			ifcBoundaryNodeCondition.setRotationalStiffnessY((IfcRotationalStiffnessSelect)this.RotationalStiffnessY.clone());
		if(this.RotationalStiffnessZ != null)
			ifcBoundaryNodeCondition.setRotationalStiffnessZ((IfcRotationalStiffnessSelect)this.RotationalStiffnessZ.clone());
		return ifcBoundaryNodeCondition;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcBoundaryNodeCondition ifcBoundaryNodeCondition = new IfcBoundaryNodeCondition();
		if(this.Name != null)
			ifcBoundaryNodeCondition.setName(this.Name);
		if(this.TranslationalStiffnessX != null)
			ifcBoundaryNodeCondition.setTranslationalStiffnessX(this.TranslationalStiffnessX);
		if(this.TranslationalStiffnessY != null)
			ifcBoundaryNodeCondition.setTranslationalStiffnessY(this.TranslationalStiffnessY);
		if(this.TranslationalStiffnessZ != null)
			ifcBoundaryNodeCondition.setTranslationalStiffnessZ(this.TranslationalStiffnessZ);
		if(this.RotationalStiffnessX != null)
			ifcBoundaryNodeCondition.setRotationalStiffnessX(this.RotationalStiffnessX);
		if(this.RotationalStiffnessY != null)
			ifcBoundaryNodeCondition.setRotationalStiffnessY(this.RotationalStiffnessY);
		if(this.RotationalStiffnessZ != null)
			ifcBoundaryNodeCondition.setRotationalStiffnessZ(this.RotationalStiffnessZ);
		return ifcBoundaryNodeCondition;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

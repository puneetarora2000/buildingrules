/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcBoundaryFaceCondition<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcBoundaryFaceCondition extends IfcBoundaryCondition implements ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcLabel","IfcModulusOfSubgradeReactionSelect","IfcModulusOfSubgradeReactionSelect","IfcModulusOfSubgradeReactionSelect"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** TranslationalStiffnessByAreaX is an OPTIONAL attribute**/
	protected IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaX;
	/** TranslationalStiffnessByAreaY is an OPTIONAL attribute**/
	protected IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaY;
	/** TranslationalStiffnessByAreaZ is an OPTIONAL attribute**/
	protected IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaZ;
	/**
	* The default constructor.
	**/
	public IfcBoundaryFaceCondition(){}

	/**
	* Constructs a new IfcBoundaryFaceCondition object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param TranslationalStiffnessByAreaX OPTIONAL parameter of type IfcModulusOfSubgradeReactionSelect
	* @param TranslationalStiffnessByAreaY OPTIONAL parameter of type IfcModulusOfSubgradeReactionSelect
	* @param TranslationalStiffnessByAreaZ OPTIONAL parameter of type IfcModulusOfSubgradeReactionSelect
	**/
	public IfcBoundaryFaceCondition(IfcLabel Name, IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaX, IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaY, IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaZ)
	{
		this.Name = Name;
		this.TranslationalStiffnessByAreaX = TranslationalStiffnessByAreaX;
		this.TranslationalStiffnessByAreaY = TranslationalStiffnessByAreaY;
		this.TranslationalStiffnessByAreaZ = TranslationalStiffnessByAreaZ;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcBoundaryFaceCondition object using the given parameters.
	*
	* @param Name OPTIONAL parameter of type IfcLabel
	* @param TranslationalStiffnessByAreaX OPTIONAL parameter of type IfcModulusOfSubgradeReactionSelect
	* @param TranslationalStiffnessByAreaY OPTIONAL parameter of type IfcModulusOfSubgradeReactionSelect
	* @param TranslationalStiffnessByAreaZ OPTIONAL parameter of type IfcModulusOfSubgradeReactionSelect
	**/
	public void setParameters(IfcLabel Name, IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaX, IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaY, IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaZ)
	{
		this.Name = Name;
		this.TranslationalStiffnessByAreaX = TranslationalStiffnessByAreaX;
		this.TranslationalStiffnessByAreaY = TranslationalStiffnessByAreaY;
		this.TranslationalStiffnessByAreaZ = TranslationalStiffnessByAreaZ;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.Name = (IfcLabel) parameters.get(0);
		this.TranslationalStiffnessByAreaX = (IfcModulusOfSubgradeReactionSelect) parameters.get(1);
		this.TranslationalStiffnessByAreaY = (IfcModulusOfSubgradeReactionSelect) parameters.get(2);
		this.TranslationalStiffnessByAreaZ = (IfcModulusOfSubgradeReactionSelect) parameters.get(3);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		 super.destruct();
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcBoundaryFaceCondition.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCBOUNDARYFACECONDITION(");
		if(getRedefinedDerivedAttributeTypes().contains("Name")) stepString = stepString.concat("*,");
		else{
		if(this.Name != null)		stepString = stepString.concat(((RootInterface)this.Name).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TranslationalStiffnessByAreaX")) stepString = stepString.concat("*,");
		else{
		if(this.TranslationalStiffnessByAreaX != null)		stepString = stepString.concat(((RootInterface)this.TranslationalStiffnessByAreaX).getStepParameter(IfcModulusOfSubgradeReactionSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TranslationalStiffnessByAreaY")) stepString = stepString.concat("*,");
		else{
		if(this.TranslationalStiffnessByAreaY != null)		stepString = stepString.concat(((RootInterface)this.TranslationalStiffnessByAreaY).getStepParameter(IfcModulusOfSubgradeReactionSelect.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("TranslationalStiffnessByAreaZ")) stepString = stepString.concat("*);");
		else{
		if(this.TranslationalStiffnessByAreaZ != null)		stepString = stepString.concat(((RootInterface)this.TranslationalStiffnessByAreaZ).getStepParameter(IfcModulusOfSubgradeReactionSelect.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the TranslationalStiffnessByAreaX attribute to the given value.
	*
	* @param TranslationalStiffnessByAreaX DEMANDED value to set - may not be null
	**/
	public void setTranslationalStiffnessByAreaX(IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaX)
	{
		this.TranslationalStiffnessByAreaX = TranslationalStiffnessByAreaX;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TranslationalStiffnessByAreaX attribute.
	*
	* @return the value of TranslationalStiffnessByAreaX
	/**/
	public IfcModulusOfSubgradeReactionSelect getTranslationalStiffnessByAreaX()
	{
		return this.TranslationalStiffnessByAreaX;
	}

	/**
	* This method sets the TranslationalStiffnessByAreaY attribute to the given value.
	*
	* @param TranslationalStiffnessByAreaY DEMANDED value to set - may not be null
	**/
	public void setTranslationalStiffnessByAreaY(IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaY)
	{
		this.TranslationalStiffnessByAreaY = TranslationalStiffnessByAreaY;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TranslationalStiffnessByAreaY attribute.
	*
	* @return the value of TranslationalStiffnessByAreaY
	/**/
	public IfcModulusOfSubgradeReactionSelect getTranslationalStiffnessByAreaY()
	{
		return this.TranslationalStiffnessByAreaY;
	}

	/**
	* This method sets the TranslationalStiffnessByAreaZ attribute to the given value.
	*
	* @param TranslationalStiffnessByAreaZ DEMANDED value to set - may not be null
	**/
	public void setTranslationalStiffnessByAreaZ(IfcModulusOfSubgradeReactionSelect TranslationalStiffnessByAreaZ)
	{
		this.TranslationalStiffnessByAreaZ = TranslationalStiffnessByAreaZ;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TranslationalStiffnessByAreaZ attribute.
	*
	* @return the value of TranslationalStiffnessByAreaZ
	/**/
	public IfcModulusOfSubgradeReactionSelect getTranslationalStiffnessByAreaZ()
	{
		return this.TranslationalStiffnessByAreaZ;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	public Object clone()
	{
		IfcBoundaryFaceCondition ifcBoundaryFaceCondition = new IfcBoundaryFaceCondition();
		if(this.Name != null)
			ifcBoundaryFaceCondition.setName((IfcLabel)this.Name.clone());
		if(this.TranslationalStiffnessByAreaX != null)
			ifcBoundaryFaceCondition.setTranslationalStiffnessByAreaX((IfcModulusOfSubgradeReactionSelect)this.TranslationalStiffnessByAreaX.clone());
		if(this.TranslationalStiffnessByAreaY != null)
			ifcBoundaryFaceCondition.setTranslationalStiffnessByAreaY((IfcModulusOfSubgradeReactionSelect)this.TranslationalStiffnessByAreaY.clone());
		if(this.TranslationalStiffnessByAreaZ != null)
			ifcBoundaryFaceCondition.setTranslationalStiffnessByAreaZ((IfcModulusOfSubgradeReactionSelect)this.TranslationalStiffnessByAreaZ.clone());
		return ifcBoundaryFaceCondition;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcBoundaryFaceCondition ifcBoundaryFaceCondition = new IfcBoundaryFaceCondition();
		if(this.Name != null)
			ifcBoundaryFaceCondition.setName(this.Name);
		if(this.TranslationalStiffnessByAreaX != null)
			ifcBoundaryFaceCondition.setTranslationalStiffnessByAreaX(this.TranslationalStiffnessByAreaX);
		if(this.TranslationalStiffnessByAreaY != null)
			ifcBoundaryFaceCondition.setTranslationalStiffnessByAreaY(this.TranslationalStiffnessByAreaY);
		if(this.TranslationalStiffnessByAreaZ != null)
			ifcBoundaryFaceCondition.setTranslationalStiffnessByAreaZ(this.TranslationalStiffnessByAreaZ);
		return ifcBoundaryFaceCondition;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

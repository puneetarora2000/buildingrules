/* Generated By: IFC Tools Project EXPRESS TO JAVA COMPILER: Do not edit this file!! */
package ifc4javatoolbox.ifc4;
/**
 * This is a default implementation of the entity IfcReference<br><br>
 *<br><br>
 * Copyright: CC BY-NC-SA 3.0 DE (cc) 2013 Eike Tauscher and Michael Theiler<br><br>
 * The whole package including this class is licensed under<br>
 * <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en/'>
 * Creative Commons Attribution-Non-Commercial-Share Alike 3.0 Germany</a>.<br><br>
 * If you are using the package or parts of it in any commercial way, a commercial license is required. 
 * Visit <a href='http://www.ifctoolsproject.com'>http://www.ifctoolsproject.com</a> for more information
 * or contact us directly: <a href='mailto:info@ifctoolsproject.com'>info@ifctoolsproject.com</a><br>
 */
public class IfcReference extends InternalAccessClass implements IfcAppliedValueSelect, IfcMetricValueSelect, ClassInterface
{
	private static final String[] nonInverseAttributes = new String[]{"IfcIdentifier","IfcIdentifier","IfcLabel","LIST<INTEGER>","IfcReference"};
	private java.util.ArrayList<CloneableObject> stepParameter = null;
	private java.util.HashSet<ObjectChangeListener> listenerList = null;
	protected int stepLineNumber;
	/** TypeIdentifier is an OPTIONAL attribute**/
	protected IfcIdentifier TypeIdentifier;
	/** AttributeIdentifier is an OPTIONAL attribute**/
	protected IfcIdentifier AttributeIdentifier;
	/** InstanceName is an OPTIONAL attribute**/
	protected IfcLabel InstanceName;
	/** ListPositions is an OPTIONAL attribute**/
	protected LIST<INTEGER> ListPositions;
	/** InnerReference is an OPTIONAL attribute**/
	protected IfcReference InnerReference;
	/**
	* The default constructor.
	**/
	public IfcReference(){}

	/**
	* Constructs a new IfcReference object using the given parameters.
	*
	* @param TypeIdentifier OPTIONAL parameter of type IfcIdentifier
	* @param AttributeIdentifier OPTIONAL parameter of type IfcIdentifier
	* @param InstanceName OPTIONAL parameter of type IfcLabel
	* @param ListPositions OPTIONAL parameter of type LIST<INTEGER>
	* @param InnerReference OPTIONAL parameter of type IfcReference
	**/
	public IfcReference(IfcIdentifier TypeIdentifier, IfcIdentifier AttributeIdentifier, IfcLabel InstanceName, LIST<INTEGER> ListPositions, IfcReference InnerReference)
	{
		this.TypeIdentifier = TypeIdentifier;
		this.AttributeIdentifier = AttributeIdentifier;
		this.InstanceName = InstanceName;
		this.ListPositions = ListPositions;
		this.InnerReference = InnerReference;
		resolveInverses();
	}

	/**
	 * This method initializes the IfcReference object using the given parameters.
	*
	* @param TypeIdentifier OPTIONAL parameter of type IfcIdentifier
	* @param AttributeIdentifier OPTIONAL parameter of type IfcIdentifier
	* @param InstanceName OPTIONAL parameter of type IfcLabel
	* @param ListPositions OPTIONAL parameter of type LIST<INTEGER>
	* @param InnerReference OPTIONAL parameter of type IfcReference
	**/
	public void setParameters(IfcIdentifier TypeIdentifier, IfcIdentifier AttributeIdentifier, IfcLabel InstanceName, LIST<INTEGER> ListPositions, IfcReference InnerReference)
	{
		this.TypeIdentifier = TypeIdentifier;
		this.AttributeIdentifier = AttributeIdentifier;
		this.InstanceName = InstanceName;
		this.ListPositions = ListPositions;
		this.InnerReference = InnerReference;
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	@SuppressWarnings("unchecked")
	void initialize(java.util.ArrayList<CloneableObject> parameters)
	{
		this.TypeIdentifier = (IfcIdentifier) parameters.get(0);
		this.AttributeIdentifier = (IfcIdentifier) parameters.get(1);
		this.InstanceName = (IfcLabel) parameters.get(2);
		this.ListPositions = (LIST<INTEGER>) parameters.get(3);
		this.InnerReference = (IfcReference) parameters.get(4);
		resolveInverses();
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void destruct()
	{
		listenerList = null;
	}

	private void resolveInverses()
	{
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	String[] getNonInverseAttributeTypes()
	{
		return IfcReference.nonInverseAttributes;	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	private java.util.HashSet<String> getRedefinedDerivedAttributeTypes()
	{
		java.util.HashSet<String> redefinedDerivedAttributes = new java.util.HashSet<String>();
		return redefinedDerivedAttributes;	}

	/**
 * This method returns the object IFC  STEP representation. This method is called by the IfcModel object to write IFC STEP files.
	 *
	 * @return the IFC STEP representation of this object
	**/
	public String getStepLine()
	{
		String stepString = new String("#"+this.stepLineNumber+"= ");
		stepString = stepString.concat("IFCREFERENCE(");
		if(getRedefinedDerivedAttributeTypes().contains("TypeIdentifier")) stepString = stepString.concat("*,");
		else{
		if(this.TypeIdentifier != null)		stepString = stepString.concat(((RootInterface)this.TypeIdentifier).getStepParameter(IfcIdentifier.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("AttributeIdentifier")) stepString = stepString.concat("*,");
		else{
		if(this.AttributeIdentifier != null)		stepString = stepString.concat(((RootInterface)this.AttributeIdentifier).getStepParameter(IfcIdentifier.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("InstanceName")) stepString = stepString.concat("*,");
		else{
		if(this.InstanceName != null)		stepString = stepString.concat(((RootInterface)this.InstanceName).getStepParameter(IfcLabel.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("ListPositions")) stepString = stepString.concat("*,");
		else{
		if(this.ListPositions != null)		stepString = stepString.concat(((RootInterface)this.ListPositions).getStepParameter(INTEGER.class.isInterface())+",");
		else		stepString = stepString.concat("$,");
		}
		if(getRedefinedDerivedAttributeTypes().contains("InnerReference")) stepString = stepString.concat("*);");
		else{
		if(this.InnerReference != null)		stepString = stepString.concat(((RootInterface)this.InnerReference).getStepParameter(IfcReference.class.isInterface())+");");
		else		stepString = stepString.concat("$);");
		}
		return stepString;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	public String getStepParameter(boolean isSelectType)
	{
		return "#" + this.stepLineNumber;
	}

	/**
	 * This method returns the line number within a IFC  STEP representation. This method is called from other objects, where this one is referenced.
	 *
	 * @return the STEP line number
	**/
	public int getStepLineNumber()
	{
		return this.stepLineNumber;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepLineNumber(int number)
	{
		this.stepLineNumber = number;
	}

	/**
	* This method sets the TypeIdentifier attribute to the given value.
	*
	* @param TypeIdentifier DEMANDED value to set - may not be null
	**/
	public void setTypeIdentifier(IfcIdentifier TypeIdentifier)
	{
		this.TypeIdentifier = TypeIdentifier;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the TypeIdentifier attribute.
	*
	* @return the value of TypeIdentifier
	/**/
	public IfcIdentifier getTypeIdentifier()
	{
		return this.TypeIdentifier;
	}

	/**
	* This method sets the AttributeIdentifier attribute to the given value.
	*
	* @param AttributeIdentifier DEMANDED value to set - may not be null
	**/
	public void setAttributeIdentifier(IfcIdentifier AttributeIdentifier)
	{
		this.AttributeIdentifier = AttributeIdentifier;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the AttributeIdentifier attribute.
	*
	* @return the value of AttributeIdentifier
	/**/
	public IfcIdentifier getAttributeIdentifier()
	{
		return this.AttributeIdentifier;
	}

	/**
	* This method sets the InstanceName attribute to the given value.
	*
	* @param InstanceName DEMANDED value to set - may not be null
	**/
	public void setInstanceName(IfcLabel InstanceName)
	{
		this.InstanceName = InstanceName;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the InstanceName attribute.
	*
	* @return the value of InstanceName
	/**/
	public IfcLabel getInstanceName()
	{
		return this.InstanceName;
	}

	/**
	* This method sets the ListPositions attribute to the given value.
	*
	* @param ListPositions DEMANDED value to set - may not be null
	**/
	public void setListPositions(LIST<INTEGER> ListPositions)
	{
		this.ListPositions = ListPositions;
		fireChangeEvent();
	}

	/**
	* This method returns a copy of the list of the ListPositions attribute.
	*
	* @return a copy of the ListPositions list
	**/
	public LIST<INTEGER> getListPositions()
	{
		if(this.ListPositions != null)
			return new LIST<INTEGER>(this.ListPositions);
		return null;
	}

	/**
	* This method adds an INTEGER object to the ListPositions list.
	* @param ListPositions element to be appended to this list.
	**/
	public void addListPositions(INTEGER ListPositions)
	{
		if(this.ListPositions == null)
			this.ListPositions = new LIST<INTEGER>();
		this.ListPositions.add(ListPositions);
		fireChangeEvent();
	}

	/**
	* This method adds a collection of INTEGER objects to the ListPositions list.
	* @param ListPositions collection containing elements to be added to this list.
	**/
	public void addAllListPositions(java.util.Collection<INTEGER> ListPositions)
	{
		if(this.ListPositions == null)
			this.ListPositions = new LIST<INTEGER>();
		this.ListPositions.addAll(ListPositions);
		fireChangeEvent();
	}

	/**
	* This method removes all elements from the ListPositions list.
	**/
	public void clearListPositions()
	{
		if(this.ListPositions != null)
		{
			this.ListPositions.clear();
			fireChangeEvent();
		}
	}

	/**
	* This method removes an INTEGER object from the ListPositions list.
	* @param ListPositions element to be removed from this list.
	**/
	public void removeListPositions(INTEGER ListPositions)
	{
		if(this.ListPositions != null)
		{
			this.ListPositions.remove(ListPositions);
			fireChangeEvent();
		}
	}

	/**
	* This method removes a collection of INTEGER objects from the ListPositions list.
	* @param ListPositions collection containing elements to be removed from this list.
	**/
	public void removeAllListPositions(java.util.Collection<INTEGER> ListPositions)
	{
		if(this.ListPositions != null)
		{
			this.ListPositions.removeAll(ListPositions);
			fireChangeEvent();
		}
	}

	/**
	* This method sets the InnerReference attribute to the given value.
	*
	* @param InnerReference DEMANDED value to set - may not be null
	**/
	public void setInnerReference(IfcReference InnerReference)
	{
		this.InnerReference = InnerReference;
		fireChangeEvent();
	}

	/**
	* This method returns the value of the InnerReference attribute.
	*
	* @return the value of InnerReference
	/**/
	public IfcReference getInnerReference()
	{
		return this.InnerReference;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	void setStepParameter(java.util.ArrayList<CloneableObject> parameter)
	{
		this.stepParameter = parameter;
	}

	/**
	 * This method is used internally and should NOT be used for own purposes.
	**/
	java.util.ArrayList<CloneableObject> getStepParameter()
	{
		return this.stepParameter;
	}

	/**
	 * This method registers an ObjectChangeListener to this object. An event is fired whenever one of its values was changed.
	 * 
	 *@param listener the listener to register
	**/
	public void addObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	listenerList = new java.util.HashSet<ObjectChangeListener>(1,1);
		listenerList.add(listener);
	}

	/**
	 * This method unregisters an ObjectChangeListener from this object.
	 * 
	 *@param listener the listener to unregister
	**/
	public void removeObjectChangeListener(ObjectChangeListener listener)
	{
		if (listenerList == null)	return;
		listenerList.remove(listener);
		if (listenerList.size()==0) listenerList = null;
	}

	/**
	 * This method removes all currently registered ObjectChangeListeners from this object.
	**/
	public void removeAllObjectChangeListeners()
	{
		listenerList = null;
	}

	protected void fireChangeEvent()
	{
		if(listenerList == null) return;
		for(ObjectChangeListener listener : listenerList)
			listener.ifcModelObjectChange(this);
	}

	/**
	 * This method clones the object (deep cloning).
	 *
	 * @return the cloned object
	**/
	@SuppressWarnings("unchecked")
	public Object clone()
	{
		IfcReference ifcReference = new IfcReference();
		if(this.TypeIdentifier != null)
			ifcReference.setTypeIdentifier((IfcIdentifier)this.TypeIdentifier.clone());
		if(this.AttributeIdentifier != null)
			ifcReference.setAttributeIdentifier((IfcIdentifier)this.AttributeIdentifier.clone());
		if(this.InstanceName != null)
			ifcReference.setInstanceName((IfcLabel)this.InstanceName.clone());
		if(this.ListPositions != null)
			ifcReference.setListPositions((LIST<INTEGER>)this.ListPositions.clone());
		if(this.InnerReference != null)
			ifcReference.setInnerReference((IfcReference)this.InnerReference.clone());
		return ifcReference;
	}

	/**
	 * This method copys the object as shallow copy (all referenced objects are remaining).
	 *
	 * @return the cloned object
	**/
	public Object shallowCopy()
	{
		IfcReference ifcReference = new IfcReference();
		if(this.TypeIdentifier != null)
			ifcReference.setTypeIdentifier(this.TypeIdentifier);
		if(this.AttributeIdentifier != null)
			ifcReference.setAttributeIdentifier(this.AttributeIdentifier);
		if(this.InstanceName != null)
			ifcReference.setInstanceName(this.InstanceName);
		if(this.ListPositions != null)
			ifcReference.setListPositions(this.ListPositions);
		if(this.InnerReference != null)
			ifcReference.setInnerReference(this.InnerReference);
		return ifcReference;
	}

	/**
	* This method returns the objects standard description.
	*
	* @return the standard description
	**/
	public String toString()
	{
		return "#"+ this.getStepLineNumber() + " " + this.getClass().getSimpleName();
	}


}

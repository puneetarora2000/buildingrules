/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rules;

import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;

import ifc4javatoolbox.ifc4.IfcLabel;
import ifc4javatoolbox.ifc4.IfcProject;
import ifc4javatoolbox.ifcmodel.IfcModel;
import ifc4javatoolbox.step.parser.util.ProgressEvent;
import ifc4javatoolbox.step.parser.util.StepParserProgressListener;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import limit.theory.CheckComplianceMain;
import limit.theory.ComplianceResults;
import limit.theory.ViewMainIFC;
import report.ReportBuilder;
import static report.ReportBuilder.GenerateHTML;
import report.ReportTemplate;

/**
 *
 * @author Ecologic
 */
public class MainStart extends javax.swing.JFrame {

    JFileChooser chooser = null;
    JFileChooser uploader = null;
    String BaseDir = "D:\\Dropbox\\RaninderBox\\";

    int returnVal = 0;

    /**
     * Creates new form MainStart
     */
    public MainStart() {
        initComponents();
        chooser = new JFileChooser();
        uploader = new JFileChooser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        RuleTable = new javax.swing.JTable();
        btnIFCupload = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnInvokeCheker = new javax.swing.JButton();
        btnIFCViewer = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuOpenRules = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnuGenerateICF = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rule Checker ");

        jPanel1.setToolTipText("Rule Table Container");

        RuleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        RuleTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RuleTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(RuleTable);

        btnIFCupload.setText("Upload IFC");
        btnIFCupload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIFCuploadActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(204, 204, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Thesis Topic");

        btnInvokeCheker.setText("Invoke Checker");
        btnInvokeCheker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInvokeChekerActionPerformed(evt);
            }
        });

        btnIFCViewer.setText("IFC Reader");
        btnIFCViewer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIFCViewerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnInvokeCheker, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnIFCupload, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnIFCViewer, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(btnInvokeCheker)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnIFCViewer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnIFCupload))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        mnuOpenRules.setBackground(new java.awt.Color(51, 255, 0));
        mnuOpenRules.setText("OpenRules");
        mnuOpenRules.setToolTipText("Open Rule CSV File ");
        mnuOpenRules.setIconTextGap(5);
        mnuOpenRules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenRulesActionPerformed(evt);
            }
        });
        jMenu1.add(mnuOpenRules);
        jMenu1.add(jSeparator1);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(".");

        mnuGenerateICF.setText("Generate");
        mnuGenerateICF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGenerateICFActionPerformed(evt);
            }
        });
        jMenu2.add(mnuGenerateICF);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuOpenRulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenRulesActionPerformed
        // TODO add your handling code here:
        String RuleFileName = "";

        ArrayList<String[]> Rs2 = null;
        File DataFile = null;
        String csvfilename = "";
        RuleReader Rd = new RuleReader();
        RuleModel rulemodel = new RuleModel();
        this.RuleTable.setModel(rulemodel);

//http://stackoverflow.com/questions/22864095/reading-data-from-a-specific-csv-file-and-displaying-it-in-a-jtable
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "CSV Files", "csv", "txt");
        chooser.setDialogTitle("Open or Import Rule File");
        chooser.setFileFilter(filter);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setApproveButtonToolTipText("Kindly Open Rule File");
        chooser.setApproveButtonText("Kindly Open Rule File");

        //File workingDirectory = new File(System.getProperty("user.dir"));
        File workingDirectory = new File("D:\\Dropbox\\RaninderBox\\models");
        chooser.setCurrentDirectory(workingDirectory);

        chooser.setMultiSelectionEnabled(false);
        returnVal = chooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            RuleFileName = chooser.getSelectedFile().getName();
            System.out.println("Kindly Open Rule File: "
                    + RuleFileName);

            try {

                DataFile = new File(BaseDir + RuleFileName);
                Rs2 = Rd.ReadCSVfile(DataFile);

            } catch (Exception e) {

                System.out.println("File Path Problem :" + e.getMessage());

            }

            rulemodel.AddCSVData(Rs2);

        } else {

            System.out.println("User Interpted !!!");

        }


    }//GEN-LAST:event_mnuOpenRulesActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:

        System.exit(1);

    }//GEN-LAST:event_ExitActionPerformed

    private void RuleTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RuleTableMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            JTable source = (JTable) evt.getSource();
            int rowIndex = source.rowAtPoint(evt.getPoint());
            int colIndex = source.columnAtPoint(evt.getPoint());

            source.setToolTipText("Checking Rule at:" + colIndex + "," + rowIndex);

            // get data from table model using row index
            // navigate to panel
            System.out.println("Checking Rule at:" + colIndex + "," + rowIndex);

        }


    }//GEN-LAST:event_RuleTableMouseClicked

    private void btnIFCuploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIFCuploadActionPerformed
        // TODO add your handling code here:

        // Function for checking compliance of the rules 
        // these rules are read from the CSV file from Rule Engine PHP
        // 
        CheckComplianceMain ccm = new CheckComplianceMain();
       // Get the Rule Structure and and get it checked , return values as per HTML 
        // Report Structure . Get call from the CSV Rule File  .
        String IFCFileName = "";

        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "IFC Files", "ifc", "txt");
        uploader.setDialogTitle("Open IFC  File");
        uploader.setFileFilter(filter);
        uploader.setAcceptAllFileFilterUsed(true);
        uploader.setApproveButtonToolTipText("Kindly IFC  File");
        uploader.setApproveButtonText("Kindly IFC File");

        //File workingDirectory = new File(System.getProperty("user.dir"));
        File workingDirectory = new File("D:\\Dropbox\\RaninderBox\\");
        uploader.setCurrentDirectory(workingDirectory);

        uploader.setMultiSelectionEnabled(false);
        returnVal = uploader.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {

            IFCFileName = uploader.getSelectedFile().getName();
            String CurrDir = uploader.getCurrentDirectory().getAbsolutePath();
            System.out.println("Kindly Open IFC File: " + CurrDir + "\\" + IFCFileName);

            try {
                
               // DataFile = new File(BaseDir + RuleFileName);
                //Rs2 = Rd.ReadICFfile(DataFile);
                MyIfcParser parser = new MyIfcParser();
                Common.msg("Starting to Read IFC File ");
                String ProjectName = parser.getProjectName(CurrDir + "\\" + IFCFileName);
                System.out.println("End of Reading File ");
                
                ComplianceResults   result = ccm.CheckCompliance(IFCFileName, null, null, null);
                
                
                //Write Report : 
                
               // report.ReportBuilder report = new ReportBuilder();
                ReportTemplate rm = new ReportTemplate();
                rm.BuildingName ="Testing ";
                GenerateHTML(rm);
                com.rules.Common.msg("End of Report Generation ");
                
                
                
            } catch (Exception e) {

                System.out.println("IFC File Path Problem :" + e.getMessage());

            }

        }
    }//GEN-LAST:event_btnIFCuploadActionPerformed

    private void btnInvokeChekerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInvokeChekerActionPerformed
        // TODO add your handling code here:
        double conformance = 01;
        double non_conformance = 20;

        System.out.println("Execute Checker !!!\n & Generate Report");

        report.ReportPieChart.GenrateChart(conformance, non_conformance);


    }//GEN-LAST:event_btnInvokeChekerActionPerformed
    /*
     View the Stucture of the IFC file before processing .
    
    
    
     */
    private void btnIFCViewerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIFCViewerActionPerformed
        // TODO add your handling code here:
        MyIfcParser parser = new MyIfcParser();
        String ProjectName = parser.getProjectName(null);
        System.out.println("ICF VIEWER !!!!" + ProjectName);

       // limit.theory.ViewMainIFC obj = new ViewMainIFC();
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }
        new ViewMainIFC();


    }//GEN-LAST:event_btnIFCViewerActionPerformed
    /*
     This may be required in case , we need IFC file not available 
    
    
    
     */
    private void mnuGenerateICFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGenerateICFActionPerformed
        // TODO add your handling code here:
        String FileName = "test.ifc";
        File stepFile = new File(Common.IfcFileStorage + FileName);

        System.out.println("Generate IFC Files");

    }//GEN-LAST:event_mnuGenerateICFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainStart().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JTable RuleTable;
    private javax.swing.JButton btnIFCViewer;
    private javax.swing.JButton btnIFCupload;
    private javax.swing.JButton btnInvokeCheker;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem mnuGenerateICF;
    private javax.swing.JMenuItem mnuOpenRules;
    // End of variables declaration//GEN-END:variables
}
